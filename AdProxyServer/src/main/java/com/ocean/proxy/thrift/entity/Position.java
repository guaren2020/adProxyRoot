/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class Position implements org.apache.thrift.TBase<Position, Position._Fields>, java.io.Serializable, Cloneable, Comparable<Position> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Position");

  private static final org.apache.thrift.protocol.TField PUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("putType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPACE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionTupleSchemeFactory());
  }

  public int putType; // optional
  public int positionType; // optional
  /**
   * 
   * @see AdSpaceType
   */
  public AdSpaceType spaceType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PUT_TYPE((short)1, "putType"),
    POSITION_TYPE((short)2, "positionType"),
    /**
     * 
     * @see AdSpaceType
     */
    SPACE_TYPE((short)3, "spaceType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PUT_TYPE
          return PUT_TYPE;
        case 2: // POSITION_TYPE
          return POSITION_TYPE;
        case 3: // SPACE_TYPE
          return SPACE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PUTTYPE_ISSET_ID = 0;
  private static final int __POSITIONTYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PUT_TYPE,_Fields.POSITION_TYPE,_Fields.SPACE_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("putType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("positionType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("spaceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AdSpaceType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Position.class, metaDataMap);
  }

  public Position() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Position(Position other) {
    __isset_bitfield = other.__isset_bitfield;
    this.putType = other.putType;
    this.positionType = other.positionType;
    if (other.isSetSpaceType()) {
      this.spaceType = other.spaceType;
    }
  }

  public Position deepCopy() {
    return new Position(this);
  }

  
  public void clear() {
    setPutTypeIsSet(false);
    this.putType = 0;
    setPositionTypeIsSet(false);
    this.positionType = 0;
    this.spaceType = null;
  }

  public int getPutType() {
    return this.putType;
  }

  public Position setPutType(int putType) {
    this.putType = putType;
    setPutTypeIsSet(true);
    return this;
  }

  public void unsetPutType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUTTYPE_ISSET_ID);
  }

  /** Returns true if field putType is set (has been assigned a value) and false otherwise */
  public boolean isSetPutType() {
    return EncodingUtils.testBit(__isset_bitfield, __PUTTYPE_ISSET_ID);
  }

  public void setPutTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUTTYPE_ISSET_ID, value);
  }

  public int getPositionType() {
    return this.positionType;
  }

  public Position setPositionType(int positionType) {
    this.positionType = positionType;
    setPositionTypeIsSet(true);
    return this;
  }

  public void unsetPositionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONTYPE_ISSET_ID);
  }

  /** Returns true if field positionType is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionType() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONTYPE_ISSET_ID);
  }

  public void setPositionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONTYPE_ISSET_ID, value);
  }

  /**
   * 
   * @see AdSpaceType
   */
  public AdSpaceType getSpaceType() {
    return this.spaceType;
  }

  /**
   * 
   * @see AdSpaceType
   */
  public Position setSpaceType(AdSpaceType spaceType) {
    this.spaceType = spaceType;
    return this;
  }

  public void unsetSpaceType() {
    this.spaceType = null;
  }

  /** Returns true if field spaceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceType() {
    return this.spaceType != null;
  }

  public void setSpaceTypeIsSet(boolean value) {
    if (!value) {
      this.spaceType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PUT_TYPE:
      if (value == null) {
        unsetPutType();
      } else {
        setPutType((Integer)value);
      }
      break;

    case POSITION_TYPE:
      if (value == null) {
        unsetPositionType();
      } else {
        setPositionType((Integer)value);
      }
      break;

    case SPACE_TYPE:
      if (value == null) {
        unsetSpaceType();
      } else {
        setSpaceType((AdSpaceType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PUT_TYPE:
      return Integer.valueOf(getPutType());

    case POSITION_TYPE:
      return Integer.valueOf(getPositionType());

    case SPACE_TYPE:
      return getSpaceType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PUT_TYPE:
      return isSetPutType();
    case POSITION_TYPE:
      return isSetPositionType();
    case SPACE_TYPE:
      return isSetSpaceType();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Position)
      return this.equals((Position)that);
    return false;
  }

  public boolean equals(Position that) {
    if (that == null)
      return false;

    boolean this_present_putType = true && this.isSetPutType();
    boolean that_present_putType = true && that.isSetPutType();
    if (this_present_putType || that_present_putType) {
      if (!(this_present_putType && that_present_putType))
        return false;
      if (this.putType != that.putType)
        return false;
    }

    boolean this_present_positionType = true && this.isSetPositionType();
    boolean that_present_positionType = true && that.isSetPositionType();
    if (this_present_positionType || that_present_positionType) {
      if (!(this_present_positionType && that_present_positionType))
        return false;
      if (this.positionType != that.positionType)
        return false;
    }

    boolean this_present_spaceType = true && this.isSetSpaceType();
    boolean that_present_spaceType = true && that.isSetSpaceType();
    if (this_present_spaceType || that_present_spaceType) {
      if (!(this_present_spaceType && that_present_spaceType))
        return false;
      if (!this.spaceType.equals(that.spaceType))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_putType = true && (isSetPutType());
    list.add(present_putType);
    if (present_putType)
      list.add(putType);

    boolean present_positionType = true && (isSetPositionType());
    list.add(present_positionType);
    if (present_positionType)
      list.add(positionType);

    boolean present_spaceType = true && (isSetSpaceType());
    list.add(present_spaceType);
    if (present_spaceType)
      list.add(spaceType.getValue());

    return list.hashCode();
  }

  
  public int compareTo(Position other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPutType()).compareTo(other.isSetPutType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putType, other.putType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionType()).compareTo(other.isSetPositionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionType, other.positionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceType()).compareTo(other.isSetSpaceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceType, other.spaceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("Position(");
    boolean first = true;

    if (isSetPutType()) {
      sb.append("putType:");
      sb.append(this.putType);
      first = false;
    }
    if (isSetPositionType()) {
      if (!first) sb.append(", ");
      sb.append("positionType:");
      sb.append(this.positionType);
      first = false;
    }
    if (isSetSpaceType()) {
      if (!first) sb.append(", ");
      sb.append("spaceType:");
      if (this.spaceType == null) {
        sb.append("null");
      } else {
        sb.append(this.spaceType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionStandardSchemeFactory implements SchemeFactory {
    public PositionStandardScheme getScheme() {
      return new PositionStandardScheme();
    }
  }

  private static class PositionStandardScheme extends StandardScheme<Position> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Position struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PUT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.putType = iprot.readI32();
              struct.setPutTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionType = iprot.readI32();
              struct.setPositionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPACE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceType = com.ocean.proxy.thrift.entity.AdSpaceType.findByValue(iprot.readI32());
              struct.setSpaceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Position struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPutType()) {
        oprot.writeFieldBegin(PUT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.putType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionType()) {
        oprot.writeFieldBegin(POSITION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.positionType);
        oprot.writeFieldEnd();
      }
      if (struct.spaceType != null) {
        if (struct.isSetSpaceType()) {
          oprot.writeFieldBegin(SPACE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.spaceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionTupleSchemeFactory implements SchemeFactory {
    public PositionTupleScheme getScheme() {
      return new PositionTupleScheme();
    }
  }

  private static class PositionTupleScheme extends TupleScheme<Position> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPutType()) {
        optionals.set(0);
      }
      if (struct.isSetPositionType()) {
        optionals.set(1);
      }
      if (struct.isSetSpaceType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPutType()) {
        oprot.writeI32(struct.putType);
      }
      if (struct.isSetPositionType()) {
        oprot.writeI32(struct.positionType);
      }
      if (struct.isSetSpaceType()) {
        oprot.writeI32(struct.spaceType.getValue());
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.putType = iprot.readI32();
        struct.setPutTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.positionType = iprot.readI32();
        struct.setPositionTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spaceType = com.ocean.proxy.thrift.entity.AdSpaceType.findByValue(iprot.readI32());
        struct.setSpaceTypeIsSet(true);
      }
    }
  }

}

