/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdWithMatchResp implements org.apache.thrift.TBase<AdWithMatchResp, AdWithMatchResp._Fields>, java.io.Serializable, Cloneable, Comparable<AdWithMatchResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdWithMatchResp");

  private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ADS_FIELD_DESC = new org.apache.thrift.protocol.TField("ads", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdWithMatchRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdWithMatchRespTupleSchemeFactory());
  }

  public AdInfoResp ad; // required
  public List<AdInfoResp> ads; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD((short)1, "ad"),
    ADS((short)2, "ads");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD
          return AD;
        case 2: // ADS
          return ADS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdInfoResp.class)));
    tmpMap.put(_Fields.ADS, new org.apache.thrift.meta_data.FieldMetaData("ads", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdInfoResp.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdWithMatchResp.class, metaDataMap);
  }

  public AdWithMatchResp() {
  }

  public AdWithMatchResp(
    AdInfoResp ad,
    List<AdInfoResp> ads)
  {
    this();
    this.ad = ad;
    this.ads = ads;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdWithMatchResp(AdWithMatchResp other) {
    if (other.isSetAd()) {
      this.ad = new AdInfoResp(other.ad);
    }
    if (other.isSetAds()) {
      List<AdInfoResp> __this__ads = new ArrayList<AdInfoResp>(other.ads.size());
      for (AdInfoResp other_element : other.ads) {
        __this__ads.add(new AdInfoResp(other_element));
      }
      this.ads = __this__ads;
    }
  }

  public AdWithMatchResp deepCopy() {
    return new AdWithMatchResp(this);
  }

  public void clear() {
    this.ad = null;
    this.ads = null;
  }

  public AdInfoResp getAd() {
    return this.ad;
  }

  public AdWithMatchResp setAd(AdInfoResp ad) {
    this.ad = ad;
    return this;
  }

  public void unsetAd() {
    this.ad = null;
  }

  /** Returns true if field ad is set (has been assigned a value) and false otherwise */
  public boolean isSetAd() {
    return this.ad != null;
  }

  public void setAdIsSet(boolean value) {
    if (!value) {
      this.ad = null;
    }
  }

  public int getAdsSize() {
    return (this.ads == null) ? 0 : this.ads.size();
  }

  public java.util.Iterator<AdInfoResp> getAdsIterator() {
    return (this.ads == null) ? null : this.ads.iterator();
  }

  public void addToAds(AdInfoResp elem) {
    if (this.ads == null) {
      this.ads = new ArrayList<AdInfoResp>();
    }
    this.ads.add(elem);
  }

  public List<AdInfoResp> getAds() {
    return this.ads;
  }

  public AdWithMatchResp setAds(List<AdInfoResp> ads) {
    this.ads = ads;
    return this;
  }

  public void unsetAds() {
    this.ads = null;
  }

  /** Returns true if field ads is set (has been assigned a value) and false otherwise */
  public boolean isSetAds() {
    return this.ads != null;
  }

  public void setAdsIsSet(boolean value) {
    if (!value) {
      this.ads = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD:
      if (value == null) {
        unsetAd();
      } else {
        setAd((AdInfoResp)value);
      }
      break;

    case ADS:
      if (value == null) {
        unsetAds();
      } else {
        setAds((List<AdInfoResp>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD:
      return getAd();

    case ADS:
      return getAds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD:
      return isSetAd();
    case ADS:
      return isSetAds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdWithMatchResp)
      return this.equals((AdWithMatchResp)that);
    return false;
  }

  public boolean equals(AdWithMatchResp that) {
    if (that == null)
      return false;

    boolean this_present_ad = true && this.isSetAd();
    boolean that_present_ad = true && that.isSetAd();
    if (this_present_ad || that_present_ad) {
      if (!(this_present_ad && that_present_ad))
        return false;
      if (!this.ad.equals(that.ad))
        return false;
    }

    boolean this_present_ads = true && this.isSetAds();
    boolean that_present_ads = true && that.isSetAds();
    if (this_present_ads || that_present_ads) {
      if (!(this_present_ads && that_present_ads))
        return false;
      if (!this.ads.equals(that.ads))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ad = true && (isSetAd());
    list.add(present_ad);
    if (present_ad)
      list.add(ad);

    boolean present_ads = true && (isSetAds());
    list.add(present_ads);
    if (present_ads)
      list.add(ads);

    return list.hashCode();
  }

  public int compareTo(AdWithMatchResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAds()).compareTo(other.isSetAds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ads, other.ads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdWithMatchResp(");
    boolean first = true;

    sb.append("ad:");
    if (this.ad == null) {
      sb.append("null");
    } else {
      sb.append(this.ad);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ads:");
    if (this.ads == null) {
      sb.append("null");
    } else {
      sb.append(this.ads);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ad == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ad' was not present! Struct: " + toString());
    }
    if (ads == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ads' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (ad != null) {
      ad.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdWithMatchRespStandardSchemeFactory implements SchemeFactory {
    public AdWithMatchRespStandardScheme getScheme() {
      return new AdWithMatchRespStandardScheme();
    }
  }

  private static class AdWithMatchRespStandardScheme extends StandardScheme<AdWithMatchResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdWithMatchResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ad = new AdInfoResp();
              struct.ad.read(iprot);
              struct.setAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.ads = new ArrayList<AdInfoResp>(_list40.size);
                AdInfoResp _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new AdInfoResp();
                  _elem41.read(iprot);
                  struct.ads.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setAdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdWithMatchResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ad != null) {
        oprot.writeFieldBegin(AD_FIELD_DESC);
        struct.ad.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ads != null) {
        oprot.writeFieldBegin(ADS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ads.size()));
          for (AdInfoResp _iter43 : struct.ads)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdWithMatchRespTupleSchemeFactory implements SchemeFactory {
    public AdWithMatchRespTupleScheme getScheme() {
      return new AdWithMatchRespTupleScheme();
    }
  }

  private static class AdWithMatchRespTupleScheme extends TupleScheme<AdWithMatchResp> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdWithMatchResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.ad.write(oprot);
      {
        oprot.writeI32(struct.ads.size());
        for (AdInfoResp _iter44 : struct.ads)
        {
          _iter44.write(oprot);
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdWithMatchResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ad = new AdInfoResp();
      struct.ad.read(iprot);
      struct.setAdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.ads = new ArrayList<AdInfoResp>(_list45.size);
        AdInfoResp _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = new AdInfoResp();
          _elem46.read(iprot);
          struct.ads.add(_elem46);
        }
      }
      struct.setAdsIsSet(true);
    }
  }

}

