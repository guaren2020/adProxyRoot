/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdTimeRanageDynamic implements org.apache.thrift.TBase<AdTimeRanageDynamic, AdTimeRanageDynamic._Fields>, java.io.Serializable, Cloneable, Comparable<AdTimeRanageDynamic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdTimeRanageDynamic");

  private static final org.apache.thrift.protocol.TField TIME_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("time_range", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PV_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pv_number", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CLICK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("click_number", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdTimeRanageDynamicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdTimeRanageDynamicTupleSchemeFactory());
  }

  public LimitTimeRangeSec time_range; // optional
  public int pv_number; // optional
  public int click_number; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_RANGE((short)1, "time_range"),
    PV_NUMBER((short)2, "pv_number"),
    CLICK_NUMBER((short)3, "click_number");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_RANGE
          return TIME_RANGE;
        case 2: // PV_NUMBER
          return PV_NUMBER;
        case 3: // CLICK_NUMBER
          return CLICK_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PV_NUMBER_ISSET_ID = 0;
  private static final int __CLICK_NUMBER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIME_RANGE,_Fields.PV_NUMBER,_Fields.CLICK_NUMBER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_RANGE, new org.apache.thrift.meta_data.FieldMetaData("time_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitTimeRangeSec.class)));
    tmpMap.put(_Fields.PV_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pv_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("click_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdTimeRanageDynamic.class, metaDataMap);
  }

  public AdTimeRanageDynamic() {
    this.pv_number = 0;

    this.click_number = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdTimeRanageDynamic(AdTimeRanageDynamic other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTime_range()) {
      this.time_range = new LimitTimeRangeSec(other.time_range);
    }
    this.pv_number = other.pv_number;
    this.click_number = other.click_number;
  }

  public AdTimeRanageDynamic deepCopy() {
    return new AdTimeRanageDynamic(this);
  }

  public void clear() {
    this.time_range = null;
    this.pv_number = 0;

    this.click_number = 0;

  }

  public LimitTimeRangeSec getTime_range() {
    return this.time_range;
  }

  public AdTimeRanageDynamic setTime_range(LimitTimeRangeSec time_range) {
    this.time_range = time_range;
    return this;
  }

  public void unsetTime_range() {
    this.time_range = null;
  }

  /** Returns true if field time_range is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_range() {
    return this.time_range != null;
  }

  public void setTime_rangeIsSet(boolean value) {
    if (!value) {
      this.time_range = null;
    }
  }

  public int getPv_number() {
    return this.pv_number;
  }

  public AdTimeRanageDynamic setPv_number(int pv_number) {
    this.pv_number = pv_number;
    setPv_numberIsSet(true);
    return this;
  }

  public void unsetPv_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PV_NUMBER_ISSET_ID);
  }

  /** Returns true if field pv_number is set (has been assigned a value) and false otherwise */
  public boolean isSetPv_number() {
    return EncodingUtils.testBit(__isset_bitfield, __PV_NUMBER_ISSET_ID);
  }

  public void setPv_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PV_NUMBER_ISSET_ID, value);
  }

  public int getClick_number() {
    return this.click_number;
  }

  public AdTimeRanageDynamic setClick_number(int click_number) {
    this.click_number = click_number;
    setClick_numberIsSet(true);
    return this;
  }

  public void unsetClick_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLICK_NUMBER_ISSET_ID);
  }

  /** Returns true if field click_number is set (has been assigned a value) and false otherwise */
  public boolean isSetClick_number() {
    return EncodingUtils.testBit(__isset_bitfield, __CLICK_NUMBER_ISSET_ID);
  }

  public void setClick_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLICK_NUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_RANGE:
      if (value == null) {
        unsetTime_range();
      } else {
        setTime_range((LimitTimeRangeSec)value);
      }
      break;

    case PV_NUMBER:
      if (value == null) {
        unsetPv_number();
      } else {
        setPv_number((Integer)value);
      }
      break;

    case CLICK_NUMBER:
      if (value == null) {
        unsetClick_number();
      } else {
        setClick_number((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_RANGE:
      return getTime_range();

    case PV_NUMBER:
      return Integer.valueOf(getPv_number());

    case CLICK_NUMBER:
      return Integer.valueOf(getClick_number());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_RANGE:
      return isSetTime_range();
    case PV_NUMBER:
      return isSetPv_number();
    case CLICK_NUMBER:
      return isSetClick_number();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdTimeRanageDynamic)
      return this.equals((AdTimeRanageDynamic)that);
    return false;
  }

  public boolean equals(AdTimeRanageDynamic that) {
    if (that == null)
      return false;

    boolean this_present_time_range = true && this.isSetTime_range();
    boolean that_present_time_range = true && that.isSetTime_range();
    if (this_present_time_range || that_present_time_range) {
      if (!(this_present_time_range && that_present_time_range))
        return false;
      if (!this.time_range.equals(that.time_range))
        return false;
    }

    boolean this_present_pv_number = true && this.isSetPv_number();
    boolean that_present_pv_number = true && that.isSetPv_number();
    if (this_present_pv_number || that_present_pv_number) {
      if (!(this_present_pv_number && that_present_pv_number))
        return false;
      if (this.pv_number != that.pv_number)
        return false;
    }

    boolean this_present_click_number = true && this.isSetClick_number();
    boolean that_present_click_number = true && that.isSetClick_number();
    if (this_present_click_number || that_present_click_number) {
      if (!(this_present_click_number && that_present_click_number))
        return false;
      if (this.click_number != that.click_number)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_time_range = true && (isSetTime_range());
    list.add(present_time_range);
    if (present_time_range)
      list.add(time_range);

    boolean present_pv_number = true && (isSetPv_number());
    list.add(present_pv_number);
    if (present_pv_number)
      list.add(pv_number);

    boolean present_click_number = true && (isSetClick_number());
    list.add(present_click_number);
    if (present_click_number)
      list.add(click_number);

    return list.hashCode();
  }

  public int compareTo(AdTimeRanageDynamic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime_range()).compareTo(other.isSetTime_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_range, other.time_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPv_number()).compareTo(other.isSetPv_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPv_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pv_number, other.pv_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClick_number()).compareTo(other.isSetClick_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClick_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click_number, other.click_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdTimeRanageDynamic(");
    boolean first = true;

    if (isSetTime_range()) {
      sb.append("time_range:");
      if (this.time_range == null) {
        sb.append("null");
      } else {
        sb.append(this.time_range);
      }
      first = false;
    }
    if (isSetPv_number()) {
      if (!first) sb.append(", ");
      sb.append("pv_number:");
      sb.append(this.pv_number);
      first = false;
    }
    if (isSetClick_number()) {
      if (!first) sb.append(", ");
      sb.append("click_number:");
      sb.append(this.click_number);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (time_range != null) {
      time_range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdTimeRanageDynamicStandardSchemeFactory implements SchemeFactory {
    public AdTimeRanageDynamicStandardScheme getScheme() {
      return new AdTimeRanageDynamicStandardScheme();
    }
  }

  private static class AdTimeRanageDynamicStandardScheme extends StandardScheme<AdTimeRanageDynamic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdTimeRanageDynamic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.time_range = new LimitTimeRangeSec();
              struct.time_range.read(iprot);
              struct.setTime_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PV_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pv_number = iprot.readI32();
              struct.setPv_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLICK_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.click_number = iprot.readI32();
              struct.setClick_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdTimeRanageDynamic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.time_range != null) {
        if (struct.isSetTime_range()) {
          oprot.writeFieldBegin(TIME_RANGE_FIELD_DESC);
          struct.time_range.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPv_number()) {
        oprot.writeFieldBegin(PV_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.pv_number);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClick_number()) {
        oprot.writeFieldBegin(CLICK_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.click_number);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdTimeRanageDynamicTupleSchemeFactory implements SchemeFactory {
    public AdTimeRanageDynamicTupleScheme getScheme() {
      return new AdTimeRanageDynamicTupleScheme();
    }
  }

  private static class AdTimeRanageDynamicTupleScheme extends TupleScheme<AdTimeRanageDynamic> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdTimeRanageDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTime_range()) {
        optionals.set(0);
      }
      if (struct.isSetPv_number()) {
        optionals.set(1);
      }
      if (struct.isSetClick_number()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTime_range()) {
        struct.time_range.write(oprot);
      }
      if (struct.isSetPv_number()) {
        oprot.writeI32(struct.pv_number);
      }
      if (struct.isSetClick_number()) {
        oprot.writeI32(struct.click_number);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdTimeRanageDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.time_range = new LimitTimeRangeSec();
        struct.time_range.read(iprot);
        struct.setTime_rangeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pv_number = iprot.readI32();
        struct.setPv_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.click_number = iprot.readI32();
        struct.setClick_numberIsSet(true);
      }
    }
  }

}

