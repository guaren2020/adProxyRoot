/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class ReturnResult implements org.apache.thrift.TBase<ReturnResult, ReturnResult._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnResult");

  private static final org.apache.thrift.protocol.TField IDC_FIELD_DESC = new org.apache.thrift.protocol.TField("idc", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("fun", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReturnResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReturnResultTupleSchemeFactory());
  }

  public String idc; // required
  public String server; // required
  public String fun; // required
  public String param; // optional
  public List<String> result; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDC((short)1, "idc"),
    SERVER((short)2, "server"),
    FUN((short)3, "fun"),
    PARAM((short)4, "param"),
    RESULT((short)5, "result");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDC
          return IDC;
        case 2: // SERVER
          return SERVER;
        case 3: // FUN
          return FUN;
        case 4: // PARAM
          return PARAM;
        case 5: // RESULT
          return RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDC, new org.apache.thrift.meta_data.FieldMetaData("idc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUN, new org.apache.thrift.meta_data.FieldMetaData("fun", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnResult.class, metaDataMap);
  }

  public ReturnResult() {
  }

  public ReturnResult(
    String idc,
    String server,
    String fun,
    List<String> result)
  {
    this();
    this.idc = idc;
    this.server = server;
    this.fun = fun;
    this.result = result;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReturnResult(ReturnResult other) {
    if (other.isSetIdc()) {
      this.idc = other.idc;
    }
    if (other.isSetServer()) {
      this.server = other.server;
    }
    if (other.isSetFun()) {
      this.fun = other.fun;
    }
    if (other.isSetParam()) {
      this.param = other.param;
    }
    if (other.isSetResult()) {
      List<String> __this__result = new ArrayList<String>(other.result);
      this.result = __this__result;
    }
  }

  public ReturnResult deepCopy() {
    return new ReturnResult(this);
  }

  
  public void clear() {
    this.idc = null;
    this.server = null;
    this.fun = null;
    this.param = null;
    this.result = null;
  }

  public String getIdc() {
    return this.idc;
  }

  public ReturnResult setIdc(String idc) {
    this.idc = idc;
    return this;
  }

  public void unsetIdc() {
    this.idc = null;
  }

  /** Returns true if field idc is set (has been assigned a value) and false otherwise */
  public boolean isSetIdc() {
    return this.idc != null;
  }

  public void setIdcIsSet(boolean value) {
    if (!value) {
      this.idc = null;
    }
  }

  public String getServer() {
    return this.server;
  }

  public ReturnResult setServer(String server) {
    this.server = server;
    return this;
  }

  public void unsetServer() {
    this.server = null;
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return this.server != null;
  }

  public void setServerIsSet(boolean value) {
    if (!value) {
      this.server = null;
    }
  }

  public String getFun() {
    return this.fun;
  }

  public ReturnResult setFun(String fun) {
    this.fun = fun;
    return this;
  }

  public void unsetFun() {
    this.fun = null;
  }

  /** Returns true if field fun is set (has been assigned a value) and false otherwise */
  public boolean isSetFun() {
    return this.fun != null;
  }

  public void setFunIsSet(boolean value) {
    if (!value) {
      this.fun = null;
    }
  }

  public String getParam() {
    return this.param;
  }

  public ReturnResult setParam(String param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  /** Returns true if field param is set (has been assigned a value) and false otherwise */
  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  public int getResultSize() {
    return (this.result == null) ? 0 : this.result.size();
  }

  public java.util.Iterator<String> getResultIterator() {
    return (this.result == null) ? null : this.result.iterator();
  }

  public void addToResult(String elem) {
    if (this.result == null) {
      this.result = new ArrayList<String>();
    }
    this.result.add(elem);
  }

  public List<String> getResult() {
    return this.result;
  }

  public ReturnResult setResult(List<String> result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDC:
      if (value == null) {
        unsetIdc();
      } else {
        setIdc((String)value);
      }
      break;

    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((String)value);
      }
      break;

    case FUN:
      if (value == null) {
        unsetFun();
      } else {
        setFun((String)value);
      }
      break;

    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDC:
      return getIdc();

    case SERVER:
      return getServer();

    case FUN:
      return getFun();

    case PARAM:
      return getParam();

    case RESULT:
      return getResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDC:
      return isSetIdc();
    case SERVER:
      return isSetServer();
    case FUN:
      return isSetFun();
    case PARAM:
      return isSetParam();
    case RESULT:
      return isSetResult();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReturnResult)
      return this.equals((ReturnResult)that);
    return false;
  }

  public boolean equals(ReturnResult that) {
    if (that == null)
      return false;

    boolean this_present_idc = true && this.isSetIdc();
    boolean that_present_idc = true && that.isSetIdc();
    if (this_present_idc || that_present_idc) {
      if (!(this_present_idc && that_present_idc))
        return false;
      if (!this.idc.equals(that.idc))
        return false;
    }

    boolean this_present_server = true && this.isSetServer();
    boolean that_present_server = true && that.isSetServer();
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (!this.server.equals(that.server))
        return false;
    }

    boolean this_present_fun = true && this.isSetFun();
    boolean that_present_fun = true && that.isSetFun();
    if (this_present_fun || that_present_fun) {
      if (!(this_present_fun && that_present_fun))
        return false;
      if (!this.fun.equals(that.fun))
        return false;
    }

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_idc = true && (isSetIdc());
    list.add(present_idc);
    if (present_idc)
      list.add(idc);

    boolean present_server = true && (isSetServer());
    list.add(present_server);
    if (present_server)
      list.add(server);

    boolean present_fun = true && (isSetFun());
    list.add(present_fun);
    if (present_fun)
      list.add(fun);

    boolean present_param = true && (isSetParam());
    list.add(present_param);
    if (present_param)
      list.add(param);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    return list.hashCode();
  }

  
  public int compareTo(ReturnResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdc()).compareTo(other.isSetIdc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idc, other.idc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer()).compareTo(other.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, other.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFun()).compareTo(other.isSetFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fun, other.fun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ReturnResult(");
    boolean first = true;

    sb.append("idc:");
    if (this.idc == null) {
      sb.append("null");
    } else {
      sb.append(this.idc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("server:");
    if (this.server == null) {
      sb.append("null");
    } else {
      sb.append(this.server);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fun:");
    if (this.fun == null) {
      sb.append("null");
    } else {
      sb.append(this.fun);
    }
    first = false;
    if (isSetParam()) {
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (idc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'idc' was not present! Struct: " + toString());
    }
    if (server == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'server' was not present! Struct: " + toString());
    }
    if (fun == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fun' was not present! Struct: " + toString());
    }
    if (result == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReturnResultStandardSchemeFactory implements SchemeFactory {
    public ReturnResultStandardScheme getScheme() {
      return new ReturnResultStandardScheme();
    }
  }

  private static class ReturnResultStandardScheme extends StandardScheme<ReturnResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idc = iprot.readString();
              struct.setIdcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server = iprot.readString();
              struct.setServerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fun = iprot.readString();
              struct.setFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param = iprot.readString();
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.result = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.result.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.idc != null) {
        oprot.writeFieldBegin(IDC_FIELD_DESC);
        oprot.writeString(struct.idc);
        oprot.writeFieldEnd();
      }
      if (struct.server != null) {
        oprot.writeFieldBegin(SERVER_FIELD_DESC);
        oprot.writeString(struct.server);
        oprot.writeFieldEnd();
      }
      if (struct.fun != null) {
        oprot.writeFieldBegin(FUN_FIELD_DESC);
        oprot.writeString(struct.fun);
        oprot.writeFieldEnd();
      }
      if (struct.param != null) {
        if (struct.isSetParam()) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          oprot.writeString(struct.param);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.result.size()));
          for (String _iter3 : struct.result)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReturnResultTupleSchemeFactory implements SchemeFactory {
    public ReturnResultTupleScheme getScheme() {
      return new ReturnResultTupleScheme();
    }
  }

  private static class ReturnResultTupleScheme extends TupleScheme<ReturnResult> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ReturnResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.idc);
      oprot.writeString(struct.server);
      oprot.writeString(struct.fun);
      {
        oprot.writeI32(struct.result.size());
        for (String _iter4 : struct.result)
        {
          oprot.writeString(_iter4);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetParam()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParam()) {
        oprot.writeString(struct.param);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ReturnResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.idc = iprot.readString();
      struct.setIdcIsSet(true);
      struct.server = iprot.readString();
      struct.setServerIsSet(true);
      struct.fun = iprot.readString();
      struct.setFunIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.result = new ArrayList<String>(_list5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.result.add(_elem6);
        }
      }
      struct.setResultIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.param = iprot.readString();
        struct.setParamIsSet(true);
      }
    }
  }

}

