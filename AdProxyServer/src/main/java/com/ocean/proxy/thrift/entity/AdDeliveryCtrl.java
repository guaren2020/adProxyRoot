/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdDeliveryCtrl implements org.apache.thrift.TBase<AdDeliveryCtrl, AdDeliveryCtrl._Fields>, java.io.Serializable, Cloneable, Comparable<AdDeliveryCtrl> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdDeliveryCtrl");

  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("adName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DELIVERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("products", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdDeliveryCtrlStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdDeliveryCtrlTupleSchemeFactory());
  }

  public long adId; // required
  public String adName; // required
  /**
   * 
   * @see DeliveryType
   */
  public DeliveryType deliveryType; // optional
  public Map<Integer,DeliveryProduct> products; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_ID((short)1, "adId"),
    AD_NAME((short)2, "adName"),
    /**
     * 
     * @see DeliveryType
     */
    DELIVERY_TYPE((short)3, "deliveryType"),
    PRODUCTS((short)4, "products");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_ID
          return AD_ID;
        case 2: // AD_NAME
          return AD_NAME;
        case 3: // DELIVERY_TYPE
          return DELIVERY_TYPE;
        case 4: // PRODUCTS
          return PRODUCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DELIVERY_TYPE,_Fields.PRODUCTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AD_NAME, new org.apache.thrift.meta_data.FieldMetaData("adName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deliveryType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeliveryType.class)));
    tmpMap.put(_Fields.PRODUCTS, new org.apache.thrift.meta_data.FieldMetaData("products", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DeliveryProduct"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdDeliveryCtrl.class, metaDataMap);
  }

  public AdDeliveryCtrl() {
  }

  public AdDeliveryCtrl(
    long adId,
    String adName)
  {
    this();
    this.adId = adId;
    setAdIdIsSet(true);
    this.adName = adName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdDeliveryCtrl(AdDeliveryCtrl other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adId = other.adId;
    if (other.isSetAdName()) {
      this.adName = other.adName;
    }
    if (other.isSetDeliveryType()) {
      this.deliveryType = other.deliveryType;
    }
    if (other.isSetProducts()) {
      Map<Integer,DeliveryProduct> __this__products = new HashMap<Integer,DeliveryProduct>(other.products.size());
      for (Map.Entry<Integer, DeliveryProduct> other_element : other.products.entrySet()) {

        Integer other_element_key = other_element.getKey();
        DeliveryProduct other_element_value = other_element.getValue();

        Integer __this__products_copy_key = other_element_key;

        DeliveryProduct __this__products_copy_value = other_element_value;

        __this__products.put(__this__products_copy_key, __this__products_copy_value);
      }
      this.products = __this__products;
    }
  }

  public AdDeliveryCtrl deepCopy() {
    return new AdDeliveryCtrl(this);
  }

  public void clear() {
    setAdIdIsSet(false);
    this.adId = 0;
    this.adName = null;
    this.deliveryType = null;
    this.products = null;
  }

  public long getAdId() {
    return this.adId;
  }

  public AdDeliveryCtrl setAdId(long adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public String getAdName() {
    return this.adName;
  }

  public AdDeliveryCtrl setAdName(String adName) {
    this.adName = adName;
    return this;
  }

  public void unsetAdName() {
    this.adName = null;
  }

  /** Returns true if field adName is set (has been assigned a value) and false otherwise */
  public boolean isSetAdName() {
    return this.adName != null;
  }

  public void setAdNameIsSet(boolean value) {
    if (!value) {
      this.adName = null;
    }
  }

  /**
   * 
   * @see DeliveryType
   */
  public DeliveryType getDeliveryType() {
    return this.deliveryType;
  }

  /**
   * 
   * @see DeliveryType
   */
  public AdDeliveryCtrl setDeliveryType(DeliveryType deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

  public void unsetDeliveryType() {
    this.deliveryType = null;
  }

  /** Returns true if field deliveryType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryType() {
    return this.deliveryType != null;
  }

  public void setDeliveryTypeIsSet(boolean value) {
    if (!value) {
      this.deliveryType = null;
    }
  }

  public int getProductsSize() {
    return (this.products == null) ? 0 : this.products.size();
  }

  public void putToProducts(int key, DeliveryProduct val) {
    if (this.products == null) {
      this.products = new HashMap<Integer,DeliveryProduct>();
    }
    this.products.put(key, val);
  }

  public Map<Integer,DeliveryProduct> getProducts() {
    return this.products;
  }

  public AdDeliveryCtrl setProducts(Map<Integer,DeliveryProduct> products) {
    this.products = products;
    return this;
  }

  public void unsetProducts() {
    this.products = null;
  }

  /** Returns true if field products is set (has been assigned a value) and false otherwise */
  public boolean isSetProducts() {
    return this.products != null;
  }

  public void setProductsIsSet(boolean value) {
    if (!value) {
      this.products = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Long)value);
      }
      break;

    case AD_NAME:
      if (value == null) {
        unsetAdName();
      } else {
        setAdName((String)value);
      }
      break;

    case DELIVERY_TYPE:
      if (value == null) {
        unsetDeliveryType();
      } else {
        setDeliveryType((DeliveryType)value);
      }
      break;

    case PRODUCTS:
      if (value == null) {
        unsetProducts();
      } else {
        setProducts((Map<Integer,DeliveryProduct>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_ID:
      return Long.valueOf(getAdId());

    case AD_NAME:
      return getAdName();

    case DELIVERY_TYPE:
      return getDeliveryType();

    case PRODUCTS:
      return getProducts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_ID:
      return isSetAdId();
    case AD_NAME:
      return isSetAdName();
    case DELIVERY_TYPE:
      return isSetDeliveryType();
    case PRODUCTS:
      return isSetProducts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdDeliveryCtrl)
      return this.equals((AdDeliveryCtrl)that);
    return false;
  }

  public boolean equals(AdDeliveryCtrl that) {
    if (that == null)
      return false;

    boolean this_present_adId = true;
    boolean that_present_adId = true;
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_adName = true && this.isSetAdName();
    boolean that_present_adName = true && that.isSetAdName();
    if (this_present_adName || that_present_adName) {
      if (!(this_present_adName && that_present_adName))
        return false;
      if (!this.adName.equals(that.adName))
        return false;
    }

    boolean this_present_deliveryType = true && this.isSetDeliveryType();
    boolean that_present_deliveryType = true && that.isSetDeliveryType();
    if (this_present_deliveryType || that_present_deliveryType) {
      if (!(this_present_deliveryType && that_present_deliveryType))
        return false;
      if (!this.deliveryType.equals(that.deliveryType))
        return false;
    }

    boolean this_present_products = true && this.isSetProducts();
    boolean that_present_products = true && that.isSetProducts();
    if (this_present_products || that_present_products) {
      if (!(this_present_products && that_present_products))
        return false;
      if (!this.products.equals(that.products))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adId = true;
    list.add(present_adId);
    if (present_adId)
      list.add(adId);

    boolean present_adName = true && (isSetAdName());
    list.add(present_adName);
    if (present_adName)
      list.add(adName);

    boolean present_deliveryType = true && (isSetDeliveryType());
    list.add(present_deliveryType);
    if (present_deliveryType)
      list.add(deliveryType.getValue());

    boolean present_products = true && (isSetProducts());
    list.add(present_products);
    if (present_products)
      list.add(products);

    return list.hashCode();
  }

  public int compareTo(AdDeliveryCtrl other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdName()).compareTo(other.isSetAdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adName, other.adName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryType()).compareTo(other.isSetDeliveryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryType, other.deliveryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducts()).compareTo(other.isSetProducts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.products, other.products);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdDeliveryCtrl(");
    boolean first = true;

    sb.append("adId:");
    sb.append(this.adId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adName:");
    if (this.adName == null) {
      sb.append("null");
    } else {
      sb.append(this.adName);
    }
    first = false;
    if (isSetDeliveryType()) {
      if (!first) sb.append(", ");
      sb.append("deliveryType:");
      if (this.deliveryType == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryType);
      }
      first = false;
    }
    if (isSetProducts()) {
      if (!first) sb.append(", ");
      sb.append("products:");
      if (this.products == null) {
        sb.append("null");
      } else {
        sb.append(this.products);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adId' because it's a primitive and you chose the non-beans generator.
    if (adName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdDeliveryCtrlStandardSchemeFactory implements SchemeFactory {
    public AdDeliveryCtrlStandardScheme getScheme() {
      return new AdDeliveryCtrlStandardScheme();
    }
  }

  private static class AdDeliveryCtrlStandardScheme extends StandardScheme<AdDeliveryCtrl> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdDeliveryCtrl struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.adId = iprot.readI64();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adName = iprot.readString();
              struct.setAdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELIVERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryType = com.ocean.proxy.thrift.entity.DeliveryType.findByValue(iprot.readI32());
              struct.setDeliveryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map314 = iprot.readMapBegin();
                struct.products = new HashMap<Integer,DeliveryProduct>(2*_map314.size);
                int _key315;
                DeliveryProduct _val316;
                for (int _i317 = 0; _i317 < _map314.size; ++_i317)
                {
                  _key315 = iprot.readI32();
                  _val316 = new DeliveryProduct();
                  _val316.read(iprot);
                  struct.products.put(_key315, _val316);
                }
                iprot.readMapEnd();
              }
              struct.setProductsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdDeliveryCtrl struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI64(struct.adId);
      oprot.writeFieldEnd();
      if (struct.adName != null) {
        oprot.writeFieldBegin(AD_NAME_FIELD_DESC);
        oprot.writeString(struct.adName);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryType != null) {
        if (struct.isSetDeliveryType()) {
          oprot.writeFieldBegin(DELIVERY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.deliveryType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.products != null) {
        if (struct.isSetProducts()) {
          oprot.writeFieldBegin(PRODUCTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.products.size()));
            for (Map.Entry<Integer, DeliveryProduct> _iter318 : struct.products.entrySet())
            {
              oprot.writeI32(_iter318.getKey());
              _iter318.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdDeliveryCtrlTupleSchemeFactory implements SchemeFactory {
    public AdDeliveryCtrlTupleScheme getScheme() {
      return new AdDeliveryCtrlTupleScheme();
    }
  }

  private static class AdDeliveryCtrlTupleScheme extends TupleScheme<AdDeliveryCtrl> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdDeliveryCtrl struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.adId);
      oprot.writeString(struct.adName);
      BitSet optionals = new BitSet();
      if (struct.isSetDeliveryType()) {
        optionals.set(0);
      }
      if (struct.isSetProducts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDeliveryType()) {
        oprot.writeI32(struct.deliveryType.getValue());
      }
      if (struct.isSetProducts()) {
        {
          oprot.writeI32(struct.products.size());
          for (Map.Entry<Integer, DeliveryProduct> _iter319 : struct.products.entrySet())
          {
            oprot.writeI32(_iter319.getKey());
            _iter319.getValue().write(oprot);
          }
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdDeliveryCtrl struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adId = iprot.readI64();
      struct.setAdIdIsSet(true);
      struct.adName = iprot.readString();
      struct.setAdNameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.deliveryType = com.ocean.proxy.thrift.entity.DeliveryType.findByValue(iprot.readI32());
        struct.setDeliveryTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map320 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.products = new HashMap<Integer,DeliveryProduct>(2*_map320.size);
          int _key321;
          DeliveryProduct _val322;
          for (int _i323 = 0; _i323 < _map320.size; ++_i323)
          {
            _key321 = iprot.readI32();
            _val322 = new DeliveryProduct();
            _val322.read(iprot);
            struct.products.put(_key321, _val322);
          }
        }
        struct.setProductsIsSet(true);
      }
    }
  }

}

