/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdSpaceCtrl implements org.apache.thrift.TBase<AdSpaceCtrl, AdSpaceCtrl._Fields>, java.io.Serializable, Cloneable, Comparable<AdSpaceCtrl> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdSpaceCtrl");

  private static final org.apache.thrift.protocol.TField AD_SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adSpaceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BIDDING_FIELD_DESC = new org.apache.thrift.protocol.TField("bidding", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdSpaceCtrlStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdSpaceCtrlTupleSchemeFactory());
  }

  public int adSpaceId; // required
  public boolean bidding; // optional
  public double bid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_SPACE_ID((short)1, "adSpaceId"),
    BIDDING((short)2, "bidding"),
    BID((short)3, "bid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_SPACE_ID
          return AD_SPACE_ID;
        case 2: // BIDDING
          return BIDDING;
        case 3: // BID
          return BID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADSPACEID_ISSET_ID = 0;
  private static final int __BIDDING_ISSET_ID = 1;
  private static final int __BID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BIDDING,_Fields.BID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("adSpaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIDDING, new org.apache.thrift.meta_data.FieldMetaData("bidding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdSpaceCtrl.class, metaDataMap);
  }

  public AdSpaceCtrl() {
  }

  public AdSpaceCtrl(
    int adSpaceId)
  {
    this();
    this.adSpaceId = adSpaceId;
    setAdSpaceIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdSpaceCtrl(AdSpaceCtrl other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adSpaceId = other.adSpaceId;
    this.bidding = other.bidding;
    this.bid = other.bid;
  }

  public AdSpaceCtrl deepCopy() {
    return new AdSpaceCtrl(this);
  }

  public void clear() {
    setAdSpaceIdIsSet(false);
    this.adSpaceId = 0;
    setBiddingIsSet(false);
    this.bidding = false;
    setBidIsSet(false);
    this.bid = 0.0;
  }

  public int getAdSpaceId() {
    return this.adSpaceId;
  }

  public AdSpaceCtrl setAdSpaceId(int adSpaceId) {
    this.adSpaceId = adSpaceId;
    setAdSpaceIdIsSet(true);
    return this;
  }

  public void unsetAdSpaceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  /** Returns true if field adSpaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSpaceId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  public void setAdSpaceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSPACEID_ISSET_ID, value);
  }

  public boolean isBidding() {
    return this.bidding;
  }

  public AdSpaceCtrl setBidding(boolean bidding) {
    this.bidding = bidding;
    setBiddingIsSet(true);
    return this;
  }

  public void unsetBidding() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDDING_ISSET_ID);
  }

  /** Returns true if field bidding is set (has been assigned a value) and false otherwise */
  public boolean isSetBidding() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDDING_ISSET_ID);
  }

  public void setBiddingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDDING_ISSET_ID, value);
  }

  public double getBid() {
    return this.bid;
  }

  public AdSpaceCtrl setBid(double bid) {
    this.bid = bid;
    setBidIsSet(true);
    return this;
  }

  public void unsetBid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
  }

  public void setBidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_SPACE_ID:
      if (value == null) {
        unsetAdSpaceId();
      } else {
        setAdSpaceId((Integer)value);
      }
      break;

    case BIDDING:
      if (value == null) {
        unsetBidding();
      } else {
        setBidding((Boolean)value);
      }
      break;

    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_SPACE_ID:
      return Integer.valueOf(getAdSpaceId());

    case BIDDING:
      return Boolean.valueOf(isBidding());

    case BID:
      return Double.valueOf(getBid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_SPACE_ID:
      return isSetAdSpaceId();
    case BIDDING:
      return isSetBidding();
    case BID:
      return isSetBid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdSpaceCtrl)
      return this.equals((AdSpaceCtrl)that);
    return false;
  }

  public boolean equals(AdSpaceCtrl that) {
    if (that == null)
      return false;

    boolean this_present_adSpaceId = true;
    boolean that_present_adSpaceId = true;
    if (this_present_adSpaceId || that_present_adSpaceId) {
      if (!(this_present_adSpaceId && that_present_adSpaceId))
        return false;
      if (this.adSpaceId != that.adSpaceId)
        return false;
    }

    boolean this_present_bidding = true && this.isSetBidding();
    boolean that_present_bidding = true && that.isSetBidding();
    if (this_present_bidding || that_present_bidding) {
      if (!(this_present_bidding && that_present_bidding))
        return false;
      if (this.bidding != that.bidding)
        return false;
    }

    boolean this_present_bid = true && this.isSetBid();
    boolean that_present_bid = true && that.isSetBid();
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (this.bid != that.bid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adSpaceId = true;
    list.add(present_adSpaceId);
    if (present_adSpaceId)
      list.add(adSpaceId);

    boolean present_bidding = true && (isSetBidding());
    list.add(present_bidding);
    if (present_bidding)
      list.add(bidding);

    boolean present_bid = true && (isSetBid());
    list.add(present_bid);
    if (present_bid)
      list.add(bid);

    return list.hashCode();
  }

  public int compareTo(AdSpaceCtrl other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdSpaceId()).compareTo(other.isSetAdSpaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSpaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSpaceId, other.adSpaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidding()).compareTo(other.isSetBidding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidding, other.bidding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdSpaceCtrl(");
    boolean first = true;

    sb.append("adSpaceId:");
    sb.append(this.adSpaceId);
    first = false;
    if (isSetBidding()) {
      if (!first) sb.append(", ");
      sb.append("bidding:");
      sb.append(this.bidding);
      first = false;
    }
    if (isSetBid()) {
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adSpaceId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdSpaceCtrlStandardSchemeFactory implements SchemeFactory {
    public AdSpaceCtrlStandardScheme getScheme() {
      return new AdSpaceCtrlStandardScheme();
    }
  }

  private static class AdSpaceCtrlStandardScheme extends StandardScheme<AdSpaceCtrl> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdSpaceCtrl struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_SPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSpaceId = iprot.readI32();
              struct.setAdSpaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BIDDING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bidding = iprot.readBool();
              struct.setBiddingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bid = iprot.readDouble();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdSpaceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adSpaceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdSpaceCtrl struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_SPACE_ID_FIELD_DESC);
      oprot.writeI32(struct.adSpaceId);
      oprot.writeFieldEnd();
      if (struct.isSetBidding()) {
        oprot.writeFieldBegin(BIDDING_FIELD_DESC);
        oprot.writeBool(struct.bidding);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBid()) {
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeDouble(struct.bid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdSpaceCtrlTupleSchemeFactory implements SchemeFactory {
    public AdSpaceCtrlTupleScheme getScheme() {
      return new AdSpaceCtrlTupleScheme();
    }
  }

  private static class AdSpaceCtrlTupleScheme extends TupleScheme<AdSpaceCtrl> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdSpaceCtrl struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.adSpaceId);
      BitSet optionals = new BitSet();
      if (struct.isSetBidding()) {
        optionals.set(0);
      }
      if (struct.isSetBid()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBidding()) {
        oprot.writeBool(struct.bidding);
      }
      if (struct.isSetBid()) {
        oprot.writeDouble(struct.bid);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdSpaceCtrl struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adSpaceId = iprot.readI32();
      struct.setAdSpaceIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.bidding = iprot.readBool();
        struct.setBiddingIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bid = iprot.readDouble();
        struct.setBidIsSet(true);
      }
    }
  }

}

