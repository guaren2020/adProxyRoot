/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdUserDynamic implements org.apache.thrift.TBase<AdUserDynamic, AdUserDynamic._Fields>, java.io.Serializable, Cloneable, Comparable<AdUserDynamic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdUserDynamic");

  private static final org.apache.thrift.protocol.TField CLICK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("clickNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VIEW_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RANGE_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeView", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField RANGE_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeClick", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField ADID_FIELD_DESC = new org.apache.thrift.protocol.TField("adid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_RANGE_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRangeDynamic", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdUserDynamicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdUserDynamicTupleSchemeFactory());
  }

  public int clickNum; // required
  public int viewNum; // required
  public Map<Integer,Integer> rangeView; // optional
  public Map<Integer,Integer> rangeClick; // optional
  public int adid; // optional
  public List<AdTimeRanageDynamic> timeRangeDynamic; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLICK_NUM((short)1, "clickNum"),
    VIEW_NUM((short)2, "viewNum"),
    RANGE_VIEW((short)3, "rangeView"),
    RANGE_CLICK((short)4, "rangeClick"),
    ADID((short)5, "adid"),
    TIME_RANGE_DYNAMIC((short)6, "timeRangeDynamic");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLICK_NUM
          return CLICK_NUM;
        case 2: // VIEW_NUM
          return VIEW_NUM;
        case 3: // RANGE_VIEW
          return RANGE_VIEW;
        case 4: // RANGE_CLICK
          return RANGE_CLICK;
        case 5: // ADID
          return ADID;
        case 6: // TIME_RANGE_DYNAMIC
          return TIME_RANGE_DYNAMIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLICKNUM_ISSET_ID = 0;
  private static final int __VIEWNUM_ISSET_ID = 1;
  private static final int __ADID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RANGE_VIEW,_Fields.RANGE_CLICK,_Fields.ADID,_Fields.TIME_RANGE_DYNAMIC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLICK_NUM, new org.apache.thrift.meta_data.FieldMetaData("clickNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEW_NUM, new org.apache.thrift.meta_data.FieldMetaData("viewNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANGE_VIEW, new org.apache.thrift.meta_data.FieldMetaData("rangeView", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RANGE_CLICK, new org.apache.thrift.meta_data.FieldMetaData("rangeClick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ADID, new org.apache.thrift.meta_data.FieldMetaData("adid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_RANGE_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("timeRangeDynamic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdTimeRanageDynamic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdUserDynamic.class, metaDataMap);
  }

  public AdUserDynamic() {
    this.clickNum = 0;

    this.viewNum = 0;

  }

  public AdUserDynamic(
    int clickNum,
    int viewNum)
  {
    this();
    this.clickNum = clickNum;
    setClickNumIsSet(true);
    this.viewNum = viewNum;
    setViewNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdUserDynamic(AdUserDynamic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.clickNum = other.clickNum;
    this.viewNum = other.viewNum;
    if (other.isSetRangeView()) {
      Map<Integer,Integer> __this__rangeView = new HashMap<Integer,Integer>(other.rangeView);
      this.rangeView = __this__rangeView;
    }
    if (other.isSetRangeClick()) {
      Map<Integer,Integer> __this__rangeClick = new HashMap<Integer,Integer>(other.rangeClick);
      this.rangeClick = __this__rangeClick;
    }
    this.adid = other.adid;
    if (other.isSetTimeRangeDynamic()) {
      List<AdTimeRanageDynamic> __this__timeRangeDynamic = new ArrayList<AdTimeRanageDynamic>(other.timeRangeDynamic.size());
      for (AdTimeRanageDynamic other_element : other.timeRangeDynamic) {
        __this__timeRangeDynamic.add(new AdTimeRanageDynamic(other_element));
      }
      this.timeRangeDynamic = __this__timeRangeDynamic;
    }
  }

  public AdUserDynamic deepCopy() {
    return new AdUserDynamic(this);
  }

  public void clear() {
    this.clickNum = 0;

    this.viewNum = 0;

    this.rangeView = null;
    this.rangeClick = null;
    setAdidIsSet(false);
    this.adid = 0;
    this.timeRangeDynamic = null;
  }

  public int getClickNum() {
    return this.clickNum;
  }

  public AdUserDynamic setClickNum(int clickNum) {
    this.clickNum = clickNum;
    setClickNumIsSet(true);
    return this;
  }

  public void unsetClickNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLICKNUM_ISSET_ID);
  }

  /** Returns true if field clickNum is set (has been assigned a value) and false otherwise */
  public boolean isSetClickNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CLICKNUM_ISSET_ID);
  }

  public void setClickNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLICKNUM_ISSET_ID, value);
  }

  public int getViewNum() {
    return this.viewNum;
  }

  public AdUserDynamic setViewNum(int viewNum) {
    this.viewNum = viewNum;
    setViewNumIsSet(true);
    return this;
  }

  public void unsetViewNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWNUM_ISSET_ID);
  }

  /** Returns true if field viewNum is set (has been assigned a value) and false otherwise */
  public boolean isSetViewNum() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWNUM_ISSET_ID);
  }

  public void setViewNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWNUM_ISSET_ID, value);
  }

  public int getRangeViewSize() {
    return (this.rangeView == null) ? 0 : this.rangeView.size();
  }

  public void putToRangeView(int key, int val) {
    if (this.rangeView == null) {
      this.rangeView = new HashMap<Integer,Integer>();
    }
    this.rangeView.put(key, val);
  }

  public Map<Integer,Integer> getRangeView() {
    return this.rangeView;
  }

  public AdUserDynamic setRangeView(Map<Integer,Integer> rangeView) {
    this.rangeView = rangeView;
    return this;
  }

  public void unsetRangeView() {
    this.rangeView = null;
  }

  /** Returns true if field rangeView is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeView() {
    return this.rangeView != null;
  }

  public void setRangeViewIsSet(boolean value) {
    if (!value) {
      this.rangeView = null;
    }
  }

  public int getRangeClickSize() {
    return (this.rangeClick == null) ? 0 : this.rangeClick.size();
  }

  public void putToRangeClick(int key, int val) {
    if (this.rangeClick == null) {
      this.rangeClick = new HashMap<Integer,Integer>();
    }
    this.rangeClick.put(key, val);
  }

  public Map<Integer,Integer> getRangeClick() {
    return this.rangeClick;
  }

  public AdUserDynamic setRangeClick(Map<Integer,Integer> rangeClick) {
    this.rangeClick = rangeClick;
    return this;
  }

  public void unsetRangeClick() {
    this.rangeClick = null;
  }

  /** Returns true if field rangeClick is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeClick() {
    return this.rangeClick != null;
  }

  public void setRangeClickIsSet(boolean value) {
    if (!value) {
      this.rangeClick = null;
    }
  }

  public int getAdid() {
    return this.adid;
  }

  public AdUserDynamic setAdid(int adid) {
    this.adid = adid;
    setAdidIsSet(true);
    return this;
  }

  public void unsetAdid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdid() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public int getTimeRangeDynamicSize() {
    return (this.timeRangeDynamic == null) ? 0 : this.timeRangeDynamic.size();
  }

  public java.util.Iterator<AdTimeRanageDynamic> getTimeRangeDynamicIterator() {
    return (this.timeRangeDynamic == null) ? null : this.timeRangeDynamic.iterator();
  }

  public void addToTimeRangeDynamic(AdTimeRanageDynamic elem) {
    if (this.timeRangeDynamic == null) {
      this.timeRangeDynamic = new ArrayList<AdTimeRanageDynamic>();
    }
    this.timeRangeDynamic.add(elem);
  }

  public List<AdTimeRanageDynamic> getTimeRangeDynamic() {
    return this.timeRangeDynamic;
  }

  public AdUserDynamic setTimeRangeDynamic(List<AdTimeRanageDynamic> timeRangeDynamic) {
    this.timeRangeDynamic = timeRangeDynamic;
    return this;
  }

  public void unsetTimeRangeDynamic() {
    this.timeRangeDynamic = null;
  }

  /** Returns true if field timeRangeDynamic is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRangeDynamic() {
    return this.timeRangeDynamic != null;
  }

  public void setTimeRangeDynamicIsSet(boolean value) {
    if (!value) {
      this.timeRangeDynamic = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLICK_NUM:
      if (value == null) {
        unsetClickNum();
      } else {
        setClickNum((Integer)value);
      }
      break;

    case VIEW_NUM:
      if (value == null) {
        unsetViewNum();
      } else {
        setViewNum((Integer)value);
      }
      break;

    case RANGE_VIEW:
      if (value == null) {
        unsetRangeView();
      } else {
        setRangeView((Map<Integer,Integer>)value);
      }
      break;

    case RANGE_CLICK:
      if (value == null) {
        unsetRangeClick();
      } else {
        setRangeClick((Map<Integer,Integer>)value);
      }
      break;

    case ADID:
      if (value == null) {
        unsetAdid();
      } else {
        setAdid((Integer)value);
      }
      break;

    case TIME_RANGE_DYNAMIC:
      if (value == null) {
        unsetTimeRangeDynamic();
      } else {
        setTimeRangeDynamic((List<AdTimeRanageDynamic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLICK_NUM:
      return Integer.valueOf(getClickNum());

    case VIEW_NUM:
      return Integer.valueOf(getViewNum());

    case RANGE_VIEW:
      return getRangeView();

    case RANGE_CLICK:
      return getRangeClick();

    case ADID:
      return Integer.valueOf(getAdid());

    case TIME_RANGE_DYNAMIC:
      return getTimeRangeDynamic();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLICK_NUM:
      return isSetClickNum();
    case VIEW_NUM:
      return isSetViewNum();
    case RANGE_VIEW:
      return isSetRangeView();
    case RANGE_CLICK:
      return isSetRangeClick();
    case ADID:
      return isSetAdid();
    case TIME_RANGE_DYNAMIC:
      return isSetTimeRangeDynamic();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdUserDynamic)
      return this.equals((AdUserDynamic)that);
    return false;
  }

  public boolean equals(AdUserDynamic that) {
    if (that == null)
      return false;

    boolean this_present_clickNum = true;
    boolean that_present_clickNum = true;
    if (this_present_clickNum || that_present_clickNum) {
      if (!(this_present_clickNum && that_present_clickNum))
        return false;
      if (this.clickNum != that.clickNum)
        return false;
    }

    boolean this_present_viewNum = true;
    boolean that_present_viewNum = true;
    if (this_present_viewNum || that_present_viewNum) {
      if (!(this_present_viewNum && that_present_viewNum))
        return false;
      if (this.viewNum != that.viewNum)
        return false;
    }

    boolean this_present_rangeView = true && this.isSetRangeView();
    boolean that_present_rangeView = true && that.isSetRangeView();
    if (this_present_rangeView || that_present_rangeView) {
      if (!(this_present_rangeView && that_present_rangeView))
        return false;
      if (!this.rangeView.equals(that.rangeView))
        return false;
    }

    boolean this_present_rangeClick = true && this.isSetRangeClick();
    boolean that_present_rangeClick = true && that.isSetRangeClick();
    if (this_present_rangeClick || that_present_rangeClick) {
      if (!(this_present_rangeClick && that_present_rangeClick))
        return false;
      if (!this.rangeClick.equals(that.rangeClick))
        return false;
    }

    boolean this_present_adid = true && this.isSetAdid();
    boolean that_present_adid = true && that.isSetAdid();
    if (this_present_adid || that_present_adid) {
      if (!(this_present_adid && that_present_adid))
        return false;
      if (this.adid != that.adid)
        return false;
    }

    boolean this_present_timeRangeDynamic = true && this.isSetTimeRangeDynamic();
    boolean that_present_timeRangeDynamic = true && that.isSetTimeRangeDynamic();
    if (this_present_timeRangeDynamic || that_present_timeRangeDynamic) {
      if (!(this_present_timeRangeDynamic && that_present_timeRangeDynamic))
        return false;
      if (!this.timeRangeDynamic.equals(that.timeRangeDynamic))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clickNum = true;
    list.add(present_clickNum);
    if (present_clickNum)
      list.add(clickNum);

    boolean present_viewNum = true;
    list.add(present_viewNum);
    if (present_viewNum)
      list.add(viewNum);

    boolean present_rangeView = true && (isSetRangeView());
    list.add(present_rangeView);
    if (present_rangeView)
      list.add(rangeView);

    boolean present_rangeClick = true && (isSetRangeClick());
    list.add(present_rangeClick);
    if (present_rangeClick)
      list.add(rangeClick);

    boolean present_adid = true && (isSetAdid());
    list.add(present_adid);
    if (present_adid)
      list.add(adid);

    boolean present_timeRangeDynamic = true && (isSetTimeRangeDynamic());
    list.add(present_timeRangeDynamic);
    if (present_timeRangeDynamic)
      list.add(timeRangeDynamic);

    return list.hashCode();
  }

  public int compareTo(AdUserDynamic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClickNum()).compareTo(other.isSetClickNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickNum, other.clickNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewNum()).compareTo(other.isSetViewNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNum, other.viewNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRangeView()).compareTo(other.isSetRangeView());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeView()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeView, other.rangeView);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRangeClick()).compareTo(other.isSetRangeClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeClick, other.rangeClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdid()).compareTo(other.isSetAdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adid, other.adid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRangeDynamic()).compareTo(other.isSetTimeRangeDynamic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRangeDynamic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRangeDynamic, other.timeRangeDynamic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdUserDynamic(");
    boolean first = true;

    sb.append("clickNum:");
    sb.append(this.clickNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewNum:");
    sb.append(this.viewNum);
    first = false;
    if (isSetRangeView()) {
      if (!first) sb.append(", ");
      sb.append("rangeView:");
      if (this.rangeView == null) {
        sb.append("null");
      } else {
        sb.append(this.rangeView);
      }
      first = false;
    }
    if (isSetRangeClick()) {
      if (!first) sb.append(", ");
      sb.append("rangeClick:");
      if (this.rangeClick == null) {
        sb.append("null");
      } else {
        sb.append(this.rangeClick);
      }
      first = false;
    }
    if (isSetAdid()) {
      if (!first) sb.append(", ");
      sb.append("adid:");
      sb.append(this.adid);
      first = false;
    }
    if (isSetTimeRangeDynamic()) {
      if (!first) sb.append(", ");
      sb.append("timeRangeDynamic:");
      if (this.timeRangeDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRangeDynamic);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'clickNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'viewNum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdUserDynamicStandardSchemeFactory implements SchemeFactory {
    public AdUserDynamicStandardScheme getScheme() {
      return new AdUserDynamicStandardScheme();
    }
  }

  private static class AdUserDynamicStandardScheme extends StandardScheme<AdUserDynamic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdUserDynamic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLICK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clickNum = iprot.readI32();
              struct.setClickNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEW_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewNum = iprot.readI32();
              struct.setViewNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANGE_VIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.rangeView = new HashMap<Integer,Integer>(2*_map18.size);
                int _key19;
                int _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readI32();
                  _val20 = iprot.readI32();
                  struct.rangeView.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setRangeViewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANGE_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin();
                struct.rangeClick = new HashMap<Integer,Integer>(2*_map22.size);
                int _key23;
                int _val24;
                for (int _i25 = 0; _i25 < _map22.size; ++_i25)
                {
                  _key23 = iprot.readI32();
                  _val24 = iprot.readI32();
                  struct.rangeClick.put(_key23, _val24);
                }
                iprot.readMapEnd();
              }
              struct.setRangeClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adid = iprot.readI32();
              struct.setAdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME_RANGE_DYNAMIC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.timeRangeDynamic = new ArrayList<AdTimeRanageDynamic>(_list26.size);
                AdTimeRanageDynamic _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new AdTimeRanageDynamic();
                  _elem27.read(iprot);
                  struct.timeRangeDynamic.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setTimeRangeDynamicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClickNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetViewNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'viewNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdUserDynamic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLICK_NUM_FIELD_DESC);
      oprot.writeI32(struct.clickNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEW_NUM_FIELD_DESC);
      oprot.writeI32(struct.viewNum);
      oprot.writeFieldEnd();
      if (struct.rangeView != null) {
        if (struct.isSetRangeView()) {
          oprot.writeFieldBegin(RANGE_VIEW_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.rangeView.size()));
            for (Map.Entry<Integer, Integer> _iter29 : struct.rangeView.entrySet())
            {
              oprot.writeI32(_iter29.getKey());
              oprot.writeI32(_iter29.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rangeClick != null) {
        if (struct.isSetRangeClick()) {
          oprot.writeFieldBegin(RANGE_CLICK_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.rangeClick.size()));
            for (Map.Entry<Integer, Integer> _iter30 : struct.rangeClick.entrySet())
            {
              oprot.writeI32(_iter30.getKey());
              oprot.writeI32(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAdid()) {
        oprot.writeFieldBegin(ADID_FIELD_DESC);
        oprot.writeI32(struct.adid);
        oprot.writeFieldEnd();
      }
      if (struct.timeRangeDynamic != null) {
        if (struct.isSetTimeRangeDynamic()) {
          oprot.writeFieldBegin(TIME_RANGE_DYNAMIC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeRangeDynamic.size()));
            for (AdTimeRanageDynamic _iter31 : struct.timeRangeDynamic)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdUserDynamicTupleSchemeFactory implements SchemeFactory {
    public AdUserDynamicTupleScheme getScheme() {
      return new AdUserDynamicTupleScheme();
    }
  }

  private static class AdUserDynamicTupleScheme extends TupleScheme<AdUserDynamic> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdUserDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.clickNum);
      oprot.writeI32(struct.viewNum);
      BitSet optionals = new BitSet();
      if (struct.isSetRangeView()) {
        optionals.set(0);
      }
      if (struct.isSetRangeClick()) {
        optionals.set(1);
      }
      if (struct.isSetAdid()) {
        optionals.set(2);
      }
      if (struct.isSetTimeRangeDynamic()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRangeView()) {
        {
          oprot.writeI32(struct.rangeView.size());
          for (Map.Entry<Integer, Integer> _iter32 : struct.rangeView.entrySet())
          {
            oprot.writeI32(_iter32.getKey());
            oprot.writeI32(_iter32.getValue());
          }
        }
      }
      if (struct.isSetRangeClick()) {
        {
          oprot.writeI32(struct.rangeClick.size());
          for (Map.Entry<Integer, Integer> _iter33 : struct.rangeClick.entrySet())
          {
            oprot.writeI32(_iter33.getKey());
            oprot.writeI32(_iter33.getValue());
          }
        }
      }
      if (struct.isSetAdid()) {
        oprot.writeI32(struct.adid);
      }
      if (struct.isSetTimeRangeDynamic()) {
        {
          oprot.writeI32(struct.timeRangeDynamic.size());
          for (AdTimeRanageDynamic _iter34 : struct.timeRangeDynamic)
          {
            _iter34.write(oprot);
          }
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdUserDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clickNum = iprot.readI32();
      struct.setClickNumIsSet(true);
      struct.viewNum = iprot.readI32();
      struct.setViewNumIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map35 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.rangeView = new HashMap<Integer,Integer>(2*_map35.size);
          int _key36;
          int _val37;
          for (int _i38 = 0; _i38 < _map35.size; ++_i38)
          {
            _key36 = iprot.readI32();
            _val37 = iprot.readI32();
            struct.rangeView.put(_key36, _val37);
          }
        }
        struct.setRangeViewIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map39 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.rangeClick = new HashMap<Integer,Integer>(2*_map39.size);
          int _key40;
          int _val41;
          for (int _i42 = 0; _i42 < _map39.size; ++_i42)
          {
            _key40 = iprot.readI32();
            _val41 = iprot.readI32();
            struct.rangeClick.put(_key40, _val41);
          }
        }
        struct.setRangeClickIsSet(true);
      }
      if (incoming.get(2)) {
        struct.adid = iprot.readI32();
        struct.setAdidIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeRangeDynamic = new ArrayList<AdTimeRanageDynamic>(_list43.size);
          AdTimeRanageDynamic _elem44;
          for (int _i45 = 0; _i45 < _list43.size; ++_i45)
          {
            _elem44 = new AdTimeRanageDynamic();
            _elem44.read(iprot);
            struct.timeRangeDynamic.add(_elem44);
          }
        }
        struct.setTimeRangeDynamicIsSet(true);
      }
    }
  }

}

