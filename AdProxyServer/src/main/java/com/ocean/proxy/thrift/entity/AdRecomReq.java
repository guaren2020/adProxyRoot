/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdRecomReq implements org.apache.thrift.TBase<AdRecomReq, AdRecomReq._Fields>, java.io.Serializable, Cloneable, Comparable<AdRecomReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdRecomReq");

  private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("result_num", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ogin_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USERINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userinfo", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField NET_FIELD_DESC = new org.apache.thrift.protocol.TField("net", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RVER_FIELD_DESC = new org.apache.thrift.protocol.TField("rver", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CHECK_VER_FIELD_DESC = new org.apache.thrift.protocol.TField("check_ver", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField USER_AD_SPACE_ATTRI_FIELD_DESC = new org.apache.thrift.protocol.TField("userAdSpaceAttri", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdRecomReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdRecomReqTupleSchemeFactory());
  }

  public String app; // required
  public String type; // required
  public String version; // required
  public int result_num; // required
  public String ogin_name; // required
  public boolean log; // optional
  public String token; // optional
  public String channel; // optional
  public AdUserInfo userinfo; // optional
  public String net; // optional
  public String hash; // optional
  public int rver; // optional
  public boolean check_ver; // optional
  public UserAdSpaceAttri userAdSpaceAttri; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP((short)1, "app"),
    TYPE((short)2, "type"),
    VERSION((short)3, "version"),
    RESULT_NUM((short)4, "result_num"),
    OGIN_NAME((short)5, "ogin_name"),
    LOG((short)6, "log"),
    TOKEN((short)7, "token"),
    CHANNEL((short)8, "channel"),
    USERINFO((short)9, "userinfo"),
    NET((short)10, "net"),
    HASH((short)11, "hash"),
    RVER((short)12, "rver"),
    CHECK_VER((short)13, "check_ver"),
    USER_AD_SPACE_ATTRI((short)14, "userAdSpaceAttri");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP
          return APP;
        case 2: // TYPE
          return TYPE;
        case 3: // VERSION
          return VERSION;
        case 4: // RESULT_NUM
          return RESULT_NUM;
        case 5: // OGIN_NAME
          return OGIN_NAME;
        case 6: // LOG
          return LOG;
        case 7: // TOKEN
          return TOKEN;
        case 8: // CHANNEL
          return CHANNEL;
        case 9: // USERINFO
          return USERINFO;
        case 10: // NET
          return NET;
        case 11: // HASH
          return HASH;
        case 12: // RVER
          return RVER;
        case 13: // CHECK_VER
          return CHECK_VER;
        case 14: // USER_AD_SPACE_ATTRI
          return USER_AD_SPACE_ATTRI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULT_NUM_ISSET_ID = 0;
  private static final int __LOG_ISSET_ID = 1;
  private static final int __RVER_ISSET_ID = 2;
  private static final int __CHECK_VER_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOG,_Fields.TOKEN,_Fields.CHANNEL,_Fields.USERINFO,_Fields.NET,_Fields.HASH,_Fields.RVER,_Fields.CHECK_VER,_Fields.USER_AD_SPACE_ATTRI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_NUM, new org.apache.thrift.meta_data.FieldMetaData("result_num", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("ogin_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERINFO, new org.apache.thrift.meta_data.FieldMetaData("userinfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdUserInfo.class)));
    tmpMap.put(_Fields.NET, new org.apache.thrift.meta_data.FieldMetaData("net", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RVER, new org.apache.thrift.meta_data.FieldMetaData("rver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_VER, new org.apache.thrift.meta_data.FieldMetaData("check_ver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USER_AD_SPACE_ATTRI, new org.apache.thrift.meta_data.FieldMetaData("userAdSpaceAttri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserAdSpaceAttri.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdRecomReq.class, metaDataMap);
  }

  public AdRecomReq() {
    this.log = true;

    this.rver = 0;

    this.check_ver = true;

  }

  public AdRecomReq(
    String app,
    String type,
    String version,
    int result_num,
    String ogin_name)
  {
    this();
    this.app = app;
    this.type = type;
    this.version = version;
    this.result_num = result_num;
    setResult_numIsSet(true);
    this.ogin_name = ogin_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdRecomReq(AdRecomReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApp()) {
      this.app = other.app;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.result_num = other.result_num;
    if (other.isSetOgin_name()) {
      this.ogin_name = other.ogin_name;
    }
    this.log = other.log;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    if (other.isSetUserinfo()) {
      this.userinfo = new AdUserInfo(other.userinfo);
    }
    if (other.isSetNet()) {
      this.net = other.net;
    }
    if (other.isSetHash()) {
      this.hash = other.hash;
    }
    this.rver = other.rver;
    this.check_ver = other.check_ver;
    if (other.isSetUserAdSpaceAttri()) {
      this.userAdSpaceAttri = new UserAdSpaceAttri(other.userAdSpaceAttri);
    }
  }

  public AdRecomReq deepCopy() {
    return new AdRecomReq(this);
  }

  public void clear() {
    this.app = null;
    this.type = null;
    this.version = null;
    setResult_numIsSet(false);
    this.result_num = 0;
    this.ogin_name = null;
    this.log = true;

    this.token = null;
    this.channel = null;
    this.userinfo = null;
    this.net = null;
    this.hash = null;
    this.rver = 0;

    this.check_ver = true;

    this.userAdSpaceAttri = null;
  }

  public String getApp() {
    return this.app;
  }

  public AdRecomReq setApp(String app) {
    this.app = app;
    return this;
  }

  public void unsetApp() {
    this.app = null;
  }

  /** Returns true if field app is set (has been assigned a value) and false otherwise */
  public boolean isSetApp() {
    return this.app != null;
  }

  public void setAppIsSet(boolean value) {
    if (!value) {
      this.app = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public AdRecomReq setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public AdRecomReq setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getResult_num() {
    return this.result_num;
  }

  public AdRecomReq setResult_num(int result_num) {
    this.result_num = result_num;
    setResult_numIsSet(true);
    return this;
  }

  public void unsetResult_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_NUM_ISSET_ID);
  }

  /** Returns true if field result_num is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_num() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_NUM_ISSET_ID);
  }

  public void setResult_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_NUM_ISSET_ID, value);
  }

  public String getOgin_name() {
    return this.ogin_name;
  }

  public AdRecomReq setOgin_name(String ogin_name) {
    this.ogin_name = ogin_name;
    return this;
  }

  public void unsetOgin_name() {
    this.ogin_name = null;
  }

  /** Returns true if field ogin_name is set (has been assigned a value) and false otherwise */
  public boolean isSetOgin_name() {
    return this.ogin_name != null;
  }

  public void setOgin_nameIsSet(boolean value) {
    if (!value) {
      this.ogin_name = null;
    }
  }

  public boolean isLog() {
    return this.log;
  }

  public AdRecomReq setLog(boolean log) {
    this.log = log;
    setLogIsSet(true);
    return this;
  }

  public void unsetLog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOG_ISSET_ID);
  }

  /** Returns true if field log is set (has been assigned a value) and false otherwise */
  public boolean isSetLog() {
    return EncodingUtils.testBit(__isset_bitfield, __LOG_ISSET_ID);
  }

  public void setLogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOG_ISSET_ID, value);
  }

  public String getToken() {
    return this.token;
  }

  public AdRecomReq setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getChannel() {
    return this.channel;
  }

  public AdRecomReq setChannel(String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public AdUserInfo getUserinfo() {
    return this.userinfo;
  }

  public AdRecomReq setUserinfo(AdUserInfo userinfo) {
    this.userinfo = userinfo;
    return this;
  }

  public void unsetUserinfo() {
    this.userinfo = null;
  }

  /** Returns true if field userinfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserinfo() {
    return this.userinfo != null;
  }

  public void setUserinfoIsSet(boolean value) {
    if (!value) {
      this.userinfo = null;
    }
  }

  public String getNet() {
    return this.net;
  }

  public AdRecomReq setNet(String net) {
    this.net = net;
    return this;
  }

  public void unsetNet() {
    this.net = null;
  }

  /** Returns true if field net is set (has been assigned a value) and false otherwise */
  public boolean isSetNet() {
    return this.net != null;
  }

  public void setNetIsSet(boolean value) {
    if (!value) {
      this.net = null;
    }
  }

  public String getHash() {
    return this.hash;
  }

  public AdRecomReq setHash(String hash) {
    this.hash = hash;
    return this;
  }

  public void unsetHash() {
    this.hash = null;
  }

  /** Returns true if field hash is set (has been assigned a value) and false otherwise */
  public boolean isSetHash() {
    return this.hash != null;
  }

  public void setHashIsSet(boolean value) {
    if (!value) {
      this.hash = null;
    }
  }

  public int getRver() {
    return this.rver;
  }

  public AdRecomReq setRver(int rver) {
    this.rver = rver;
    setRverIsSet(true);
    return this;
  }

  public void unsetRver() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RVER_ISSET_ID);
  }

  /** Returns true if field rver is set (has been assigned a value) and false otherwise */
  public boolean isSetRver() {
    return EncodingUtils.testBit(__isset_bitfield, __RVER_ISSET_ID);
  }

  public void setRverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RVER_ISSET_ID, value);
  }

  public boolean isCheck_ver() {
    return this.check_ver;
  }

  public AdRecomReq setCheck_ver(boolean check_ver) {
    this.check_ver = check_ver;
    setCheck_verIsSet(true);
    return this;
  }

  public void unsetCheck_ver() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECK_VER_ISSET_ID);
  }

  /** Returns true if field check_ver is set (has been assigned a value) and false otherwise */
  public boolean isSetCheck_ver() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECK_VER_ISSET_ID);
  }

  public void setCheck_verIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECK_VER_ISSET_ID, value);
  }

  public UserAdSpaceAttri getUserAdSpaceAttri() {
    return this.userAdSpaceAttri;
  }

  public AdRecomReq setUserAdSpaceAttri(UserAdSpaceAttri userAdSpaceAttri) {
    this.userAdSpaceAttri = userAdSpaceAttri;
    return this;
  }

  public void unsetUserAdSpaceAttri() {
    this.userAdSpaceAttri = null;
  }

  /** Returns true if field userAdSpaceAttri is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAdSpaceAttri() {
    return this.userAdSpaceAttri != null;
  }

  public void setUserAdSpaceAttriIsSet(boolean value) {
    if (!value) {
      this.userAdSpaceAttri = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP:
      if (value == null) {
        unsetApp();
      } else {
        setApp((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case RESULT_NUM:
      if (value == null) {
        unsetResult_num();
      } else {
        setResult_num((Integer)value);
      }
      break;

    case OGIN_NAME:
      if (value == null) {
        unsetOgin_name();
      } else {
        setOgin_name((String)value);
      }
      break;

    case LOG:
      if (value == null) {
        unsetLog();
      } else {
        setLog((Boolean)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((String)value);
      }
      break;

    case USERINFO:
      if (value == null) {
        unsetUserinfo();
      } else {
        setUserinfo((AdUserInfo)value);
      }
      break;

    case NET:
      if (value == null) {
        unsetNet();
      } else {
        setNet((String)value);
      }
      break;

    case HASH:
      if (value == null) {
        unsetHash();
      } else {
        setHash((String)value);
      }
      break;

    case RVER:
      if (value == null) {
        unsetRver();
      } else {
        setRver((Integer)value);
      }
      break;

    case CHECK_VER:
      if (value == null) {
        unsetCheck_ver();
      } else {
        setCheck_ver((Boolean)value);
      }
      break;

    case USER_AD_SPACE_ATTRI:
      if (value == null) {
        unsetUserAdSpaceAttri();
      } else {
        setUserAdSpaceAttri((UserAdSpaceAttri)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP:
      return getApp();

    case TYPE:
      return getType();

    case VERSION:
      return getVersion();

    case RESULT_NUM:
      return Integer.valueOf(getResult_num());

    case OGIN_NAME:
      return getOgin_name();

    case LOG:
      return Boolean.valueOf(isLog());

    case TOKEN:
      return getToken();

    case CHANNEL:
      return getChannel();

    case USERINFO:
      return getUserinfo();

    case NET:
      return getNet();

    case HASH:
      return getHash();

    case RVER:
      return Integer.valueOf(getRver());

    case CHECK_VER:
      return Boolean.valueOf(isCheck_ver());

    case USER_AD_SPACE_ATTRI:
      return getUserAdSpaceAttri();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP:
      return isSetApp();
    case TYPE:
      return isSetType();
    case VERSION:
      return isSetVersion();
    case RESULT_NUM:
      return isSetResult_num();
    case OGIN_NAME:
      return isSetOgin_name();
    case LOG:
      return isSetLog();
    case TOKEN:
      return isSetToken();
    case CHANNEL:
      return isSetChannel();
    case USERINFO:
      return isSetUserinfo();
    case NET:
      return isSetNet();
    case HASH:
      return isSetHash();
    case RVER:
      return isSetRver();
    case CHECK_VER:
      return isSetCheck_ver();
    case USER_AD_SPACE_ATTRI:
      return isSetUserAdSpaceAttri();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdRecomReq)
      return this.equals((AdRecomReq)that);
    return false;
  }

  public boolean equals(AdRecomReq that) {
    if (that == null)
      return false;

    boolean this_present_app = true && this.isSetApp();
    boolean that_present_app = true && that.isSetApp();
    if (this_present_app || that_present_app) {
      if (!(this_present_app && that_present_app))
        return false;
      if (!this.app.equals(that.app))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_result_num = true;
    boolean that_present_result_num = true;
    if (this_present_result_num || that_present_result_num) {
      if (!(this_present_result_num && that_present_result_num))
        return false;
      if (this.result_num != that.result_num)
        return false;
    }

    boolean this_present_ogin_name = true && this.isSetOgin_name();
    boolean that_present_ogin_name = true && that.isSetOgin_name();
    if (this_present_ogin_name || that_present_ogin_name) {
      if (!(this_present_ogin_name && that_present_ogin_name))
        return false;
      if (!this.ogin_name.equals(that.ogin_name))
        return false;
    }

    boolean this_present_log = true && this.isSetLog();
    boolean that_present_log = true && that.isSetLog();
    if (this_present_log || that_present_log) {
      if (!(this_present_log && that_present_log))
        return false;
      if (this.log != that.log)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_userinfo = true && this.isSetUserinfo();
    boolean that_present_userinfo = true && that.isSetUserinfo();
    if (this_present_userinfo || that_present_userinfo) {
      if (!(this_present_userinfo && that_present_userinfo))
        return false;
      if (!this.userinfo.equals(that.userinfo))
        return false;
    }

    boolean this_present_net = true && this.isSetNet();
    boolean that_present_net = true && that.isSetNet();
    if (this_present_net || that_present_net) {
      if (!(this_present_net && that_present_net))
        return false;
      if (!this.net.equals(that.net))
        return false;
    }

    boolean this_present_hash = true && this.isSetHash();
    boolean that_present_hash = true && that.isSetHash();
    if (this_present_hash || that_present_hash) {
      if (!(this_present_hash && that_present_hash))
        return false;
      if (!this.hash.equals(that.hash))
        return false;
    }

    boolean this_present_rver = true && this.isSetRver();
    boolean that_present_rver = true && that.isSetRver();
    if (this_present_rver || that_present_rver) {
      if (!(this_present_rver && that_present_rver))
        return false;
      if (this.rver != that.rver)
        return false;
    }

    boolean this_present_check_ver = true && this.isSetCheck_ver();
    boolean that_present_check_ver = true && that.isSetCheck_ver();
    if (this_present_check_ver || that_present_check_ver) {
      if (!(this_present_check_ver && that_present_check_ver))
        return false;
      if (this.check_ver != that.check_ver)
        return false;
    }

    boolean this_present_userAdSpaceAttri = true && this.isSetUserAdSpaceAttri();
    boolean that_present_userAdSpaceAttri = true && that.isSetUserAdSpaceAttri();
    if (this_present_userAdSpaceAttri || that_present_userAdSpaceAttri) {
      if (!(this_present_userAdSpaceAttri && that_present_userAdSpaceAttri))
        return false;
      if (!this.userAdSpaceAttri.equals(that.userAdSpaceAttri))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_app = true && (isSetApp());
    list.add(present_app);
    if (present_app)
      list.add(app);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_result_num = true;
    list.add(present_result_num);
    if (present_result_num)
      list.add(result_num);

    boolean present_ogin_name = true && (isSetOgin_name());
    list.add(present_ogin_name);
    if (present_ogin_name)
      list.add(ogin_name);

    boolean present_log = true && (isSetLog());
    list.add(present_log);
    if (present_log)
      list.add(log);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_channel = true && (isSetChannel());
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_userinfo = true && (isSetUserinfo());
    list.add(present_userinfo);
    if (present_userinfo)
      list.add(userinfo);

    boolean present_net = true && (isSetNet());
    list.add(present_net);
    if (present_net)
      list.add(net);

    boolean present_hash = true && (isSetHash());
    list.add(present_hash);
    if (present_hash)
      list.add(hash);

    boolean present_rver = true && (isSetRver());
    list.add(present_rver);
    if (present_rver)
      list.add(rver);

    boolean present_check_ver = true && (isSetCheck_ver());
    list.add(present_check_ver);
    if (present_check_ver)
      list.add(check_ver);

    boolean present_userAdSpaceAttri = true && (isSetUserAdSpaceAttri());
    list.add(present_userAdSpaceAttri);
    if (present_userAdSpaceAttri)
      list.add(userAdSpaceAttri);

    return list.hashCode();
  }

  public int compareTo(AdRecomReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_num()).compareTo(other.isSetResult_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_num, other.result_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOgin_name()).compareTo(other.isSetOgin_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOgin_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ogin_name, other.ogin_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserinfo()).compareTo(other.isSetUserinfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserinfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userinfo, other.userinfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNet()).compareTo(other.isSetNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net, other.net);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRver()).compareTo(other.isSetRver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rver, other.rver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheck_ver()).compareTo(other.isSetCheck_ver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheck_ver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_ver, other.check_ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAdSpaceAttri()).compareTo(other.isSetUserAdSpaceAttri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAdSpaceAttri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAdSpaceAttri, other.userAdSpaceAttri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdRecomReq(");
    boolean first = true;

    sb.append("app:");
    if (this.app == null) {
      sb.append("null");
    } else {
      sb.append(this.app);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result_num:");
    sb.append(this.result_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ogin_name:");
    if (this.ogin_name == null) {
      sb.append("null");
    } else {
      sb.append(this.ogin_name);
    }
    first = false;
    if (isSetLog()) {
      if (!first) sb.append(", ");
      sb.append("log:");
      sb.append(this.log);
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
    }
    if (isSetUserinfo()) {
      if (!first) sb.append(", ");
      sb.append("userinfo:");
      if (this.userinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userinfo);
      }
      first = false;
    }
    if (isSetNet()) {
      if (!first) sb.append(", ");
      sb.append("net:");
      if (this.net == null) {
        sb.append("null");
      } else {
        sb.append(this.net);
      }
      first = false;
    }
    if (isSetHash()) {
      if (!first) sb.append(", ");
      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
    }
    if (isSetRver()) {
      if (!first) sb.append(", ");
      sb.append("rver:");
      sb.append(this.rver);
      first = false;
    }
    if (isSetCheck_ver()) {
      if (!first) sb.append(", ");
      sb.append("check_ver:");
      sb.append(this.check_ver);
      first = false;
    }
    if (isSetUserAdSpaceAttri()) {
      if (!first) sb.append(", ");
      sb.append("userAdSpaceAttri:");
      if (this.userAdSpaceAttri == null) {
        sb.append("null");
      } else {
        sb.append(this.userAdSpaceAttri);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (app == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'app' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'result_num' because it's a primitive and you chose the non-beans generator.
    if (ogin_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ogin_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (userinfo != null) {
      userinfo.validate();
    }
    if (userAdSpaceAttri != null) {
      userAdSpaceAttri.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdRecomReqStandardSchemeFactory implements SchemeFactory {
    public AdRecomReqStandardScheme getScheme() {
      return new AdRecomReqStandardScheme();
    }
  }

  private static class AdRecomReqStandardScheme extends StandardScheme<AdRecomReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdRecomReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app = iprot.readString();
              struct.setAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result_num = iprot.readI32();
              struct.setResult_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ogin_name = iprot.readString();
              struct.setOgin_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.log = iprot.readBool();
              struct.setLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USERINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userinfo = new AdUserInfo();
              struct.userinfo.read(iprot);
              struct.setUserinfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.net = iprot.readString();
              struct.setNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hash = iprot.readString();
              struct.setHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rver = iprot.readI32();
              struct.setRverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHECK_VER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.check_ver = iprot.readBool();
              struct.setCheck_verIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_AD_SPACE_ATTRI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userAdSpaceAttri = new UserAdSpaceAttri();
              struct.userAdSpaceAttri.read(iprot);
              struct.setUserAdSpaceAttriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetResult_num()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'result_num' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdRecomReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.app != null) {
        oprot.writeFieldBegin(APP_FIELD_DESC);
        oprot.writeString(struct.app);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_NUM_FIELD_DESC);
      oprot.writeI32(struct.result_num);
      oprot.writeFieldEnd();
      if (struct.ogin_name != null) {
        oprot.writeFieldBegin(OGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.ogin_name);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog()) {
        oprot.writeFieldBegin(LOG_FIELD_DESC);
        oprot.writeBool(struct.log);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.channel != null) {
        if (struct.isSetChannel()) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          oprot.writeString(struct.channel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userinfo != null) {
        if (struct.isSetUserinfo()) {
          oprot.writeFieldBegin(USERINFO_FIELD_DESC);
          struct.userinfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.net != null) {
        if (struct.isSetNet()) {
          oprot.writeFieldBegin(NET_FIELD_DESC);
          oprot.writeString(struct.net);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hash != null) {
        if (struct.isSetHash()) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          oprot.writeString(struct.hash);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRver()) {
        oprot.writeFieldBegin(RVER_FIELD_DESC);
        oprot.writeI32(struct.rver);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheck_ver()) {
        oprot.writeFieldBegin(CHECK_VER_FIELD_DESC);
        oprot.writeBool(struct.check_ver);
        oprot.writeFieldEnd();
      }
      if (struct.userAdSpaceAttri != null) {
        if (struct.isSetUserAdSpaceAttri()) {
          oprot.writeFieldBegin(USER_AD_SPACE_ATTRI_FIELD_DESC);
          struct.userAdSpaceAttri.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdRecomReqTupleSchemeFactory implements SchemeFactory {
    public AdRecomReqTupleScheme getScheme() {
      return new AdRecomReqTupleScheme();
    }
  }

  private static class AdRecomReqTupleScheme extends TupleScheme<AdRecomReq> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdRecomReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.app);
      oprot.writeString(struct.type);
      oprot.writeString(struct.version);
      oprot.writeI32(struct.result_num);
      oprot.writeString(struct.ogin_name);
      BitSet optionals = new BitSet();
      if (struct.isSetLog()) {
        optionals.set(0);
      }
      if (struct.isSetToken()) {
        optionals.set(1);
      }
      if (struct.isSetChannel()) {
        optionals.set(2);
      }
      if (struct.isSetUserinfo()) {
        optionals.set(3);
      }
      if (struct.isSetNet()) {
        optionals.set(4);
      }
      if (struct.isSetHash()) {
        optionals.set(5);
      }
      if (struct.isSetRver()) {
        optionals.set(6);
      }
      if (struct.isSetCheck_ver()) {
        optionals.set(7);
      }
      if (struct.isSetUserAdSpaceAttri()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetLog()) {
        oprot.writeBool(struct.log);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetUserinfo()) {
        struct.userinfo.write(oprot);
      }
      if (struct.isSetNet()) {
        oprot.writeString(struct.net);
      }
      if (struct.isSetHash()) {
        oprot.writeString(struct.hash);
      }
      if (struct.isSetRver()) {
        oprot.writeI32(struct.rver);
      }
      if (struct.isSetCheck_ver()) {
        oprot.writeBool(struct.check_ver);
      }
      if (struct.isSetUserAdSpaceAttri()) {
        struct.userAdSpaceAttri.write(oprot);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdRecomReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.app = iprot.readString();
      struct.setAppIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      struct.version = iprot.readString();
      struct.setVersionIsSet(true);
      struct.result_num = iprot.readI32();
      struct.setResult_numIsSet(true);
      struct.ogin_name = iprot.readString();
      struct.setOgin_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.log = iprot.readBool();
        struct.setLogIsSet(true);
      }
      if (incoming.get(1)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userinfo = new AdUserInfo();
        struct.userinfo.read(iprot);
        struct.setUserinfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.net = iprot.readString();
        struct.setNetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hash = iprot.readString();
        struct.setHashIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rver = iprot.readI32();
        struct.setRverIsSet(true);
      }
      if (incoming.get(7)) {
        struct.check_ver = iprot.readBool();
        struct.setCheck_verIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userAdSpaceAttri = new UserAdSpaceAttri();
        struct.userAdSpaceAttri.read(iprot);
        struct.setUserAdSpaceAttriIsSet(true);
      }
    }
  }

}

