/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class DateClickViewLimitV2 implements org.apache.thrift.TBase<DateClickViewLimitV2, DateClickViewLimitV2._Fields>, java.io.Serializable, Cloneable, Comparable<DateClickViewLimitV2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateClickViewLimitV2");

  private static final org.apache.thrift.protocol.TField TM_FIELD_DESC = new org.apache.thrift.protocol.TField("tm", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_COND_FIELD_DESC = new org.apache.thrift.protocol.TField("limitCond", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LIMIT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("limitNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_CLICK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("limitClickNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TURN_PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnPlayType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TURN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnLimit", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TURN_CLICK_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnClickLimit", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ADJUST_FIELD_DESC = new org.apache.thrift.protocol.TField("is_adjust", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ADJUST_PV_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("adjust_pv_num", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ADJUST_CLICK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("adjust_click_num", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateClickViewLimitV2StandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateClickViewLimitV2TupleSchemeFactory());
  }

  public List<LimitTimeRangeSec> tm; // required
  public int limitCond; // required
  public int limitNum; // optional
  public int limitClickNum; // optional
  public int TurnPlayType; // required
  public int TurnLimit; // optional
  public int TurnClickLimit; // optional
  public boolean is_adjust; // optional
  public int adjust_pv_num; // optional
  public int adjust_click_num; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TM((short)1, "tm"),
    LIMIT_COND((short)2, "limitCond"),
    LIMIT_NUM((short)3, "limitNum"),
    LIMIT_CLICK_NUM((short)4, "limitClickNum"),
    TURN_PLAY_TYPE((short)5, "TurnPlayType"),
    TURN_LIMIT((short)6, "TurnLimit"),
    TURN_CLICK_LIMIT((short)7, "TurnClickLimit"),
    IS_ADJUST((short)8, "is_adjust"),
    ADJUST_PV_NUM((short)9, "adjust_pv_num"),
    ADJUST_CLICK_NUM((short)10, "adjust_click_num");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TM
          return TM;
        case 2: // LIMIT_COND
          return LIMIT_COND;
        case 3: // LIMIT_NUM
          return LIMIT_NUM;
        case 4: // LIMIT_CLICK_NUM
          return LIMIT_CLICK_NUM;
        case 5: // TURN_PLAY_TYPE
          return TURN_PLAY_TYPE;
        case 6: // TURN_LIMIT
          return TURN_LIMIT;
        case 7: // TURN_CLICK_LIMIT
          return TURN_CLICK_LIMIT;
        case 8: // IS_ADJUST
          return IS_ADJUST;
        case 9: // ADJUST_PV_NUM
          return ADJUST_PV_NUM;
        case 10: // ADJUST_CLICK_NUM
          return ADJUST_CLICK_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITCOND_ISSET_ID = 0;
  private static final int __LIMITNUM_ISSET_ID = 1;
  private static final int __LIMITCLICKNUM_ISSET_ID = 2;
  private static final int __TURNPLAYTYPE_ISSET_ID = 3;
  private static final int __TURNLIMIT_ISSET_ID = 4;
  private static final int __TURNCLICKLIMIT_ISSET_ID = 5;
  private static final int __IS_ADJUST_ISSET_ID = 6;
  private static final int __ADJUST_PV_NUM_ISSET_ID = 7;
  private static final int __ADJUST_CLICK_NUM_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LIMIT_NUM,_Fields.LIMIT_CLICK_NUM,_Fields.TURN_LIMIT,_Fields.TURN_CLICK_LIMIT,_Fields.IS_ADJUST,_Fields.ADJUST_PV_NUM,_Fields.ADJUST_CLICK_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TM, new org.apache.thrift.meta_data.FieldMetaData("tm", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitTimeRangeSec.class))));
    tmpMap.put(_Fields.LIMIT_COND, new org.apache.thrift.meta_data.FieldMetaData("limitCond", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_NUM, new org.apache.thrift.meta_data.FieldMetaData("limitNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_CLICK_NUM, new org.apache.thrift.meta_data.FieldMetaData("limitClickNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TurnPlayType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("TurnLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_CLICK_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("TurnClickLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ADJUST, new org.apache.thrift.meta_data.FieldMetaData("is_adjust", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADJUST_PV_NUM, new org.apache.thrift.meta_data.FieldMetaData("adjust_pv_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADJUST_CLICK_NUM, new org.apache.thrift.meta_data.FieldMetaData("adjust_click_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateClickViewLimitV2.class, metaDataMap);
  }

  public DateClickViewLimitV2() {
  }

  public DateClickViewLimitV2(
    List<LimitTimeRangeSec> tm,
    int limitCond,
    int TurnPlayType)
  {
    this();
    this.tm = tm;
    this.limitCond = limitCond;
    setLimitCondIsSet(true);
    this.TurnPlayType = TurnPlayType;
    setTurnPlayTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateClickViewLimitV2(DateClickViewLimitV2 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTm()) {
      List<LimitTimeRangeSec> __this__tm = new ArrayList<LimitTimeRangeSec>(other.tm.size());
      for (LimitTimeRangeSec other_element : other.tm) {
        __this__tm.add(new LimitTimeRangeSec(other_element));
      }
      this.tm = __this__tm;
    }
    this.limitCond = other.limitCond;
    this.limitNum = other.limitNum;
    this.limitClickNum = other.limitClickNum;
    this.TurnPlayType = other.TurnPlayType;
    this.TurnLimit = other.TurnLimit;
    this.TurnClickLimit = other.TurnClickLimit;
    this.is_adjust = other.is_adjust;
    this.adjust_pv_num = other.adjust_pv_num;
    this.adjust_click_num = other.adjust_click_num;
  }

  public DateClickViewLimitV2 deepCopy() {
    return new DateClickViewLimitV2(this);
  }

  
  public void clear() {
    this.tm = null;
    setLimitCondIsSet(false);
    this.limitCond = 0;
    setLimitNumIsSet(false);
    this.limitNum = 0;
    setLimitClickNumIsSet(false);
    this.limitClickNum = 0;
    setTurnPlayTypeIsSet(false);
    this.TurnPlayType = 0;
    setTurnLimitIsSet(false);
    this.TurnLimit = 0;
    setTurnClickLimitIsSet(false);
    this.TurnClickLimit = 0;
    setIs_adjustIsSet(false);
    this.is_adjust = false;
    setAdjust_pv_numIsSet(false);
    this.adjust_pv_num = 0;
    setAdjust_click_numIsSet(false);
    this.adjust_click_num = 0;
  }

  public int getTmSize() {
    return (this.tm == null) ? 0 : this.tm.size();
  }

  public java.util.Iterator<LimitTimeRangeSec> getTmIterator() {
    return (this.tm == null) ? null : this.tm.iterator();
  }

  public void addToTm(LimitTimeRangeSec elem) {
    if (this.tm == null) {
      this.tm = new ArrayList<LimitTimeRangeSec>();
    }
    this.tm.add(elem);
  }

  public List<LimitTimeRangeSec> getTm() {
    return this.tm;
  }

  public DateClickViewLimitV2 setTm(List<LimitTimeRangeSec> tm) {
    this.tm = tm;
    return this;
  }

  public void unsetTm() {
    this.tm = null;
  }

  /** Returns true if field tm is set (has been assigned a value) and false otherwise */
  public boolean isSetTm() {
    return this.tm != null;
  }

  public void setTmIsSet(boolean value) {
    if (!value) {
      this.tm = null;
    }
  }

  public int getLimitCond() {
    return this.limitCond;
  }

  public DateClickViewLimitV2 setLimitCond(int limitCond) {
    this.limitCond = limitCond;
    setLimitCondIsSet(true);
    return this;
  }

  public void unsetLimitCond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCOND_ISSET_ID);
  }

  /** Returns true if field limitCond is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitCond() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCOND_ISSET_ID);
  }

  public void setLimitCondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCOND_ISSET_ID, value);
  }

  public int getLimitNum() {
    return this.limitNum;
  }

  public DateClickViewLimitV2 setLimitNum(int limitNum) {
    this.limitNum = limitNum;
    setLimitNumIsSet(true);
    return this;
  }

  public void unsetLimitNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITNUM_ISSET_ID);
  }

  /** Returns true if field limitNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITNUM_ISSET_ID);
  }

  public void setLimitNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITNUM_ISSET_ID, value);
  }

  public int getLimitClickNum() {
    return this.limitClickNum;
  }

  public DateClickViewLimitV2 setLimitClickNum(int limitClickNum) {
    this.limitClickNum = limitClickNum;
    setLimitClickNumIsSet(true);
    return this;
  }

  public void unsetLimitClickNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID);
  }

  /** Returns true if field limitClickNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitClickNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID);
  }

  public void setLimitClickNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID, value);
  }

  public int getTurnPlayType() {
    return this.TurnPlayType;
  }

  public DateClickViewLimitV2 setTurnPlayType(int TurnPlayType) {
    this.TurnPlayType = TurnPlayType;
    setTurnPlayTypeIsSet(true);
    return this;
  }

  public void unsetTurnPlayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID);
  }

  /** Returns true if field TurnPlayType is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnPlayType() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID);
  }

  public void setTurnPlayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID, value);
  }

  public int getTurnLimit() {
    return this.TurnLimit;
  }

  public DateClickViewLimitV2 setTurnLimit(int TurnLimit) {
    this.TurnLimit = TurnLimit;
    setTurnLimitIsSet(true);
    return this;
  }

  public void unsetTurnLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNLIMIT_ISSET_ID);
  }

  /** Returns true if field TurnLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNLIMIT_ISSET_ID);
  }

  public void setTurnLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNLIMIT_ISSET_ID, value);
  }

  public int getTurnClickLimit() {
    return this.TurnClickLimit;
  }

  public DateClickViewLimitV2 setTurnClickLimit(int TurnClickLimit) {
    this.TurnClickLimit = TurnClickLimit;
    setTurnClickLimitIsSet(true);
    return this;
  }

  public void unsetTurnClickLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID);
  }

  /** Returns true if field TurnClickLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnClickLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID);
  }

  public void setTurnClickLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID, value);
  }

  public boolean isIs_adjust() {
    return this.is_adjust;
  }

  public DateClickViewLimitV2 setIs_adjust(boolean is_adjust) {
    this.is_adjust = is_adjust;
    setIs_adjustIsSet(true);
    return this;
  }

  public void unsetIs_adjust() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_ADJUST_ISSET_ID);
  }

  /** Returns true if field is_adjust is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_adjust() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_ADJUST_ISSET_ID);
  }

  public void setIs_adjustIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_ADJUST_ISSET_ID, value);
  }

  public int getAdjust_pv_num() {
    return this.adjust_pv_num;
  }

  public DateClickViewLimitV2 setAdjust_pv_num(int adjust_pv_num) {
    this.adjust_pv_num = adjust_pv_num;
    setAdjust_pv_numIsSet(true);
    return this;
  }

  public void unsetAdjust_pv_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADJUST_PV_NUM_ISSET_ID);
  }

  /** Returns true if field adjust_pv_num is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjust_pv_num() {
    return EncodingUtils.testBit(__isset_bitfield, __ADJUST_PV_NUM_ISSET_ID);
  }

  public void setAdjust_pv_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADJUST_PV_NUM_ISSET_ID, value);
  }

  public int getAdjust_click_num() {
    return this.adjust_click_num;
  }

  public DateClickViewLimitV2 setAdjust_click_num(int adjust_click_num) {
    this.adjust_click_num = adjust_click_num;
    setAdjust_click_numIsSet(true);
    return this;
  }

  public void unsetAdjust_click_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADJUST_CLICK_NUM_ISSET_ID);
  }

  /** Returns true if field adjust_click_num is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjust_click_num() {
    return EncodingUtils.testBit(__isset_bitfield, __ADJUST_CLICK_NUM_ISSET_ID);
  }

  public void setAdjust_click_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADJUST_CLICK_NUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TM:
      if (value == null) {
        unsetTm();
      } else {
        setTm((List<LimitTimeRangeSec>)value);
      }
      break;

    case LIMIT_COND:
      if (value == null) {
        unsetLimitCond();
      } else {
        setLimitCond((Integer)value);
      }
      break;

    case LIMIT_NUM:
      if (value == null) {
        unsetLimitNum();
      } else {
        setLimitNum((Integer)value);
      }
      break;

    case LIMIT_CLICK_NUM:
      if (value == null) {
        unsetLimitClickNum();
      } else {
        setLimitClickNum((Integer)value);
      }
      break;

    case TURN_PLAY_TYPE:
      if (value == null) {
        unsetTurnPlayType();
      } else {
        setTurnPlayType((Integer)value);
      }
      break;

    case TURN_LIMIT:
      if (value == null) {
        unsetTurnLimit();
      } else {
        setTurnLimit((Integer)value);
      }
      break;

    case TURN_CLICK_LIMIT:
      if (value == null) {
        unsetTurnClickLimit();
      } else {
        setTurnClickLimit((Integer)value);
      }
      break;

    case IS_ADJUST:
      if (value == null) {
        unsetIs_adjust();
      } else {
        setIs_adjust((Boolean)value);
      }
      break;

    case ADJUST_PV_NUM:
      if (value == null) {
        unsetAdjust_pv_num();
      } else {
        setAdjust_pv_num((Integer)value);
      }
      break;

    case ADJUST_CLICK_NUM:
      if (value == null) {
        unsetAdjust_click_num();
      } else {
        setAdjust_click_num((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TM:
      return getTm();

    case LIMIT_COND:
      return Integer.valueOf(getLimitCond());

    case LIMIT_NUM:
      return Integer.valueOf(getLimitNum());

    case LIMIT_CLICK_NUM:
      return Integer.valueOf(getLimitClickNum());

    case TURN_PLAY_TYPE:
      return Integer.valueOf(getTurnPlayType());

    case TURN_LIMIT:
      return Integer.valueOf(getTurnLimit());

    case TURN_CLICK_LIMIT:
      return Integer.valueOf(getTurnClickLimit());

    case IS_ADJUST:
      return Boolean.valueOf(isIs_adjust());

    case ADJUST_PV_NUM:
      return Integer.valueOf(getAdjust_pv_num());

    case ADJUST_CLICK_NUM:
      return Integer.valueOf(getAdjust_click_num());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TM:
      return isSetTm();
    case LIMIT_COND:
      return isSetLimitCond();
    case LIMIT_NUM:
      return isSetLimitNum();
    case LIMIT_CLICK_NUM:
      return isSetLimitClickNum();
    case TURN_PLAY_TYPE:
      return isSetTurnPlayType();
    case TURN_LIMIT:
      return isSetTurnLimit();
    case TURN_CLICK_LIMIT:
      return isSetTurnClickLimit();
    case IS_ADJUST:
      return isSetIs_adjust();
    case ADJUST_PV_NUM:
      return isSetAdjust_pv_num();
    case ADJUST_CLICK_NUM:
      return isSetAdjust_click_num();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateClickViewLimitV2)
      return this.equals((DateClickViewLimitV2)that);
    return false;
  }

  public boolean equals(DateClickViewLimitV2 that) {
    if (that == null)
      return false;

    boolean this_present_tm = true && this.isSetTm();
    boolean that_present_tm = true && that.isSetTm();
    if (this_present_tm || that_present_tm) {
      if (!(this_present_tm && that_present_tm))
        return false;
      if (!this.tm.equals(that.tm))
        return false;
    }

    boolean this_present_limitCond = true;
    boolean that_present_limitCond = true;
    if (this_present_limitCond || that_present_limitCond) {
      if (!(this_present_limitCond && that_present_limitCond))
        return false;
      if (this.limitCond != that.limitCond)
        return false;
    }

    boolean this_present_limitNum = true && this.isSetLimitNum();
    boolean that_present_limitNum = true && that.isSetLimitNum();
    if (this_present_limitNum || that_present_limitNum) {
      if (!(this_present_limitNum && that_present_limitNum))
        return false;
      if (this.limitNum != that.limitNum)
        return false;
    }

    boolean this_present_limitClickNum = true && this.isSetLimitClickNum();
    boolean that_present_limitClickNum = true && that.isSetLimitClickNum();
    if (this_present_limitClickNum || that_present_limitClickNum) {
      if (!(this_present_limitClickNum && that_present_limitClickNum))
        return false;
      if (this.limitClickNum != that.limitClickNum)
        return false;
    }

    boolean this_present_TurnPlayType = true;
    boolean that_present_TurnPlayType = true;
    if (this_present_TurnPlayType || that_present_TurnPlayType) {
      if (!(this_present_TurnPlayType && that_present_TurnPlayType))
        return false;
      if (this.TurnPlayType != that.TurnPlayType)
        return false;
    }

    boolean this_present_TurnLimit = true && this.isSetTurnLimit();
    boolean that_present_TurnLimit = true && that.isSetTurnLimit();
    if (this_present_TurnLimit || that_present_TurnLimit) {
      if (!(this_present_TurnLimit && that_present_TurnLimit))
        return false;
      if (this.TurnLimit != that.TurnLimit)
        return false;
    }

    boolean this_present_TurnClickLimit = true && this.isSetTurnClickLimit();
    boolean that_present_TurnClickLimit = true && that.isSetTurnClickLimit();
    if (this_present_TurnClickLimit || that_present_TurnClickLimit) {
      if (!(this_present_TurnClickLimit && that_present_TurnClickLimit))
        return false;
      if (this.TurnClickLimit != that.TurnClickLimit)
        return false;
    }

    boolean this_present_is_adjust = true && this.isSetIs_adjust();
    boolean that_present_is_adjust = true && that.isSetIs_adjust();
    if (this_present_is_adjust || that_present_is_adjust) {
      if (!(this_present_is_adjust && that_present_is_adjust))
        return false;
      if (this.is_adjust != that.is_adjust)
        return false;
    }

    boolean this_present_adjust_pv_num = true && this.isSetAdjust_pv_num();
    boolean that_present_adjust_pv_num = true && that.isSetAdjust_pv_num();
    if (this_present_adjust_pv_num || that_present_adjust_pv_num) {
      if (!(this_present_adjust_pv_num && that_present_adjust_pv_num))
        return false;
      if (this.adjust_pv_num != that.adjust_pv_num)
        return false;
    }

    boolean this_present_adjust_click_num = true && this.isSetAdjust_click_num();
    boolean that_present_adjust_click_num = true && that.isSetAdjust_click_num();
    if (this_present_adjust_click_num || that_present_adjust_click_num) {
      if (!(this_present_adjust_click_num && that_present_adjust_click_num))
        return false;
      if (this.adjust_click_num != that.adjust_click_num)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tm = true && (isSetTm());
    list.add(present_tm);
    if (present_tm)
      list.add(tm);

    boolean present_limitCond = true;
    list.add(present_limitCond);
    if (present_limitCond)
      list.add(limitCond);

    boolean present_limitNum = true && (isSetLimitNum());
    list.add(present_limitNum);
    if (present_limitNum)
      list.add(limitNum);

    boolean present_limitClickNum = true && (isSetLimitClickNum());
    list.add(present_limitClickNum);
    if (present_limitClickNum)
      list.add(limitClickNum);

    boolean present_TurnPlayType = true;
    list.add(present_TurnPlayType);
    if (present_TurnPlayType)
      list.add(TurnPlayType);

    boolean present_TurnLimit = true && (isSetTurnLimit());
    list.add(present_TurnLimit);
    if (present_TurnLimit)
      list.add(TurnLimit);

    boolean present_TurnClickLimit = true && (isSetTurnClickLimit());
    list.add(present_TurnClickLimit);
    if (present_TurnClickLimit)
      list.add(TurnClickLimit);

    boolean present_is_adjust = true && (isSetIs_adjust());
    list.add(present_is_adjust);
    if (present_is_adjust)
      list.add(is_adjust);

    boolean present_adjust_pv_num = true && (isSetAdjust_pv_num());
    list.add(present_adjust_pv_num);
    if (present_adjust_pv_num)
      list.add(adjust_pv_num);

    boolean present_adjust_click_num = true && (isSetAdjust_click_num());
    list.add(present_adjust_click_num);
    if (present_adjust_click_num)
      list.add(adjust_click_num);

    return list.hashCode();
  }

  
  public int compareTo(DateClickViewLimitV2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTm()).compareTo(other.isSetTm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tm, other.tm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitCond()).compareTo(other.isSetLimitCond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitCond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitCond, other.limitCond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitNum()).compareTo(other.isSetLimitNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitNum, other.limitNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitClickNum()).compareTo(other.isSetLimitClickNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitClickNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitClickNum, other.limitClickNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnPlayType()).compareTo(other.isSetTurnPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnPlayType, other.TurnPlayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnLimit()).compareTo(other.isSetTurnLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnLimit, other.TurnLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnClickLimit()).compareTo(other.isSetTurnClickLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnClickLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnClickLimit, other.TurnClickLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_adjust()).compareTo(other.isSetIs_adjust());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_adjust()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_adjust, other.is_adjust);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdjust_pv_num()).compareTo(other.isSetAdjust_pv_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjust_pv_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjust_pv_num, other.adjust_pv_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdjust_click_num()).compareTo(other.isSetAdjust_click_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjust_click_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjust_click_num, other.adjust_click_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("DateClickViewLimitV2(");
    boolean first = true;

    sb.append("tm:");
    if (this.tm == null) {
      sb.append("null");
    } else {
      sb.append(this.tm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitCond:");
    sb.append(this.limitCond);
    first = false;
    if (isSetLimitNum()) {
      if (!first) sb.append(", ");
      sb.append("limitNum:");
      sb.append(this.limitNum);
      first = false;
    }
    if (isSetLimitClickNum()) {
      if (!first) sb.append(", ");
      sb.append("limitClickNum:");
      sb.append(this.limitClickNum);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("TurnPlayType:");
    sb.append(this.TurnPlayType);
    first = false;
    if (isSetTurnLimit()) {
      if (!first) sb.append(", ");
      sb.append("TurnLimit:");
      sb.append(this.TurnLimit);
      first = false;
    }
    if (isSetTurnClickLimit()) {
      if (!first) sb.append(", ");
      sb.append("TurnClickLimit:");
      sb.append(this.TurnClickLimit);
      first = false;
    }
    if (isSetIs_adjust()) {
      if (!first) sb.append(", ");
      sb.append("is_adjust:");
      sb.append(this.is_adjust);
      first = false;
    }
    if (isSetAdjust_pv_num()) {
      if (!first) sb.append(", ");
      sb.append("adjust_pv_num:");
      sb.append(this.adjust_pv_num);
      first = false;
    }
    if (isSetAdjust_click_num()) {
      if (!first) sb.append(", ");
      sb.append("adjust_click_num:");
      sb.append(this.adjust_click_num);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tm == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tm' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'limitCond' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'TurnPlayType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateClickViewLimitV2StandardSchemeFactory implements SchemeFactory {
    public DateClickViewLimitV2StandardScheme getScheme() {
      return new DateClickViewLimitV2StandardScheme();
    }
  }

  private static class DateClickViewLimitV2StandardScheme extends StandardScheme<DateClickViewLimitV2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateClickViewLimitV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.tm = new ArrayList<LimitTimeRangeSec>(_list62.size);
                LimitTimeRangeSec _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = new LimitTimeRangeSec();
                  _elem63.read(iprot);
                  struct.tm.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setTmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT_COND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitCond = iprot.readI32();
              struct.setLimitCondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMIT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitNum = iprot.readI32();
              struct.setLimitNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT_CLICK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitClickNum = iprot.readI32();
              struct.setLimitClickNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TURN_PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnPlayType = iprot.readI32();
              struct.setTurnPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TURN_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnLimit = iprot.readI32();
              struct.setTurnLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TURN_CLICK_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnClickLimit = iprot.readI32();
              struct.setTurnClickLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ADJUST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_adjust = iprot.readBool();
              struct.setIs_adjustIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADJUST_PV_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adjust_pv_num = iprot.readI32();
              struct.setAdjust_pv_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADJUST_CLICK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adjust_click_num = iprot.readI32();
              struct.setAdjust_click_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLimitCond()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'limitCond' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTurnPlayType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'TurnPlayType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateClickViewLimitV2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tm != null) {
        oprot.writeFieldBegin(TM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tm.size()));
          for (LimitTimeRangeSec _iter65 : struct.tm)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_COND_FIELD_DESC);
      oprot.writeI32(struct.limitCond);
      oprot.writeFieldEnd();
      if (struct.isSetLimitNum()) {
        oprot.writeFieldBegin(LIMIT_NUM_FIELD_DESC);
        oprot.writeI32(struct.limitNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitClickNum()) {
        oprot.writeFieldBegin(LIMIT_CLICK_NUM_FIELD_DESC);
        oprot.writeI32(struct.limitClickNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TURN_PLAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.TurnPlayType);
      oprot.writeFieldEnd();
      if (struct.isSetTurnLimit()) {
        oprot.writeFieldBegin(TURN_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.TurnLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnClickLimit()) {
        oprot.writeFieldBegin(TURN_CLICK_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.TurnClickLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_adjust()) {
        oprot.writeFieldBegin(IS_ADJUST_FIELD_DESC);
        oprot.writeBool(struct.is_adjust);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdjust_pv_num()) {
        oprot.writeFieldBegin(ADJUST_PV_NUM_FIELD_DESC);
        oprot.writeI32(struct.adjust_pv_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdjust_click_num()) {
        oprot.writeFieldBegin(ADJUST_CLICK_NUM_FIELD_DESC);
        oprot.writeI32(struct.adjust_click_num);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateClickViewLimitV2TupleSchemeFactory implements SchemeFactory {
    public DateClickViewLimitV2TupleScheme getScheme() {
      return new DateClickViewLimitV2TupleScheme();
    }
  }

  private static class DateClickViewLimitV2TupleScheme extends TupleScheme<DateClickViewLimitV2> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, DateClickViewLimitV2 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.tm.size());
        for (LimitTimeRangeSec _iter66 : struct.tm)
        {
          _iter66.write(oprot);
        }
      }
      oprot.writeI32(struct.limitCond);
      oprot.writeI32(struct.TurnPlayType);
      BitSet optionals = new BitSet();
      if (struct.isSetLimitNum()) {
        optionals.set(0);
      }
      if (struct.isSetLimitClickNum()) {
        optionals.set(1);
      }
      if (struct.isSetTurnLimit()) {
        optionals.set(2);
      }
      if (struct.isSetTurnClickLimit()) {
        optionals.set(3);
      }
      if (struct.isSetIs_adjust()) {
        optionals.set(4);
      }
      if (struct.isSetAdjust_pv_num()) {
        optionals.set(5);
      }
      if (struct.isSetAdjust_click_num()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetLimitNum()) {
        oprot.writeI32(struct.limitNum);
      }
      if (struct.isSetLimitClickNum()) {
        oprot.writeI32(struct.limitClickNum);
      }
      if (struct.isSetTurnLimit()) {
        oprot.writeI32(struct.TurnLimit);
      }
      if (struct.isSetTurnClickLimit()) {
        oprot.writeI32(struct.TurnClickLimit);
      }
      if (struct.isSetIs_adjust()) {
        oprot.writeBool(struct.is_adjust);
      }
      if (struct.isSetAdjust_pv_num()) {
        oprot.writeI32(struct.adjust_pv_num);
      }
      if (struct.isSetAdjust_click_num()) {
        oprot.writeI32(struct.adjust_click_num);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, DateClickViewLimitV2 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.tm = new ArrayList<LimitTimeRangeSec>(_list67.size);
        LimitTimeRangeSec _elem68;
        for (int _i69 = 0; _i69 < _list67.size; ++_i69)
        {
          _elem68 = new LimitTimeRangeSec();
          _elem68.read(iprot);
          struct.tm.add(_elem68);
        }
      }
      struct.setTmIsSet(true);
      struct.limitCond = iprot.readI32();
      struct.setLimitCondIsSet(true);
      struct.TurnPlayType = iprot.readI32();
      struct.setTurnPlayTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.limitNum = iprot.readI32();
        struct.setLimitNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limitClickNum = iprot.readI32();
        struct.setLimitClickNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.TurnLimit = iprot.readI32();
        struct.setTurnLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.TurnClickLimit = iprot.readI32();
        struct.setTurnClickLimitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_adjust = iprot.readBool();
        struct.setIs_adjustIsSet(true);
      }
      if (incoming.get(5)) {
        struct.adjust_pv_num = iprot.readI32();
        struct.setAdjust_pv_numIsSet(true);
      }
      if (incoming.get(6)) {
        struct.adjust_click_num = iprot.readI32();
        struct.setAdjust_click_numIsSet(true);
      }
    }
  }

}

