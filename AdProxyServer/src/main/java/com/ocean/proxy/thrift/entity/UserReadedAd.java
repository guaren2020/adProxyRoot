/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class UserReadedAd implements org.apache.thrift.TBase<UserReadedAd, UserReadedAd._Fields>, java.io.Serializable, Cloneable, Comparable<UserReadedAd> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserReadedAd");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REQFTS_FIELD_DESC = new org.apache.thrift.protocol.TField("reqfts", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REQLTS_FIELD_DESC = new org.apache.thrift.protocol.TField("reqlts", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField READED_FIELD_DESC = new org.apache.thrift.protocol.TField("readed", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("click", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField READCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("readcount", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField CLICKCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("clickcount", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField THIRD_COUNT_PER_PLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("third_count_per_play", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserReadedAdStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserReadedAdTupleSchemeFactory());
  }

  public String uid; // required
  public int reqfts; // required
  public int reqlts; // required
  public Set<Long> readed; // required
  public Set<Long> click; // required
  public Map<Long,Integer> readcount; // required
  public Map<Long,Integer> clickcount; // required
  public int third_count_per_play; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    REQFTS((short)2, "reqfts"),
    REQLTS((short)3, "reqlts"),
    READED((short)4, "readed"),
    CLICK((short)5, "click"),
    READCOUNT((short)6, "readcount"),
    CLICKCOUNT((short)7, "clickcount"),
    THIRD_COUNT_PER_PLAY((short)8, "third_count_per_play");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // REQFTS
          return REQFTS;
        case 3: // REQLTS
          return REQLTS;
        case 4: // READED
          return READED;
        case 5: // CLICK
          return CLICK;
        case 6: // READCOUNT
          return READCOUNT;
        case 7: // CLICKCOUNT
          return CLICKCOUNT;
        case 8: // THIRD_COUNT_PER_PLAY
          return THIRD_COUNT_PER_PLAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQFTS_ISSET_ID = 0;
  private static final int __REQLTS_ISSET_ID = 1;
  private static final int __THIRD_COUNT_PER_PLAY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQFTS, new org.apache.thrift.meta_data.FieldMetaData("reqfts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQLTS, new org.apache.thrift.meta_data.FieldMetaData("reqlts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READED, new org.apache.thrift.meta_data.FieldMetaData("readed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CLICK, new org.apache.thrift.meta_data.FieldMetaData("click", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.READCOUNT, new org.apache.thrift.meta_data.FieldMetaData("readcount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CLICKCOUNT, new org.apache.thrift.meta_data.FieldMetaData("clickcount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.THIRD_COUNT_PER_PLAY, new org.apache.thrift.meta_data.FieldMetaData("third_count_per_play", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserReadedAd.class, metaDataMap);
  }

  public UserReadedAd() {
    this.reqfts = 0;

    this.reqlts = 0;

    this.third_count_per_play = 0;

  }

  public UserReadedAd(
    String uid,
    int reqfts,
    int reqlts,
    Set<Long> readed,
    Set<Long> click,
    Map<Long,Integer> readcount,
    Map<Long,Integer> clickcount,
    int third_count_per_play)
  {
    this();
    this.uid = uid;
    this.reqfts = reqfts;
    setReqftsIsSet(true);
    this.reqlts = reqlts;
    setReqltsIsSet(true);
    this.readed = readed;
    this.click = click;
    this.readcount = readcount;
    this.clickcount = clickcount;
    this.third_count_per_play = third_count_per_play;
    setThird_count_per_playIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserReadedAd(UserReadedAd other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    this.reqfts = other.reqfts;
    this.reqlts = other.reqlts;
    if (other.isSetReaded()) {
      Set<Long> __this__readed = new HashSet<Long>(other.readed);
      this.readed = __this__readed;
    }
    if (other.isSetClick()) {
      Set<Long> __this__click = new HashSet<Long>(other.click);
      this.click = __this__click;
    }
    if (other.isSetReadcount()) {
      Map<Long,Integer> __this__readcount = new HashMap<Long,Integer>(other.readcount);
      this.readcount = __this__readcount;
    }
    if (other.isSetClickcount()) {
      Map<Long,Integer> __this__clickcount = new HashMap<Long,Integer>(other.clickcount);
      this.clickcount = __this__clickcount;
    }
    this.third_count_per_play = other.third_count_per_play;
  }

  public UserReadedAd deepCopy() {
    return new UserReadedAd(this);
  }

  
  public void clear() {
    this.uid = null;
    this.reqfts = 0;

    this.reqlts = 0;

    this.readed = null;
    this.click = null;
    this.readcount = null;
    this.clickcount = null;
    this.third_count_per_play = 0;

  }

  public String getUid() {
    return this.uid;
  }

  public UserReadedAd setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public int getReqfts() {
    return this.reqfts;
  }

  public UserReadedAd setReqfts(int reqfts) {
    this.reqfts = reqfts;
    setReqftsIsSet(true);
    return this;
  }

  public void unsetReqfts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQFTS_ISSET_ID);
  }

  /** Returns true if field reqfts is set (has been assigned a value) and false otherwise */
  public boolean isSetReqfts() {
    return EncodingUtils.testBit(__isset_bitfield, __REQFTS_ISSET_ID);
  }

  public void setReqftsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQFTS_ISSET_ID, value);
  }

  public int getReqlts() {
    return this.reqlts;
  }

  public UserReadedAd setReqlts(int reqlts) {
    this.reqlts = reqlts;
    setReqltsIsSet(true);
    return this;
  }

  public void unsetReqlts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQLTS_ISSET_ID);
  }

  /** Returns true if field reqlts is set (has been assigned a value) and false otherwise */
  public boolean isSetReqlts() {
    return EncodingUtils.testBit(__isset_bitfield, __REQLTS_ISSET_ID);
  }

  public void setReqltsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQLTS_ISSET_ID, value);
  }

  public int getReadedSize() {
    return (this.readed == null) ? 0 : this.readed.size();
  }

  public java.util.Iterator<Long> getReadedIterator() {
    return (this.readed == null) ? null : this.readed.iterator();
  }

  public void addToReaded(long elem) {
    if (this.readed == null) {
      this.readed = new HashSet<Long>();
    }
    this.readed.add(elem);
  }

  public Set<Long> getReaded() {
    return this.readed;
  }

  public UserReadedAd setReaded(Set<Long> readed) {
    this.readed = readed;
    return this;
  }

  public void unsetReaded() {
    this.readed = null;
  }

  /** Returns true if field readed is set (has been assigned a value) and false otherwise */
  public boolean isSetReaded() {
    return this.readed != null;
  }

  public void setReadedIsSet(boolean value) {
    if (!value) {
      this.readed = null;
    }
  }

  public int getClickSize() {
    return (this.click == null) ? 0 : this.click.size();
  }

  public java.util.Iterator<Long> getClickIterator() {
    return (this.click == null) ? null : this.click.iterator();
  }

  public void addToClick(long elem) {
    if (this.click == null) {
      this.click = new HashSet<Long>();
    }
    this.click.add(elem);
  }

  public Set<Long> getClick() {
    return this.click;
  }

  public UserReadedAd setClick(Set<Long> click) {
    this.click = click;
    return this;
  }

  public void unsetClick() {
    this.click = null;
  }

  /** Returns true if field click is set (has been assigned a value) and false otherwise */
  public boolean isSetClick() {
    return this.click != null;
  }

  public void setClickIsSet(boolean value) {
    if (!value) {
      this.click = null;
    }
  }

  public int getReadcountSize() {
    return (this.readcount == null) ? 0 : this.readcount.size();
  }

  public void putToReadcount(long key, int val) {
    if (this.readcount == null) {
      this.readcount = new HashMap<Long,Integer>();
    }
    this.readcount.put(key, val);
  }

  public Map<Long,Integer> getReadcount() {
    return this.readcount;
  }

  public UserReadedAd setReadcount(Map<Long,Integer> readcount) {
    this.readcount = readcount;
    return this;
  }

  public void unsetReadcount() {
    this.readcount = null;
  }

  /** Returns true if field readcount is set (has been assigned a value) and false otherwise */
  public boolean isSetReadcount() {
    return this.readcount != null;
  }

  public void setReadcountIsSet(boolean value) {
    if (!value) {
      this.readcount = null;
    }
  }

  public int getClickcountSize() {
    return (this.clickcount == null) ? 0 : this.clickcount.size();
  }

  public void putToClickcount(long key, int val) {
    if (this.clickcount == null) {
      this.clickcount = new HashMap<Long,Integer>();
    }
    this.clickcount.put(key, val);
  }

  public Map<Long,Integer> getClickcount() {
    return this.clickcount;
  }

  public UserReadedAd setClickcount(Map<Long,Integer> clickcount) {
    this.clickcount = clickcount;
    return this;
  }

  public void unsetClickcount() {
    this.clickcount = null;
  }

  /** Returns true if field clickcount is set (has been assigned a value) and false otherwise */
  public boolean isSetClickcount() {
    return this.clickcount != null;
  }

  public void setClickcountIsSet(boolean value) {
    if (!value) {
      this.clickcount = null;
    }
  }

  public int getThird_count_per_play() {
    return this.third_count_per_play;
  }

  public UserReadedAd setThird_count_per_play(int third_count_per_play) {
    this.third_count_per_play = third_count_per_play;
    setThird_count_per_playIsSet(true);
    return this;
  }

  public void unsetThird_count_per_play() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIRD_COUNT_PER_PLAY_ISSET_ID);
  }

  /** Returns true if field third_count_per_play is set (has been assigned a value) and false otherwise */
  public boolean isSetThird_count_per_play() {
    return EncodingUtils.testBit(__isset_bitfield, __THIRD_COUNT_PER_PLAY_ISSET_ID);
  }

  public void setThird_count_per_playIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIRD_COUNT_PER_PLAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case REQFTS:
      if (value == null) {
        unsetReqfts();
      } else {
        setReqfts((Integer)value);
      }
      break;

    case REQLTS:
      if (value == null) {
        unsetReqlts();
      } else {
        setReqlts((Integer)value);
      }
      break;

    case READED:
      if (value == null) {
        unsetReaded();
      } else {
        setReaded((Set<Long>)value);
      }
      break;

    case CLICK:
      if (value == null) {
        unsetClick();
      } else {
        setClick((Set<Long>)value);
      }
      break;

    case READCOUNT:
      if (value == null) {
        unsetReadcount();
      } else {
        setReadcount((Map<Long,Integer>)value);
      }
      break;

    case CLICKCOUNT:
      if (value == null) {
        unsetClickcount();
      } else {
        setClickcount((Map<Long,Integer>)value);
      }
      break;

    case THIRD_COUNT_PER_PLAY:
      if (value == null) {
        unsetThird_count_per_play();
      } else {
        setThird_count_per_play((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case REQFTS:
      return Integer.valueOf(getReqfts());

    case REQLTS:
      return Integer.valueOf(getReqlts());

    case READED:
      return getReaded();

    case CLICK:
      return getClick();

    case READCOUNT:
      return getReadcount();

    case CLICKCOUNT:
      return getClickcount();

    case THIRD_COUNT_PER_PLAY:
      return Integer.valueOf(getThird_count_per_play());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case REQFTS:
      return isSetReqfts();
    case REQLTS:
      return isSetReqlts();
    case READED:
      return isSetReaded();
    case CLICK:
      return isSetClick();
    case READCOUNT:
      return isSetReadcount();
    case CLICKCOUNT:
      return isSetClickcount();
    case THIRD_COUNT_PER_PLAY:
      return isSetThird_count_per_play();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserReadedAd)
      return this.equals((UserReadedAd)that);
    return false;
  }

  public boolean equals(UserReadedAd that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_reqfts = true;
    boolean that_present_reqfts = true;
    if (this_present_reqfts || that_present_reqfts) {
      if (!(this_present_reqfts && that_present_reqfts))
        return false;
      if (this.reqfts != that.reqfts)
        return false;
    }

    boolean this_present_reqlts = true;
    boolean that_present_reqlts = true;
    if (this_present_reqlts || that_present_reqlts) {
      if (!(this_present_reqlts && that_present_reqlts))
        return false;
      if (this.reqlts != that.reqlts)
        return false;
    }

    boolean this_present_readed = true && this.isSetReaded();
    boolean that_present_readed = true && that.isSetReaded();
    if (this_present_readed || that_present_readed) {
      if (!(this_present_readed && that_present_readed))
        return false;
      if (!this.readed.equals(that.readed))
        return false;
    }

    boolean this_present_click = true && this.isSetClick();
    boolean that_present_click = true && that.isSetClick();
    if (this_present_click || that_present_click) {
      if (!(this_present_click && that_present_click))
        return false;
      if (!this.click.equals(that.click))
        return false;
    }

    boolean this_present_readcount = true && this.isSetReadcount();
    boolean that_present_readcount = true && that.isSetReadcount();
    if (this_present_readcount || that_present_readcount) {
      if (!(this_present_readcount && that_present_readcount))
        return false;
      if (!this.readcount.equals(that.readcount))
        return false;
    }

    boolean this_present_clickcount = true && this.isSetClickcount();
    boolean that_present_clickcount = true && that.isSetClickcount();
    if (this_present_clickcount || that_present_clickcount) {
      if (!(this_present_clickcount && that_present_clickcount))
        return false;
      if (!this.clickcount.equals(that.clickcount))
        return false;
    }

    boolean this_present_third_count_per_play = true;
    boolean that_present_third_count_per_play = true;
    if (this_present_third_count_per_play || that_present_third_count_per_play) {
      if (!(this_present_third_count_per_play && that_present_third_count_per_play))
        return false;
      if (this.third_count_per_play != that.third_count_per_play)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_reqfts = true;
    list.add(present_reqfts);
    if (present_reqfts)
      list.add(reqfts);

    boolean present_reqlts = true;
    list.add(present_reqlts);
    if (present_reqlts)
      list.add(reqlts);

    boolean present_readed = true && (isSetReaded());
    list.add(present_readed);
    if (present_readed)
      list.add(readed);

    boolean present_click = true && (isSetClick());
    list.add(present_click);
    if (present_click)
      list.add(click);

    boolean present_readcount = true && (isSetReadcount());
    list.add(present_readcount);
    if (present_readcount)
      list.add(readcount);

    boolean present_clickcount = true && (isSetClickcount());
    list.add(present_clickcount);
    if (present_clickcount)
      list.add(clickcount);

    boolean present_third_count_per_play = true;
    list.add(present_third_count_per_play);
    if (present_third_count_per_play)
      list.add(third_count_per_play);

    return list.hashCode();
  }

  
  public int compareTo(UserReadedAd other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqfts()).compareTo(other.isSetReqfts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqfts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqfts, other.reqfts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqlts()).compareTo(other.isSetReqlts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqlts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqlts, other.reqlts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReaded()).compareTo(other.isSetReaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readed, other.readed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClick()).compareTo(other.isSetClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click, other.click);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadcount()).compareTo(other.isSetReadcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readcount, other.readcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickcount()).compareTo(other.isSetClickcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickcount, other.clickcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThird_count_per_play()).compareTo(other.isSetThird_count_per_play());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThird_count_per_play()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.third_count_per_play, other.third_count_per_play);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("UserReadedAd(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqfts:");
    sb.append(this.reqfts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqlts:");
    sb.append(this.reqlts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readed:");
    if (this.readed == null) {
      sb.append("null");
    } else {
      sb.append(this.readed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("click:");
    if (this.click == null) {
      sb.append("null");
    } else {
      sb.append(this.click);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readcount:");
    if (this.readcount == null) {
      sb.append("null");
    } else {
      sb.append(this.readcount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickcount:");
    if (this.clickcount == null) {
      sb.append("null");
    } else {
      sb.append(this.clickcount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("third_count_per_play:");
    sb.append(this.third_count_per_play);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'reqfts' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reqlts' because it's a primitive and you chose the non-beans generator.
    if (readed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'readed' was not present! Struct: " + toString());
    }
    if (click == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'click' was not present! Struct: " + toString());
    }
    if (readcount == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'readcount' was not present! Struct: " + toString());
    }
    if (clickcount == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickcount' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'third_count_per_play' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserReadedAdStandardSchemeFactory implements SchemeFactory {
    public UserReadedAdStandardScheme getScheme() {
      return new UserReadedAdStandardScheme();
    }
  }

  private static class UserReadedAdStandardScheme extends StandardScheme<UserReadedAd> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserReadedAd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQFTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reqfts = iprot.readI32();
              struct.setReqftsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQLTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reqlts = iprot.readI32();
              struct.setReqltsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // READED
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set334 = iprot.readSetBegin();
                struct.readed = new HashSet<Long>(2*_set334.size);
                long _elem335;
                for (int _i336 = 0; _i336 < _set334.size; ++_i336)
                {
                  _elem335 = iprot.readI64();
                  struct.readed.add(_elem335);
                }
                iprot.readSetEnd();
              }
              struct.setReadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set337 = iprot.readSetBegin();
                struct.click = new HashSet<Long>(2*_set337.size);
                long _elem338;
                for (int _i339 = 0; _i339 < _set337.size; ++_i339)
                {
                  _elem338 = iprot.readI64();
                  struct.click.add(_elem338);
                }
                iprot.readSetEnd();
              }
              struct.setClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // READCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map340 = iprot.readMapBegin();
                struct.readcount = new HashMap<Long,Integer>(2*_map340.size);
                long _key341;
                int _val342;
                for (int _i343 = 0; _i343 < _map340.size; ++_i343)
                {
                  _key341 = iprot.readI64();
                  _val342 = iprot.readI32();
                  struct.readcount.put(_key341, _val342);
                }
                iprot.readMapEnd();
              }
              struct.setReadcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLICKCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map344 = iprot.readMapBegin();
                struct.clickcount = new HashMap<Long,Integer>(2*_map344.size);
                long _key345;
                int _val346;
                for (int _i347 = 0; _i347 < _map344.size; ++_i347)
                {
                  _key345 = iprot.readI64();
                  _val346 = iprot.readI32();
                  struct.clickcount.put(_key345, _val346);
                }
                iprot.readMapEnd();
              }
              struct.setClickcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // THIRD_COUNT_PER_PLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.third_count_per_play = iprot.readI32();
              struct.setThird_count_per_playIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetReqfts()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reqfts' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReqlts()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reqlts' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetThird_count_per_play()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'third_count_per_play' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserReadedAd struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQFTS_FIELD_DESC);
      oprot.writeI32(struct.reqfts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQLTS_FIELD_DESC);
      oprot.writeI32(struct.reqlts);
      oprot.writeFieldEnd();
      if (struct.readed != null) {
        oprot.writeFieldBegin(READED_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.readed.size()));
          for (long _iter348 : struct.readed)
          {
            oprot.writeI64(_iter348);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.click != null) {
        oprot.writeFieldBegin(CLICK_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.click.size()));
          for (long _iter349 : struct.click)
          {
            oprot.writeI64(_iter349);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.readcount != null) {
        oprot.writeFieldBegin(READCOUNT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.readcount.size()));
          for (Map.Entry<Long, Integer> _iter350 : struct.readcount.entrySet())
          {
            oprot.writeI64(_iter350.getKey());
            oprot.writeI32(_iter350.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.clickcount != null) {
        oprot.writeFieldBegin(CLICKCOUNT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.clickcount.size()));
          for (Map.Entry<Long, Integer> _iter351 : struct.clickcount.entrySet())
          {
            oprot.writeI64(_iter351.getKey());
            oprot.writeI32(_iter351.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(THIRD_COUNT_PER_PLAY_FIELD_DESC);
      oprot.writeI32(struct.third_count_per_play);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserReadedAdTupleSchemeFactory implements SchemeFactory {
    public UserReadedAdTupleScheme getScheme() {
      return new UserReadedAdTupleScheme();
    }
  }

  private static class UserReadedAdTupleScheme extends TupleScheme<UserReadedAd> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, UserReadedAd struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      oprot.writeI32(struct.reqfts);
      oprot.writeI32(struct.reqlts);
      {
        oprot.writeI32(struct.readed.size());
        for (long _iter352 : struct.readed)
        {
          oprot.writeI64(_iter352);
        }
      }
      {
        oprot.writeI32(struct.click.size());
        for (long _iter353 : struct.click)
        {
          oprot.writeI64(_iter353);
        }
      }
      {
        oprot.writeI32(struct.readcount.size());
        for (Map.Entry<Long, Integer> _iter354 : struct.readcount.entrySet())
        {
          oprot.writeI64(_iter354.getKey());
          oprot.writeI32(_iter354.getValue());
        }
      }
      {
        oprot.writeI32(struct.clickcount.size());
        for (Map.Entry<Long, Integer> _iter355 : struct.clickcount.entrySet())
        {
          oprot.writeI64(_iter355.getKey());
          oprot.writeI32(_iter355.getValue());
        }
      }
      oprot.writeI32(struct.third_count_per_play);
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, UserReadedAd struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct.reqfts = iprot.readI32();
      struct.setReqftsIsSet(true);
      struct.reqlts = iprot.readI32();
      struct.setReqltsIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set356 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.readed = new HashSet<Long>(2*_set356.size);
        long _elem357;
        for (int _i358 = 0; _i358 < _set356.size; ++_i358)
        {
          _elem357 = iprot.readI64();
          struct.readed.add(_elem357);
        }
      }
      struct.setReadedIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set359 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.click = new HashSet<Long>(2*_set359.size);
        long _elem360;
        for (int _i361 = 0; _i361 < _set359.size; ++_i361)
        {
          _elem360 = iprot.readI64();
          struct.click.add(_elem360);
        }
      }
      struct.setClickIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map362 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.readcount = new HashMap<Long,Integer>(2*_map362.size);
        long _key363;
        int _val364;
        for (int _i365 = 0; _i365 < _map362.size; ++_i365)
        {
          _key363 = iprot.readI64();
          _val364 = iprot.readI32();
          struct.readcount.put(_key363, _val364);
        }
      }
      struct.setReadcountIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map366 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.clickcount = new HashMap<Long,Integer>(2*_map366.size);
        long _key367;
        int _val368;
        for (int _i369 = 0; _i369 < _map366.size; ++_i369)
        {
          _key367 = iprot.readI64();
          _val368 = iprot.readI32();
          struct.clickcount.put(_key367, _val368);
        }
      }
      struct.setClickcountIsSet(true);
      struct.third_count_per_play = iprot.readI32();
      struct.setThird_count_per_playIsSet(true);
    }
  }

}

