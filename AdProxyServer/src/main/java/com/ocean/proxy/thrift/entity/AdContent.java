/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdContent implements org.apache.thrift.TBase<AdContent, AdContent._Fields>, java.io.Serializable, Cloneable, Comparable<AdContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdContent");

  private static final org.apache.thrift.protocol.TField MARKET_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketTitle", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GUIDE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("guideTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IMGLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("imglist", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_EXIST_FIELD_DESC = new org.apache.thrift.protocol.TField("contentExist", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LINKURL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkurl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CP_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpAuthor", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cpVersion", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CP_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpLanguage", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CP_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpPackage", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CP_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("cpIcon", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CP_APK_FIELD_DESC = new org.apache.thrift.protocol.TField("cpApk", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CP_MEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpMemo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CP_IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpImgs", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField PUB_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pubTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField FAVORITES_FIELD_DESC = new org.apache.thrift.protocol.TField("favorites", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField CPCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpclass", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TURN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("turn_type", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PARAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("param_type", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField UNUSED1_FIELD_DESC = new org.apache.thrift.protocol.TField("unused1", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField UNUSED2_FIELD_DESC = new org.apache.thrift.protocol.TField("unused2", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField AD_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("adSource", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField THIRD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("third_url", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField TOP_AD_VIEW_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("topAdViewNum", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField TOP_AD_CLICK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("topAdClickNum", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField TOP_AD_TIME_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("topAdTimeRanges", org.apache.thrift.protocol.TType.LIST, (short)32);
  private static final org.apache.thrift.protocol.TField BUTTON_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buttonName", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField MUTI_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mutiAction", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField IS_USE_THIRD_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("isUseThirdImg", org.apache.thrift.protocol.TType.BOOL, (short)35);
  private static final org.apache.thrift.protocol.TField ADPOS_FIELD_DESC = new org.apache.thrift.protocol.TField("adpos", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField IS_NEED_SRC_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedSrcImg", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField AD_SRC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("adSrcType", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField THIRD_REPORT_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdReportLinks", org.apache.thrift.protocol.TType.MAP, (short)39);
  private static final org.apache.thrift.protocol.TField LOGO_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("logoImg", org.apache.thrift.protocol.TType.STRUCT, (short)40);
  private static final org.apache.thrift.protocol.TField AD_VID_FIELD_DESC = new org.apache.thrift.protocol.TField("adVid", org.apache.thrift.protocol.TType.STRUCT, (short)41);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementType", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementPrice", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField AD_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("adSrc", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField ID_FROM_AD_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("idFromAdSrc", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField IS_HTML_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("isHtmlAd", org.apache.thrift.protocol.TType.BOOL, (short)46);
  private static final org.apache.thrift.protocol.TField HTML_SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("htmlSnippet", org.apache.thrift.protocol.TType.STRING, (short)47);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdContentTupleSchemeFactory());
  }

  public String marketTitle; // required
  public String guideTitle; // optional
  public int type; // required
  public List<AdImg> imglist; // optional
  public int contentExist; // optional
  public String content; // optional
  public String linkurl; // optional
  public String phone; // optional
  public List<Position> position; // optional
  public String cpName; // optional
  public String cpAuthor; // optional
  public String cpVersion; // optional
  public String cpLanguage; // optional
  public String cpPackage; // optional
  public String cpIcon; // optional
  public String cpApk; // optional
  public String cpMemo; // optional
  public List<String> cpImgs; // optional
  public long adId; // required
  public long pubTime; // required
  public long favorites; // required
  public String cpclass; // optional
  public int turn_type; // optional
  public int param_type; // optional
  public int unused1; // optional
  public int unused2; // optional
  public String adSource; // optional
  public String action; // optional
  public String third_url; // optional
  public int topAdViewNum; // optional
  public int topAdClickNum; // optional
  public List<LimitTimeRangeSec> topAdTimeRanges; // optional
  public String buttonName; // optional
  public List<AdMutiAction> mutiAction; // optional
  public boolean isUseThirdImg; // optional
  public int adpos; // optional
  public boolean isNeedSrcImg; // optional
  public int adSrcType; // optional
  public Map<String,List<String>> thirdReportLinks; // optional
  public AdImg logoImg; // optional
  public AdVid adVid; // optional
  /**
   * 
   * @see SettlementType
   */
  public SettlementType settlementType; // optional
  public int settlementPrice; // optional
  public int adSrc; // optional
  public String idFromAdSrc; // optional
  public boolean isHtmlAd; // optional
  public String htmlSnippet; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MARKET_TITLE((short)1, "marketTitle"),
    GUIDE_TITLE((short)2, "guideTitle"),
    TYPE((short)3, "type"),
    IMGLIST((short)4, "imglist"),
    CONTENT_EXIST((short)5, "contentExist"),
    CONTENT((short)6, "content"),
    LINKURL((short)7, "linkurl"),
    PHONE((short)8, "phone"),
    POSITION((short)9, "position"),
    CP_NAME((short)10, "cpName"),
    CP_AUTHOR((short)11, "cpAuthor"),
    CP_VERSION((short)12, "cpVersion"),
    CP_LANGUAGE((short)13, "cpLanguage"),
    CP_PACKAGE((short)14, "cpPackage"),
    CP_ICON((short)15, "cpIcon"),
    CP_APK((short)16, "cpApk"),
    CP_MEMO((short)17, "cpMemo"),
    CP_IMGS((short)18, "cpImgs"),
    AD_ID((short)19, "adId"),
    PUB_TIME((short)20, "pubTime"),
    FAVORITES((short)21, "favorites"),
    CPCLASS((short)22, "cpclass"),
    TURN_TYPE((short)23, "turn_type"),
    PARAM_TYPE((short)24, "param_type"),
    UNUSED1((short)25, "unused1"),
    UNUSED2((short)26, "unused2"),
    AD_SOURCE((short)27, "adSource"),
    ACTION((short)28, "action"),
    THIRD_URL((short)29, "third_url"),
    TOP_AD_VIEW_NUM((short)30, "topAdViewNum"),
    TOP_AD_CLICK_NUM((short)31, "topAdClickNum"),
    TOP_AD_TIME_RANGES((short)32, "topAdTimeRanges"),
    BUTTON_NAME((short)33, "buttonName"),
    MUTI_ACTION((short)34, "mutiAction"),
    IS_USE_THIRD_IMG((short)35, "isUseThirdImg"),
    ADPOS((short)36, "adpos"),
    IS_NEED_SRC_IMG((short)37, "isNeedSrcImg"),
    AD_SRC_TYPE((short)38, "adSrcType"),
    THIRD_REPORT_LINKS((short)39, "thirdReportLinks"),
    LOGO_IMG((short)40, "logoImg"),
    AD_VID((short)41, "adVid"),
    /**
     * 
     * @see SettlementType
     */
    SETTLEMENT_TYPE((short)42, "settlementType"),
    SETTLEMENT_PRICE((short)43, "settlementPrice"),
    AD_SRC((short)44, "adSrc"),
    ID_FROM_AD_SRC((short)45, "idFromAdSrc"),
    IS_HTML_AD((short)46, "isHtmlAd"),
    HTML_SNIPPET((short)47, "htmlSnippet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MARKET_TITLE
          return MARKET_TITLE;
        case 2: // GUIDE_TITLE
          return GUIDE_TITLE;
        case 3: // TYPE
          return TYPE;
        case 4: // IMGLIST
          return IMGLIST;
        case 5: // CONTENT_EXIST
          return CONTENT_EXIST;
        case 6: // CONTENT
          return CONTENT;
        case 7: // LINKURL
          return LINKURL;
        case 8: // PHONE
          return PHONE;
        case 9: // POSITION
          return POSITION;
        case 10: // CP_NAME
          return CP_NAME;
        case 11: // CP_AUTHOR
          return CP_AUTHOR;
        case 12: // CP_VERSION
          return CP_VERSION;
        case 13: // CP_LANGUAGE
          return CP_LANGUAGE;
        case 14: // CP_PACKAGE
          return CP_PACKAGE;
        case 15: // CP_ICON
          return CP_ICON;
        case 16: // CP_APK
          return CP_APK;
        case 17: // CP_MEMO
          return CP_MEMO;
        case 18: // CP_IMGS
          return CP_IMGS;
        case 19: // AD_ID
          return AD_ID;
        case 20: // PUB_TIME
          return PUB_TIME;
        case 21: // FAVORITES
          return FAVORITES;
        case 22: // CPCLASS
          return CPCLASS;
        case 23: // TURN_TYPE
          return TURN_TYPE;
        case 24: // PARAM_TYPE
          return PARAM_TYPE;
        case 25: // UNUSED1
          return UNUSED1;
        case 26: // UNUSED2
          return UNUSED2;
        case 27: // AD_SOURCE
          return AD_SOURCE;
        case 28: // ACTION
          return ACTION;
        case 29: // THIRD_URL
          return THIRD_URL;
        case 30: // TOP_AD_VIEW_NUM
          return TOP_AD_VIEW_NUM;
        case 31: // TOP_AD_CLICK_NUM
          return TOP_AD_CLICK_NUM;
        case 32: // TOP_AD_TIME_RANGES
          return TOP_AD_TIME_RANGES;
        case 33: // BUTTON_NAME
          return BUTTON_NAME;
        case 34: // MUTI_ACTION
          return MUTI_ACTION;
        case 35: // IS_USE_THIRD_IMG
          return IS_USE_THIRD_IMG;
        case 36: // ADPOS
          return ADPOS;
        case 37: // IS_NEED_SRC_IMG
          return IS_NEED_SRC_IMG;
        case 38: // AD_SRC_TYPE
          return AD_SRC_TYPE;
        case 39: // THIRD_REPORT_LINKS
          return THIRD_REPORT_LINKS;
        case 40: // LOGO_IMG
          return LOGO_IMG;
        case 41: // AD_VID
          return AD_VID;
        case 42: // SETTLEMENT_TYPE
          return SETTLEMENT_TYPE;
        case 43: // SETTLEMENT_PRICE
          return SETTLEMENT_PRICE;
        case 44: // AD_SRC
          return AD_SRC;
        case 45: // ID_FROM_AD_SRC
          return ID_FROM_AD_SRC;
        case 46: // IS_HTML_AD
          return IS_HTML_AD;
        case 47: // HTML_SNIPPET
          return HTML_SNIPPET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __CONTENTEXIST_ISSET_ID = 1;
  private static final int __ADID_ISSET_ID = 2;
  private static final int __PUBTIME_ISSET_ID = 3;
  private static final int __FAVORITES_ISSET_ID = 4;
  private static final int __TURN_TYPE_ISSET_ID = 5;
  private static final int __PARAM_TYPE_ISSET_ID = 6;
  private static final int __UNUSED1_ISSET_ID = 7;
  private static final int __UNUSED2_ISSET_ID = 8;
  private static final int __TOPADVIEWNUM_ISSET_ID = 9;
  private static final int __TOPADCLICKNUM_ISSET_ID = 10;
  private static final int __ISUSETHIRDIMG_ISSET_ID = 11;
  private static final int __ADPOS_ISSET_ID = 12;
  private static final int __ISNEEDSRCIMG_ISSET_ID = 13;
  private static final int __ADSRCTYPE_ISSET_ID = 14;
  private static final int __SETTLEMENTPRICE_ISSET_ID = 15;
  private static final int __ADSRC_ISSET_ID = 16;
  private static final int __ISHTMLAD_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GUIDE_TITLE,_Fields.IMGLIST,_Fields.CONTENT_EXIST,_Fields.CONTENT,_Fields.LINKURL,_Fields.PHONE,_Fields.POSITION,_Fields.CP_NAME,_Fields.CP_AUTHOR,_Fields.CP_VERSION,_Fields.CP_LANGUAGE,_Fields.CP_PACKAGE,_Fields.CP_ICON,_Fields.CP_APK,_Fields.CP_MEMO,_Fields.CP_IMGS,_Fields.CPCLASS,_Fields.TURN_TYPE,_Fields.PARAM_TYPE,_Fields.UNUSED1,_Fields.UNUSED2,_Fields.AD_SOURCE,_Fields.ACTION,_Fields.THIRD_URL,_Fields.TOP_AD_VIEW_NUM,_Fields.TOP_AD_CLICK_NUM,_Fields.TOP_AD_TIME_RANGES,_Fields.BUTTON_NAME,_Fields.MUTI_ACTION,_Fields.IS_USE_THIRD_IMG,_Fields.ADPOS,_Fields.IS_NEED_SRC_IMG,_Fields.AD_SRC_TYPE,_Fields.THIRD_REPORT_LINKS,_Fields.LOGO_IMG,_Fields.AD_VID,_Fields.SETTLEMENT_TYPE,_Fields.SETTLEMENT_PRICE,_Fields.AD_SRC,_Fields.ID_FROM_AD_SRC,_Fields.IS_HTML_AD,_Fields.HTML_SNIPPET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MARKET_TITLE, new org.apache.thrift.meta_data.FieldMetaData("marketTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUIDE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("guideTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMGLIST, new org.apache.thrift.meta_data.FieldMetaData("imglist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdImg.class))));
    tmpMap.put(_Fields.CONTENT_EXIST, new org.apache.thrift.meta_data.FieldMetaData("contentExist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINKURL, new org.apache.thrift.meta_data.FieldMetaData("linkurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
    tmpMap.put(_Fields.CP_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("cpAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("cpVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("cpLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("cpPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_ICON, new org.apache.thrift.meta_data.FieldMetaData("cpIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_APK, new org.apache.thrift.meta_data.FieldMetaData("cpApk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_MEMO, new org.apache.thrift.meta_data.FieldMetaData("cpMemo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_IMGS, new org.apache.thrift.meta_data.FieldMetaData("cpImgs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUB_TIME, new org.apache.thrift.meta_data.FieldMetaData("pubTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAVORITES, new org.apache.thrift.meta_data.FieldMetaData("favorites", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPCLASS, new org.apache.thrift.meta_data.FieldMetaData("cpclass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TURN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("turn_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("param_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNUSED1, new org.apache.thrift.meta_data.FieldMetaData("unused1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNUSED2, new org.apache.thrift.meta_data.FieldMetaData("unused2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("adSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_URL, new org.apache.thrift.meta_data.FieldMetaData("third_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOP_AD_VIEW_NUM, new org.apache.thrift.meta_data.FieldMetaData("topAdViewNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOP_AD_CLICK_NUM, new org.apache.thrift.meta_data.FieldMetaData("topAdClickNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOP_AD_TIME_RANGES, new org.apache.thrift.meta_data.FieldMetaData("topAdTimeRanges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitTimeRangeSec.class))));
    tmpMap.put(_Fields.BUTTON_NAME, new org.apache.thrift.meta_data.FieldMetaData("buttonName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUTI_ACTION, new org.apache.thrift.meta_data.FieldMetaData("mutiAction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdMutiAction.class))));
    tmpMap.put(_Fields.IS_USE_THIRD_IMG, new org.apache.thrift.meta_data.FieldMetaData("isUseThirdImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADPOS, new org.apache.thrift.meta_data.FieldMetaData("adpos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_SRC_IMG, new org.apache.thrift.meta_data.FieldMetaData("isNeedSrcImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AD_SRC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("adSrcType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_REPORT_LINKS, new org.apache.thrift.meta_data.FieldMetaData("thirdReportLinks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.LOGO_IMG, new org.apache.thrift.meta_data.FieldMetaData("logoImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdImg.class)));
    tmpMap.put(_Fields.AD_VID, new org.apache.thrift.meta_data.FieldMetaData("adVid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdVid.class)));
    tmpMap.put(_Fields.SETTLEMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("settlementType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SettlementType.class)));
    tmpMap.put(_Fields.SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("settlementPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_SRC, new org.apache.thrift.meta_data.FieldMetaData("adSrc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_FROM_AD_SRC, new org.apache.thrift.meta_data.FieldMetaData("idFromAdSrc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HTML_AD, new org.apache.thrift.meta_data.FieldMetaData("isHtmlAd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HTML_SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("htmlSnippet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdContent.class, metaDataMap);
  }

  public AdContent() {
    this.isUseThirdImg = false;

    this.isNeedSrcImg = false;

    this.adSrcType = 0;

  }

  public AdContent(
    String marketTitle,
    int type,
    long adId,
    long pubTime,
    long favorites)
  {
    this();
    this.marketTitle = marketTitle;
    this.type = type;
    setTypeIsSet(true);
    this.adId = adId;
    setAdIdIsSet(true);
    this.pubTime = pubTime;
    setPubTimeIsSet(true);
    this.favorites = favorites;
    setFavoritesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdContent(AdContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMarketTitle()) {
      this.marketTitle = other.marketTitle;
    }
    if (other.isSetGuideTitle()) {
      this.guideTitle = other.guideTitle;
    }
    this.type = other.type;
    if (other.isSetImglist()) {
      List<AdImg> __this__imglist = new ArrayList<AdImg>(other.imglist.size());
      for (AdImg other_element : other.imglist) {
        __this__imglist.add(new AdImg(other_element));
      }
      this.imglist = __this__imglist;
    }
    this.contentExist = other.contentExist;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetLinkurl()) {
      this.linkurl = other.linkurl;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetPosition()) {
      List<Position> __this__position = new ArrayList<Position>(other.position.size());
      for (Position other_element : other.position) {
        __this__position.add(new Position(other_element));
      }
      this.position = __this__position;
    }
    if (other.isSetCpName()) {
      this.cpName = other.cpName;
    }
    if (other.isSetCpAuthor()) {
      this.cpAuthor = other.cpAuthor;
    }
    if (other.isSetCpVersion()) {
      this.cpVersion = other.cpVersion;
    }
    if (other.isSetCpLanguage()) {
      this.cpLanguage = other.cpLanguage;
    }
    if (other.isSetCpPackage()) {
      this.cpPackage = other.cpPackage;
    }
    if (other.isSetCpIcon()) {
      this.cpIcon = other.cpIcon;
    }
    if (other.isSetCpApk()) {
      this.cpApk = other.cpApk;
    }
    if (other.isSetCpMemo()) {
      this.cpMemo = other.cpMemo;
    }
    if (other.isSetCpImgs()) {
      List<String> __this__cpImgs = new ArrayList<String>(other.cpImgs);
      this.cpImgs = __this__cpImgs;
    }
    this.adId = other.adId;
    this.pubTime = other.pubTime;
    this.favorites = other.favorites;
    if (other.isSetCpclass()) {
      this.cpclass = other.cpclass;
    }
    this.turn_type = other.turn_type;
    this.param_type = other.param_type;
    this.unused1 = other.unused1;
    this.unused2 = other.unused2;
    if (other.isSetAdSource()) {
      this.adSource = other.adSource;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetThird_url()) {
      this.third_url = other.third_url;
    }
    this.topAdViewNum = other.topAdViewNum;
    this.topAdClickNum = other.topAdClickNum;
    if (other.isSetTopAdTimeRanges()) {
      List<LimitTimeRangeSec> __this__topAdTimeRanges = new ArrayList<LimitTimeRangeSec>(other.topAdTimeRanges.size());
      for (LimitTimeRangeSec other_element : other.topAdTimeRanges) {
        __this__topAdTimeRanges.add(new LimitTimeRangeSec(other_element));
      }
      this.topAdTimeRanges = __this__topAdTimeRanges;
    }
    if (other.isSetButtonName()) {
      this.buttonName = other.buttonName;
    }
    if (other.isSetMutiAction()) {
      List<AdMutiAction> __this__mutiAction = new ArrayList<AdMutiAction>(other.mutiAction.size());
      for (AdMutiAction other_element : other.mutiAction) {
        __this__mutiAction.add(new AdMutiAction(other_element));
      }
      this.mutiAction = __this__mutiAction;
    }
    this.isUseThirdImg = other.isUseThirdImg;
    this.adpos = other.adpos;
    this.isNeedSrcImg = other.isNeedSrcImg;
    this.adSrcType = other.adSrcType;
    if (other.isSetThirdReportLinks()) {
      Map<String,List<String>> __this__thirdReportLinks = new HashMap<String,List<String>>(other.thirdReportLinks.size());
      for (Map.Entry<String, List<String>> other_element : other.thirdReportLinks.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__thirdReportLinks_copy_key = other_element_key;

        List<String> __this__thirdReportLinks_copy_value = new ArrayList<String>(other_element_value);

        __this__thirdReportLinks.put(__this__thirdReportLinks_copy_key, __this__thirdReportLinks_copy_value);
      }
      this.thirdReportLinks = __this__thirdReportLinks;
    }
    if (other.isSetLogoImg()) {
      this.logoImg = new AdImg(other.logoImg);
    }
    if (other.isSetAdVid()) {
      this.adVid = new AdVid(other.adVid);
    }
    if (other.isSetSettlementType()) {
      this.settlementType = other.settlementType;
    }
    this.settlementPrice = other.settlementPrice;
    this.adSrc = other.adSrc;
    if (other.isSetIdFromAdSrc()) {
      this.idFromAdSrc = other.idFromAdSrc;
    }
    this.isHtmlAd = other.isHtmlAd;
    if (other.isSetHtmlSnippet()) {
      this.htmlSnippet = other.htmlSnippet;
    }
  }

  public AdContent deepCopy() {
    return new AdContent(this);
  }

  public void clear() {
    this.marketTitle = null;
    this.guideTitle = null;
    setTypeIsSet(false);
    this.type = 0;
    this.imglist = null;
    setContentExistIsSet(false);
    this.contentExist = 0;
    this.content = null;
    this.linkurl = null;
    this.phone = null;
    this.position = null;
    this.cpName = null;
    this.cpAuthor = null;
    this.cpVersion = null;
    this.cpLanguage = null;
    this.cpPackage = null;
    this.cpIcon = null;
    this.cpApk = null;
    this.cpMemo = null;
    this.cpImgs = null;
    setAdIdIsSet(false);
    this.adId = 0;
    setPubTimeIsSet(false);
    this.pubTime = 0;
    setFavoritesIsSet(false);
    this.favorites = 0;
    this.cpclass = null;
    setTurn_typeIsSet(false);
    this.turn_type = 0;
    setParam_typeIsSet(false);
    this.param_type = 0;
    setUnused1IsSet(false);
    this.unused1 = 0;
    setUnused2IsSet(false);
    this.unused2 = 0;
    this.adSource = null;
    this.action = null;
    this.third_url = null;
    setTopAdViewNumIsSet(false);
    this.topAdViewNum = 0;
    setTopAdClickNumIsSet(false);
    this.topAdClickNum = 0;
    this.topAdTimeRanges = null;
    this.buttonName = null;
    this.mutiAction = null;
    this.isUseThirdImg = false;

    setAdposIsSet(false);
    this.adpos = 0;
    this.isNeedSrcImg = false;

    this.adSrcType = 0;

    this.thirdReportLinks = null;
    this.logoImg = null;
    this.adVid = null;
    this.settlementType = null;
    setSettlementPriceIsSet(false);
    this.settlementPrice = 0;
    setAdSrcIsSet(false);
    this.adSrc = 0;
    this.idFromAdSrc = null;
    setIsHtmlAdIsSet(false);
    this.isHtmlAd = false;
    this.htmlSnippet = null;
  }

  public String getMarketTitle() {
    return this.marketTitle;
  }

  public AdContent setMarketTitle(String marketTitle) {
    this.marketTitle = marketTitle;
    return this;
  }

  public void unsetMarketTitle() {
    this.marketTitle = null;
  }

  /** Returns true if field marketTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketTitle() {
    return this.marketTitle != null;
  }

  public void setMarketTitleIsSet(boolean value) {
    if (!value) {
      this.marketTitle = null;
    }
  }

  public String getGuideTitle() {
    return this.guideTitle;
  }

  public AdContent setGuideTitle(String guideTitle) {
    this.guideTitle = guideTitle;
    return this;
  }

  public void unsetGuideTitle() {
    this.guideTitle = null;
  }

  /** Returns true if field guideTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetGuideTitle() {
    return this.guideTitle != null;
  }

  public void setGuideTitleIsSet(boolean value) {
    if (!value) {
      this.guideTitle = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public AdContent setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getImglistSize() {
    return (this.imglist == null) ? 0 : this.imglist.size();
  }

  public java.util.Iterator<AdImg> getImglistIterator() {
    return (this.imglist == null) ? null : this.imglist.iterator();
  }

  public void addToImglist(AdImg elem) {
    if (this.imglist == null) {
      this.imglist = new ArrayList<AdImg>();
    }
    this.imglist.add(elem);
  }

  public List<AdImg> getImglist() {
    return this.imglist;
  }

  public AdContent setImglist(List<AdImg> imglist) {
    this.imglist = imglist;
    return this;
  }

  public void unsetImglist() {
    this.imglist = null;
  }

  /** Returns true if field imglist is set (has been assigned a value) and false otherwise */
  public boolean isSetImglist() {
    return this.imglist != null;
  }

  public void setImglistIsSet(boolean value) {
    if (!value) {
      this.imglist = null;
    }
  }

  public int getContentExist() {
    return this.contentExist;
  }

  public AdContent setContentExist(int contentExist) {
    this.contentExist = contentExist;
    setContentExistIsSet(true);
    return this;
  }

  public void unsetContentExist() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTEXIST_ISSET_ID);
  }

  /** Returns true if field contentExist is set (has been assigned a value) and false otherwise */
  public boolean isSetContentExist() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTEXIST_ISSET_ID);
  }

  public void setContentExistIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTEXIST_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public AdContent setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getLinkurl() {
    return this.linkurl;
  }

  public AdContent setLinkurl(String linkurl) {
    this.linkurl = linkurl;
    return this;
  }

  public void unsetLinkurl() {
    this.linkurl = null;
  }

  /** Returns true if field linkurl is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkurl() {
    return this.linkurl != null;
  }

  public void setLinkurlIsSet(boolean value) {
    if (!value) {
      this.linkurl = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public AdContent setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public int getPositionSize() {
    return (this.position == null) ? 0 : this.position.size();
  }

  public java.util.Iterator<Position> getPositionIterator() {
    return (this.position == null) ? null : this.position.iterator();
  }

  public void addToPosition(Position elem) {
    if (this.position == null) {
      this.position = new ArrayList<Position>();
    }
    this.position.add(elem);
  }

  public List<Position> getPosition() {
    return this.position;
  }

  public AdContent setPosition(List<Position> position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public String getCpName() {
    return this.cpName;
  }

  public AdContent setCpName(String cpName) {
    this.cpName = cpName;
    return this;
  }

  public void unsetCpName() {
    this.cpName = null;
  }

  /** Returns true if field cpName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpName() {
    return this.cpName != null;
  }

  public void setCpNameIsSet(boolean value) {
    if (!value) {
      this.cpName = null;
    }
  }

  public String getCpAuthor() {
    return this.cpAuthor;
  }

  public AdContent setCpAuthor(String cpAuthor) {
    this.cpAuthor = cpAuthor;
    return this;
  }

  public void unsetCpAuthor() {
    this.cpAuthor = null;
  }

  /** Returns true if field cpAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetCpAuthor() {
    return this.cpAuthor != null;
  }

  public void setCpAuthorIsSet(boolean value) {
    if (!value) {
      this.cpAuthor = null;
    }
  }

  public String getCpVersion() {
    return this.cpVersion;
  }

  public AdContent setCpVersion(String cpVersion) {
    this.cpVersion = cpVersion;
    return this;
  }

  public void unsetCpVersion() {
    this.cpVersion = null;
  }

  /** Returns true if field cpVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetCpVersion() {
    return this.cpVersion != null;
  }

  public void setCpVersionIsSet(boolean value) {
    if (!value) {
      this.cpVersion = null;
    }
  }

  public String getCpLanguage() {
    return this.cpLanguage;
  }

  public AdContent setCpLanguage(String cpLanguage) {
    this.cpLanguage = cpLanguage;
    return this;
  }

  public void unsetCpLanguage() {
    this.cpLanguage = null;
  }

  /** Returns true if field cpLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpLanguage() {
    return this.cpLanguage != null;
  }

  public void setCpLanguageIsSet(boolean value) {
    if (!value) {
      this.cpLanguage = null;
    }
  }

  public String getCpPackage() {
    return this.cpPackage;
  }

  public AdContent setCpPackage(String cpPackage) {
    this.cpPackage = cpPackage;
    return this;
  }

  public void unsetCpPackage() {
    this.cpPackage = null;
  }

  /** Returns true if field cpPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpPackage() {
    return this.cpPackage != null;
  }

  public void setCpPackageIsSet(boolean value) {
    if (!value) {
      this.cpPackage = null;
    }
  }

  public String getCpIcon() {
    return this.cpIcon;
  }

  public AdContent setCpIcon(String cpIcon) {
    this.cpIcon = cpIcon;
    return this;
  }

  public void unsetCpIcon() {
    this.cpIcon = null;
  }

  /** Returns true if field cpIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetCpIcon() {
    return this.cpIcon != null;
  }

  public void setCpIconIsSet(boolean value) {
    if (!value) {
      this.cpIcon = null;
    }
  }

  public String getCpApk() {
    return this.cpApk;
  }

  public AdContent setCpApk(String cpApk) {
    this.cpApk = cpApk;
    return this;
  }

  public void unsetCpApk() {
    this.cpApk = null;
  }

  /** Returns true if field cpApk is set (has been assigned a value) and false otherwise */
  public boolean isSetCpApk() {
    return this.cpApk != null;
  }

  public void setCpApkIsSet(boolean value) {
    if (!value) {
      this.cpApk = null;
    }
  }

  public String getCpMemo() {
    return this.cpMemo;
  }

  public AdContent setCpMemo(String cpMemo) {
    this.cpMemo = cpMemo;
    return this;
  }

  public void unsetCpMemo() {
    this.cpMemo = null;
  }

  /** Returns true if field cpMemo is set (has been assigned a value) and false otherwise */
  public boolean isSetCpMemo() {
    return this.cpMemo != null;
  }

  public void setCpMemoIsSet(boolean value) {
    if (!value) {
      this.cpMemo = null;
    }
  }

  public int getCpImgsSize() {
    return (this.cpImgs == null) ? 0 : this.cpImgs.size();
  }

  public java.util.Iterator<String> getCpImgsIterator() {
    return (this.cpImgs == null) ? null : this.cpImgs.iterator();
  }

  public void addToCpImgs(String elem) {
    if (this.cpImgs == null) {
      this.cpImgs = new ArrayList<String>();
    }
    this.cpImgs.add(elem);
  }

  public List<String> getCpImgs() {
    return this.cpImgs;
  }

  public AdContent setCpImgs(List<String> cpImgs) {
    this.cpImgs = cpImgs;
    return this;
  }

  public void unsetCpImgs() {
    this.cpImgs = null;
  }

  /** Returns true if field cpImgs is set (has been assigned a value) and false otherwise */
  public boolean isSetCpImgs() {
    return this.cpImgs != null;
  }

  public void setCpImgsIsSet(boolean value) {
    if (!value) {
      this.cpImgs = null;
    }
  }

  public long getAdId() {
    return this.adId;
  }

  public AdContent setAdId(long adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public long getPubTime() {
    return this.pubTime;
  }

  public AdContent setPubTime(long pubTime) {
    this.pubTime = pubTime;
    setPubTimeIsSet(true);
    return this;
  }

  public void unsetPubTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBTIME_ISSET_ID);
  }

  /** Returns true if field pubTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPubTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBTIME_ISSET_ID);
  }

  public void setPubTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBTIME_ISSET_ID, value);
  }

  public long getFavorites() {
    return this.favorites;
  }

  public AdContent setFavorites(long favorites) {
    this.favorites = favorites;
    setFavoritesIsSet(true);
    return this;
  }

  public void unsetFavorites() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVORITES_ISSET_ID);
  }

  /** Returns true if field favorites is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorites() {
    return EncodingUtils.testBit(__isset_bitfield, __FAVORITES_ISSET_ID);
  }

  public void setFavoritesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVORITES_ISSET_ID, value);
  }

  public String getCpclass() {
    return this.cpclass;
  }

  public AdContent setCpclass(String cpclass) {
    this.cpclass = cpclass;
    return this;
  }

  public void unsetCpclass() {
    this.cpclass = null;
  }

  /** Returns true if field cpclass is set (has been assigned a value) and false otherwise */
  public boolean isSetCpclass() {
    return this.cpclass != null;
  }

  public void setCpclassIsSet(boolean value) {
    if (!value) {
      this.cpclass = null;
    }
  }

  public int getTurn_type() {
    return this.turn_type;
  }

  public AdContent setTurn_type(int turn_type) {
    this.turn_type = turn_type;
    setTurn_typeIsSet(true);
    return this;
  }

  public void unsetTurn_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURN_TYPE_ISSET_ID);
  }

  /** Returns true if field turn_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTurn_type() {
    return EncodingUtils.testBit(__isset_bitfield, __TURN_TYPE_ISSET_ID);
  }

  public void setTurn_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURN_TYPE_ISSET_ID, value);
  }

  public int getParam_type() {
    return this.param_type;
  }

  public AdContent setParam_type(int param_type) {
    this.param_type = param_type;
    setParam_typeIsSet(true);
    return this;
  }

  public void unsetParam_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM_TYPE_ISSET_ID);
  }

  /** Returns true if field param_type is set (has been assigned a value) and false otherwise */
  public boolean isSetParam_type() {
    return EncodingUtils.testBit(__isset_bitfield, __PARAM_TYPE_ISSET_ID);
  }

  public void setParam_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM_TYPE_ISSET_ID, value);
  }

  public int getUnused1() {
    return this.unused1;
  }

  public AdContent setUnused1(int unused1) {
    this.unused1 = unused1;
    setUnused1IsSet(true);
    return this;
  }

  public void unsetUnused1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNUSED1_ISSET_ID);
  }

  /** Returns true if field unused1 is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused1() {
    return EncodingUtils.testBit(__isset_bitfield, __UNUSED1_ISSET_ID);
  }

  public void setUnused1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNUSED1_ISSET_ID, value);
  }

  public int getUnused2() {
    return this.unused2;
  }

  public AdContent setUnused2(int unused2) {
    this.unused2 = unused2;
    setUnused2IsSet(true);
    return this;
  }

  public void unsetUnused2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNUSED2_ISSET_ID);
  }

  /** Returns true if field unused2 is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused2() {
    return EncodingUtils.testBit(__isset_bitfield, __UNUSED2_ISSET_ID);
  }

  public void setUnused2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNUSED2_ISSET_ID, value);
  }

  public String getAdSource() {
    return this.adSource;
  }

  public AdContent setAdSource(String adSource) {
    this.adSource = adSource;
    return this;
  }

  public void unsetAdSource() {
    this.adSource = null;
  }

  /** Returns true if field adSource is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSource() {
    return this.adSource != null;
  }

  public void setAdSourceIsSet(boolean value) {
    if (!value) {
      this.adSource = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public AdContent setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public String getThird_url() {
    return this.third_url;
  }

  public AdContent setThird_url(String third_url) {
    this.third_url = third_url;
    return this;
  }

  public void unsetThird_url() {
    this.third_url = null;
  }

  /** Returns true if field third_url is set (has been assigned a value) and false otherwise */
  public boolean isSetThird_url() {
    return this.third_url != null;
  }

  public void setThird_urlIsSet(boolean value) {
    if (!value) {
      this.third_url = null;
    }
  }

  public int getTopAdViewNum() {
    return this.topAdViewNum;
  }

  public AdContent setTopAdViewNum(int topAdViewNum) {
    this.topAdViewNum = topAdViewNum;
    setTopAdViewNumIsSet(true);
    return this;
  }

  public void unsetTopAdViewNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPADVIEWNUM_ISSET_ID);
  }

  /** Returns true if field topAdViewNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTopAdViewNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPADVIEWNUM_ISSET_ID);
  }

  public void setTopAdViewNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPADVIEWNUM_ISSET_ID, value);
  }

  public int getTopAdClickNum() {
    return this.topAdClickNum;
  }

  public AdContent setTopAdClickNum(int topAdClickNum) {
    this.topAdClickNum = topAdClickNum;
    setTopAdClickNumIsSet(true);
    return this;
  }

  public void unsetTopAdClickNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPADCLICKNUM_ISSET_ID);
  }

  /** Returns true if field topAdClickNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTopAdClickNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPADCLICKNUM_ISSET_ID);
  }

  public void setTopAdClickNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPADCLICKNUM_ISSET_ID, value);
  }

  public int getTopAdTimeRangesSize() {
    return (this.topAdTimeRanges == null) ? 0 : this.topAdTimeRanges.size();
  }

  public java.util.Iterator<LimitTimeRangeSec> getTopAdTimeRangesIterator() {
    return (this.topAdTimeRanges == null) ? null : this.topAdTimeRanges.iterator();
  }

  public void addToTopAdTimeRanges(LimitTimeRangeSec elem) {
    if (this.topAdTimeRanges == null) {
      this.topAdTimeRanges = new ArrayList<LimitTimeRangeSec>();
    }
    this.topAdTimeRanges.add(elem);
  }

  public List<LimitTimeRangeSec> getTopAdTimeRanges() {
    return this.topAdTimeRanges;
  }

  public AdContent setTopAdTimeRanges(List<LimitTimeRangeSec> topAdTimeRanges) {
    this.topAdTimeRanges = topAdTimeRanges;
    return this;
  }

  public void unsetTopAdTimeRanges() {
    this.topAdTimeRanges = null;
  }

  /** Returns true if field topAdTimeRanges is set (has been assigned a value) and false otherwise */
  public boolean isSetTopAdTimeRanges() {
    return this.topAdTimeRanges != null;
  }

  public void setTopAdTimeRangesIsSet(boolean value) {
    if (!value) {
      this.topAdTimeRanges = null;
    }
  }

  public String getButtonName() {
    return this.buttonName;
  }

  public AdContent setButtonName(String buttonName) {
    this.buttonName = buttonName;
    return this;
  }

  public void unsetButtonName() {
    this.buttonName = null;
  }

  /** Returns true if field buttonName is set (has been assigned a value) and false otherwise */
  public boolean isSetButtonName() {
    return this.buttonName != null;
  }

  public void setButtonNameIsSet(boolean value) {
    if (!value) {
      this.buttonName = null;
    }
  }

  public int getMutiActionSize() {
    return (this.mutiAction == null) ? 0 : this.mutiAction.size();
  }

  public java.util.Iterator<AdMutiAction> getMutiActionIterator() {
    return (this.mutiAction == null) ? null : this.mutiAction.iterator();
  }

  public void addToMutiAction(AdMutiAction elem) {
    if (this.mutiAction == null) {
      this.mutiAction = new ArrayList<AdMutiAction>();
    }
    this.mutiAction.add(elem);
  }

  public List<AdMutiAction> getMutiAction() {
    return this.mutiAction;
  }

  public AdContent setMutiAction(List<AdMutiAction> mutiAction) {
    this.mutiAction = mutiAction;
    return this;
  }

  public void unsetMutiAction() {
    this.mutiAction = null;
  }

  /** Returns true if field mutiAction is set (has been assigned a value) and false otherwise */
  public boolean isSetMutiAction() {
    return this.mutiAction != null;
  }

  public void setMutiActionIsSet(boolean value) {
    if (!value) {
      this.mutiAction = null;
    }
  }

  public boolean isIsUseThirdImg() {
    return this.isUseThirdImg;
  }

  public AdContent setIsUseThirdImg(boolean isUseThirdImg) {
    this.isUseThirdImg = isUseThirdImg;
    setIsUseThirdImgIsSet(true);
    return this;
  }

  public void unsetIsUseThirdImg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSETHIRDIMG_ISSET_ID);
  }

  /** Returns true if field isUseThirdImg is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUseThirdImg() {
    return EncodingUtils.testBit(__isset_bitfield, __ISUSETHIRDIMG_ISSET_ID);
  }

  public void setIsUseThirdImgIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSETHIRDIMG_ISSET_ID, value);
  }

  public int getAdpos() {
    return this.adpos;
  }

  public AdContent setAdpos(int adpos) {
    this.adpos = adpos;
    setAdposIsSet(true);
    return this;
  }

  public void unsetAdpos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADPOS_ISSET_ID);
  }

  /** Returns true if field adpos is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpos() {
    return EncodingUtils.testBit(__isset_bitfield, __ADPOS_ISSET_ID);
  }

  public void setAdposIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADPOS_ISSET_ID, value);
  }

  public boolean isIsNeedSrcImg() {
    return this.isNeedSrcImg;
  }

  public AdContent setIsNeedSrcImg(boolean isNeedSrcImg) {
    this.isNeedSrcImg = isNeedSrcImg;
    setIsNeedSrcImgIsSet(true);
    return this;
  }

  public void unsetIsNeedSrcImg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDSRCIMG_ISSET_ID);
  }

  /** Returns true if field isNeedSrcImg is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedSrcImg() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDSRCIMG_ISSET_ID);
  }

  public void setIsNeedSrcImgIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDSRCIMG_ISSET_ID, value);
  }

  public int getAdSrcType() {
    return this.adSrcType;
  }

  public AdContent setAdSrcType(int adSrcType) {
    this.adSrcType = adSrcType;
    setAdSrcTypeIsSet(true);
    return this;
  }

  public void unsetAdSrcType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSRCTYPE_ISSET_ID);
  }

  /** Returns true if field adSrcType is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSrcType() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSRCTYPE_ISSET_ID);
  }

  public void setAdSrcTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSRCTYPE_ISSET_ID, value);
  }

  public int getThirdReportLinksSize() {
    return (this.thirdReportLinks == null) ? 0 : this.thirdReportLinks.size();
  }

  public void putToThirdReportLinks(String key, List<String> val) {
    if (this.thirdReportLinks == null) {
      this.thirdReportLinks = new HashMap<String,List<String>>();
    }
    this.thirdReportLinks.put(key, val);
  }

  public Map<String,List<String>> getThirdReportLinks() {
    return this.thirdReportLinks;
  }

  public AdContent setThirdReportLinks(Map<String,List<String>> thirdReportLinks) {
    this.thirdReportLinks = thirdReportLinks;
    return this;
  }

  public void unsetThirdReportLinks() {
    this.thirdReportLinks = null;
  }

  /** Returns true if field thirdReportLinks is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdReportLinks() {
    return this.thirdReportLinks != null;
  }

  public void setThirdReportLinksIsSet(boolean value) {
    if (!value) {
      this.thirdReportLinks = null;
    }
  }

  public AdImg getLogoImg() {
    return this.logoImg;
  }

  public AdContent setLogoImg(AdImg logoImg) {
    this.logoImg = logoImg;
    return this;
  }

  public void unsetLogoImg() {
    this.logoImg = null;
  }

  /** Returns true if field logoImg is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoImg() {
    return this.logoImg != null;
  }

  public void setLogoImgIsSet(boolean value) {
    if (!value) {
      this.logoImg = null;
    }
  }

  public AdVid getAdVid() {
    return this.adVid;
  }

  public AdContent setAdVid(AdVid adVid) {
    this.adVid = adVid;
    return this;
  }

  public void unsetAdVid() {
    this.adVid = null;
  }

  /** Returns true if field adVid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdVid() {
    return this.adVid != null;
  }

  public void setAdVidIsSet(boolean value) {
    if (!value) {
      this.adVid = null;
    }
  }

  /**
   * 
   * @see SettlementType
   */
  public SettlementType getSettlementType() {
    return this.settlementType;
  }

  /**
   * 
   * @see SettlementType
   */
  public AdContent setSettlementType(SettlementType settlementType) {
    this.settlementType = settlementType;
    return this;
  }

  public void unsetSettlementType() {
    this.settlementType = null;
  }

  /** Returns true if field settlementType is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementType() {
    return this.settlementType != null;
  }

  public void setSettlementTypeIsSet(boolean value) {
    if (!value) {
      this.settlementType = null;
    }
  }

  public int getSettlementPrice() {
    return this.settlementPrice;
  }

  public AdContent setSettlementPrice(int settlementPrice) {
    this.settlementPrice = settlementPrice;
    setSettlementPriceIsSet(true);
    return this;
  }

  public void unsetSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field settlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  public void setSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID, value);
  }

  public int getAdSrc() {
    return this.adSrc;
  }

  public AdContent setAdSrc(int adSrc) {
    this.adSrc = adSrc;
    setAdSrcIsSet(true);
    return this;
  }

  public void unsetAdSrc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSRC_ISSET_ID);
  }

  /** Returns true if field adSrc is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSrc() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSRC_ISSET_ID);
  }

  public void setAdSrcIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSRC_ISSET_ID, value);
  }

  public String getIdFromAdSrc() {
    return this.idFromAdSrc;
  }

  public AdContent setIdFromAdSrc(String idFromAdSrc) {
    this.idFromAdSrc = idFromAdSrc;
    return this;
  }

  public void unsetIdFromAdSrc() {
    this.idFromAdSrc = null;
  }

  /** Returns true if field idFromAdSrc is set (has been assigned a value) and false otherwise */
  public boolean isSetIdFromAdSrc() {
    return this.idFromAdSrc != null;
  }

  public void setIdFromAdSrcIsSet(boolean value) {
    if (!value) {
      this.idFromAdSrc = null;
    }
  }

  public boolean isIsHtmlAd() {
    return this.isHtmlAd;
  }

  public AdContent setIsHtmlAd(boolean isHtmlAd) {
    this.isHtmlAd = isHtmlAd;
    setIsHtmlAdIsSet(true);
    return this;
  }

  public void unsetIsHtmlAd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHTMLAD_ISSET_ID);
  }

  /** Returns true if field isHtmlAd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHtmlAd() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHTMLAD_ISSET_ID);
  }

  public void setIsHtmlAdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHTMLAD_ISSET_ID, value);
  }

  public String getHtmlSnippet() {
    return this.htmlSnippet;
  }

  public AdContent setHtmlSnippet(String htmlSnippet) {
    this.htmlSnippet = htmlSnippet;
    return this;
  }

  public void unsetHtmlSnippet() {
    this.htmlSnippet = null;
  }

  /** Returns true if field htmlSnippet is set (has been assigned a value) and false otherwise */
  public boolean isSetHtmlSnippet() {
    return this.htmlSnippet != null;
  }

  public void setHtmlSnippetIsSet(boolean value) {
    if (!value) {
      this.htmlSnippet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MARKET_TITLE:
      if (value == null) {
        unsetMarketTitle();
      } else {
        setMarketTitle((String)value);
      }
      break;

    case GUIDE_TITLE:
      if (value == null) {
        unsetGuideTitle();
      } else {
        setGuideTitle((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case IMGLIST:
      if (value == null) {
        unsetImglist();
      } else {
        setImglist((List<AdImg>)value);
      }
      break;

    case CONTENT_EXIST:
      if (value == null) {
        unsetContentExist();
      } else {
        setContentExist((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case LINKURL:
      if (value == null) {
        unsetLinkurl();
      } else {
        setLinkurl((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((List<Position>)value);
      }
      break;

    case CP_NAME:
      if (value == null) {
        unsetCpName();
      } else {
        setCpName((String)value);
      }
      break;

    case CP_AUTHOR:
      if (value == null) {
        unsetCpAuthor();
      } else {
        setCpAuthor((String)value);
      }
      break;

    case CP_VERSION:
      if (value == null) {
        unsetCpVersion();
      } else {
        setCpVersion((String)value);
      }
      break;

    case CP_LANGUAGE:
      if (value == null) {
        unsetCpLanguage();
      } else {
        setCpLanguage((String)value);
      }
      break;

    case CP_PACKAGE:
      if (value == null) {
        unsetCpPackage();
      } else {
        setCpPackage((String)value);
      }
      break;

    case CP_ICON:
      if (value == null) {
        unsetCpIcon();
      } else {
        setCpIcon((String)value);
      }
      break;

    case CP_APK:
      if (value == null) {
        unsetCpApk();
      } else {
        setCpApk((String)value);
      }
      break;

    case CP_MEMO:
      if (value == null) {
        unsetCpMemo();
      } else {
        setCpMemo((String)value);
      }
      break;

    case CP_IMGS:
      if (value == null) {
        unsetCpImgs();
      } else {
        setCpImgs((List<String>)value);
      }
      break;

    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Long)value);
      }
      break;

    case PUB_TIME:
      if (value == null) {
        unsetPubTime();
      } else {
        setPubTime((Long)value);
      }
      break;

    case FAVORITES:
      if (value == null) {
        unsetFavorites();
      } else {
        setFavorites((Long)value);
      }
      break;

    case CPCLASS:
      if (value == null) {
        unsetCpclass();
      } else {
        setCpclass((String)value);
      }
      break;

    case TURN_TYPE:
      if (value == null) {
        unsetTurn_type();
      } else {
        setTurn_type((Integer)value);
      }
      break;

    case PARAM_TYPE:
      if (value == null) {
        unsetParam_type();
      } else {
        setParam_type((Integer)value);
      }
      break;

    case UNUSED1:
      if (value == null) {
        unsetUnused1();
      } else {
        setUnused1((Integer)value);
      }
      break;

    case UNUSED2:
      if (value == null) {
        unsetUnused2();
      } else {
        setUnused2((Integer)value);
      }
      break;

    case AD_SOURCE:
      if (value == null) {
        unsetAdSource();
      } else {
        setAdSource((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case THIRD_URL:
      if (value == null) {
        unsetThird_url();
      } else {
        setThird_url((String)value);
      }
      break;

    case TOP_AD_VIEW_NUM:
      if (value == null) {
        unsetTopAdViewNum();
      } else {
        setTopAdViewNum((Integer)value);
      }
      break;

    case TOP_AD_CLICK_NUM:
      if (value == null) {
        unsetTopAdClickNum();
      } else {
        setTopAdClickNum((Integer)value);
      }
      break;

    case TOP_AD_TIME_RANGES:
      if (value == null) {
        unsetTopAdTimeRanges();
      } else {
        setTopAdTimeRanges((List<LimitTimeRangeSec>)value);
      }
      break;

    case BUTTON_NAME:
      if (value == null) {
        unsetButtonName();
      } else {
        setButtonName((String)value);
      }
      break;

    case MUTI_ACTION:
      if (value == null) {
        unsetMutiAction();
      } else {
        setMutiAction((List<AdMutiAction>)value);
      }
      break;

    case IS_USE_THIRD_IMG:
      if (value == null) {
        unsetIsUseThirdImg();
      } else {
        setIsUseThirdImg((Boolean)value);
      }
      break;

    case ADPOS:
      if (value == null) {
        unsetAdpos();
      } else {
        setAdpos((Integer)value);
      }
      break;

    case IS_NEED_SRC_IMG:
      if (value == null) {
        unsetIsNeedSrcImg();
      } else {
        setIsNeedSrcImg((Boolean)value);
      }
      break;

    case AD_SRC_TYPE:
      if (value == null) {
        unsetAdSrcType();
      } else {
        setAdSrcType((Integer)value);
      }
      break;

    case THIRD_REPORT_LINKS:
      if (value == null) {
        unsetThirdReportLinks();
      } else {
        setThirdReportLinks((Map<String,List<String>>)value);
      }
      break;

    case LOGO_IMG:
      if (value == null) {
        unsetLogoImg();
      } else {
        setLogoImg((AdImg)value);
      }
      break;

    case AD_VID:
      if (value == null) {
        unsetAdVid();
      } else {
        setAdVid((AdVid)value);
      }
      break;

    case SETTLEMENT_TYPE:
      if (value == null) {
        unsetSettlementType();
      } else {
        setSettlementType((SettlementType)value);
      }
      break;

    case SETTLEMENT_PRICE:
      if (value == null) {
        unsetSettlementPrice();
      } else {
        setSettlementPrice((Integer)value);
      }
      break;

    case AD_SRC:
      if (value == null) {
        unsetAdSrc();
      } else {
        setAdSrc((Integer)value);
      }
      break;

    case ID_FROM_AD_SRC:
      if (value == null) {
        unsetIdFromAdSrc();
      } else {
        setIdFromAdSrc((String)value);
      }
      break;

    case IS_HTML_AD:
      if (value == null) {
        unsetIsHtmlAd();
      } else {
        setIsHtmlAd((Boolean)value);
      }
      break;

    case HTML_SNIPPET:
      if (value == null) {
        unsetHtmlSnippet();
      } else {
        setHtmlSnippet((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MARKET_TITLE:
      return getMarketTitle();

    case GUIDE_TITLE:
      return getGuideTitle();

    case TYPE:
      return Integer.valueOf(getType());

    case IMGLIST:
      return getImglist();

    case CONTENT_EXIST:
      return Integer.valueOf(getContentExist());

    case CONTENT:
      return getContent();

    case LINKURL:
      return getLinkurl();

    case PHONE:
      return getPhone();

    case POSITION:
      return getPosition();

    case CP_NAME:
      return getCpName();

    case CP_AUTHOR:
      return getCpAuthor();

    case CP_VERSION:
      return getCpVersion();

    case CP_LANGUAGE:
      return getCpLanguage();

    case CP_PACKAGE:
      return getCpPackage();

    case CP_ICON:
      return getCpIcon();

    case CP_APK:
      return getCpApk();

    case CP_MEMO:
      return getCpMemo();

    case CP_IMGS:
      return getCpImgs();

    case AD_ID:
      return Long.valueOf(getAdId());

    case PUB_TIME:
      return Long.valueOf(getPubTime());

    case FAVORITES:
      return Long.valueOf(getFavorites());

    case CPCLASS:
      return getCpclass();

    case TURN_TYPE:
      return Integer.valueOf(getTurn_type());

    case PARAM_TYPE:
      return Integer.valueOf(getParam_type());

    case UNUSED1:
      return Integer.valueOf(getUnused1());

    case UNUSED2:
      return Integer.valueOf(getUnused2());

    case AD_SOURCE:
      return getAdSource();

    case ACTION:
      return getAction();

    case THIRD_URL:
      return getThird_url();

    case TOP_AD_VIEW_NUM:
      return Integer.valueOf(getTopAdViewNum());

    case TOP_AD_CLICK_NUM:
      return Integer.valueOf(getTopAdClickNum());

    case TOP_AD_TIME_RANGES:
      return getTopAdTimeRanges();

    case BUTTON_NAME:
      return getButtonName();

    case MUTI_ACTION:
      return getMutiAction();

    case IS_USE_THIRD_IMG:
      return Boolean.valueOf(isIsUseThirdImg());

    case ADPOS:
      return Integer.valueOf(getAdpos());

    case IS_NEED_SRC_IMG:
      return Boolean.valueOf(isIsNeedSrcImg());

    case AD_SRC_TYPE:
      return Integer.valueOf(getAdSrcType());

    case THIRD_REPORT_LINKS:
      return getThirdReportLinks();

    case LOGO_IMG:
      return getLogoImg();

    case AD_VID:
      return getAdVid();

    case SETTLEMENT_TYPE:
      return getSettlementType();

    case SETTLEMENT_PRICE:
      return Integer.valueOf(getSettlementPrice());

    case AD_SRC:
      return Integer.valueOf(getAdSrc());

    case ID_FROM_AD_SRC:
      return getIdFromAdSrc();

    case IS_HTML_AD:
      return Boolean.valueOf(isIsHtmlAd());

    case HTML_SNIPPET:
      return getHtmlSnippet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MARKET_TITLE:
      return isSetMarketTitle();
    case GUIDE_TITLE:
      return isSetGuideTitle();
    case TYPE:
      return isSetType();
    case IMGLIST:
      return isSetImglist();
    case CONTENT_EXIST:
      return isSetContentExist();
    case CONTENT:
      return isSetContent();
    case LINKURL:
      return isSetLinkurl();
    case PHONE:
      return isSetPhone();
    case POSITION:
      return isSetPosition();
    case CP_NAME:
      return isSetCpName();
    case CP_AUTHOR:
      return isSetCpAuthor();
    case CP_VERSION:
      return isSetCpVersion();
    case CP_LANGUAGE:
      return isSetCpLanguage();
    case CP_PACKAGE:
      return isSetCpPackage();
    case CP_ICON:
      return isSetCpIcon();
    case CP_APK:
      return isSetCpApk();
    case CP_MEMO:
      return isSetCpMemo();
    case CP_IMGS:
      return isSetCpImgs();
    case AD_ID:
      return isSetAdId();
    case PUB_TIME:
      return isSetPubTime();
    case FAVORITES:
      return isSetFavorites();
    case CPCLASS:
      return isSetCpclass();
    case TURN_TYPE:
      return isSetTurn_type();
    case PARAM_TYPE:
      return isSetParam_type();
    case UNUSED1:
      return isSetUnused1();
    case UNUSED2:
      return isSetUnused2();
    case AD_SOURCE:
      return isSetAdSource();
    case ACTION:
      return isSetAction();
    case THIRD_URL:
      return isSetThird_url();
    case TOP_AD_VIEW_NUM:
      return isSetTopAdViewNum();
    case TOP_AD_CLICK_NUM:
      return isSetTopAdClickNum();
    case TOP_AD_TIME_RANGES:
      return isSetTopAdTimeRanges();
    case BUTTON_NAME:
      return isSetButtonName();
    case MUTI_ACTION:
      return isSetMutiAction();
    case IS_USE_THIRD_IMG:
      return isSetIsUseThirdImg();
    case ADPOS:
      return isSetAdpos();
    case IS_NEED_SRC_IMG:
      return isSetIsNeedSrcImg();
    case AD_SRC_TYPE:
      return isSetAdSrcType();
    case THIRD_REPORT_LINKS:
      return isSetThirdReportLinks();
    case LOGO_IMG:
      return isSetLogoImg();
    case AD_VID:
      return isSetAdVid();
    case SETTLEMENT_TYPE:
      return isSetSettlementType();
    case SETTLEMENT_PRICE:
      return isSetSettlementPrice();
    case AD_SRC:
      return isSetAdSrc();
    case ID_FROM_AD_SRC:
      return isSetIdFromAdSrc();
    case IS_HTML_AD:
      return isSetIsHtmlAd();
    case HTML_SNIPPET:
      return isSetHtmlSnippet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdContent)
      return this.equals((AdContent)that);
    return false;
  }

  public boolean equals(AdContent that) {
    if (that == null)
      return false;

    boolean this_present_marketTitle = true && this.isSetMarketTitle();
    boolean that_present_marketTitle = true && that.isSetMarketTitle();
    if (this_present_marketTitle || that_present_marketTitle) {
      if (!(this_present_marketTitle && that_present_marketTitle))
        return false;
      if (!this.marketTitle.equals(that.marketTitle))
        return false;
    }

    boolean this_present_guideTitle = true && this.isSetGuideTitle();
    boolean that_present_guideTitle = true && that.isSetGuideTitle();
    if (this_present_guideTitle || that_present_guideTitle) {
      if (!(this_present_guideTitle && that_present_guideTitle))
        return false;
      if (!this.guideTitle.equals(that.guideTitle))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_imglist = true && this.isSetImglist();
    boolean that_present_imglist = true && that.isSetImglist();
    if (this_present_imglist || that_present_imglist) {
      if (!(this_present_imglist && that_present_imglist))
        return false;
      if (!this.imglist.equals(that.imglist))
        return false;
    }

    boolean this_present_contentExist = true && this.isSetContentExist();
    boolean that_present_contentExist = true && that.isSetContentExist();
    if (this_present_contentExist || that_present_contentExist) {
      if (!(this_present_contentExist && that_present_contentExist))
        return false;
      if (this.contentExist != that.contentExist)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_linkurl = true && this.isSetLinkurl();
    boolean that_present_linkurl = true && that.isSetLinkurl();
    if (this_present_linkurl || that_present_linkurl) {
      if (!(this_present_linkurl && that_present_linkurl))
        return false;
      if (!this.linkurl.equals(that.linkurl))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_cpName = true && this.isSetCpName();
    boolean that_present_cpName = true && that.isSetCpName();
    if (this_present_cpName || that_present_cpName) {
      if (!(this_present_cpName && that_present_cpName))
        return false;
      if (!this.cpName.equals(that.cpName))
        return false;
    }

    boolean this_present_cpAuthor = true && this.isSetCpAuthor();
    boolean that_present_cpAuthor = true && that.isSetCpAuthor();
    if (this_present_cpAuthor || that_present_cpAuthor) {
      if (!(this_present_cpAuthor && that_present_cpAuthor))
        return false;
      if (!this.cpAuthor.equals(that.cpAuthor))
        return false;
    }

    boolean this_present_cpVersion = true && this.isSetCpVersion();
    boolean that_present_cpVersion = true && that.isSetCpVersion();
    if (this_present_cpVersion || that_present_cpVersion) {
      if (!(this_present_cpVersion && that_present_cpVersion))
        return false;
      if (!this.cpVersion.equals(that.cpVersion))
        return false;
    }

    boolean this_present_cpLanguage = true && this.isSetCpLanguage();
    boolean that_present_cpLanguage = true && that.isSetCpLanguage();
    if (this_present_cpLanguage || that_present_cpLanguage) {
      if (!(this_present_cpLanguage && that_present_cpLanguage))
        return false;
      if (!this.cpLanguage.equals(that.cpLanguage))
        return false;
    }

    boolean this_present_cpPackage = true && this.isSetCpPackage();
    boolean that_present_cpPackage = true && that.isSetCpPackage();
    if (this_present_cpPackage || that_present_cpPackage) {
      if (!(this_present_cpPackage && that_present_cpPackage))
        return false;
      if (!this.cpPackage.equals(that.cpPackage))
        return false;
    }

    boolean this_present_cpIcon = true && this.isSetCpIcon();
    boolean that_present_cpIcon = true && that.isSetCpIcon();
    if (this_present_cpIcon || that_present_cpIcon) {
      if (!(this_present_cpIcon && that_present_cpIcon))
        return false;
      if (!this.cpIcon.equals(that.cpIcon))
        return false;
    }

    boolean this_present_cpApk = true && this.isSetCpApk();
    boolean that_present_cpApk = true && that.isSetCpApk();
    if (this_present_cpApk || that_present_cpApk) {
      if (!(this_present_cpApk && that_present_cpApk))
        return false;
      if (!this.cpApk.equals(that.cpApk))
        return false;
    }

    boolean this_present_cpMemo = true && this.isSetCpMemo();
    boolean that_present_cpMemo = true && that.isSetCpMemo();
    if (this_present_cpMemo || that_present_cpMemo) {
      if (!(this_present_cpMemo && that_present_cpMemo))
        return false;
      if (!this.cpMemo.equals(that.cpMemo))
        return false;
    }

    boolean this_present_cpImgs = true && this.isSetCpImgs();
    boolean that_present_cpImgs = true && that.isSetCpImgs();
    if (this_present_cpImgs || that_present_cpImgs) {
      if (!(this_present_cpImgs && that_present_cpImgs))
        return false;
      if (!this.cpImgs.equals(that.cpImgs))
        return false;
    }

    boolean this_present_adId = true;
    boolean that_present_adId = true;
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_pubTime = true;
    boolean that_present_pubTime = true;
    if (this_present_pubTime || that_present_pubTime) {
      if (!(this_present_pubTime && that_present_pubTime))
        return false;
      if (this.pubTime != that.pubTime)
        return false;
    }

    boolean this_present_favorites = true;
    boolean that_present_favorites = true;
    if (this_present_favorites || that_present_favorites) {
      if (!(this_present_favorites && that_present_favorites))
        return false;
      if (this.favorites != that.favorites)
        return false;
    }

    boolean this_present_cpclass = true && this.isSetCpclass();
    boolean that_present_cpclass = true && that.isSetCpclass();
    if (this_present_cpclass || that_present_cpclass) {
      if (!(this_present_cpclass && that_present_cpclass))
        return false;
      if (!this.cpclass.equals(that.cpclass))
        return false;
    }

    boolean this_present_turn_type = true && this.isSetTurn_type();
    boolean that_present_turn_type = true && that.isSetTurn_type();
    if (this_present_turn_type || that_present_turn_type) {
      if (!(this_present_turn_type && that_present_turn_type))
        return false;
      if (this.turn_type != that.turn_type)
        return false;
    }

    boolean this_present_param_type = true && this.isSetParam_type();
    boolean that_present_param_type = true && that.isSetParam_type();
    if (this_present_param_type || that_present_param_type) {
      if (!(this_present_param_type && that_present_param_type))
        return false;
      if (this.param_type != that.param_type)
        return false;
    }

    boolean this_present_unused1 = true && this.isSetUnused1();
    boolean that_present_unused1 = true && that.isSetUnused1();
    if (this_present_unused1 || that_present_unused1) {
      if (!(this_present_unused1 && that_present_unused1))
        return false;
      if (this.unused1 != that.unused1)
        return false;
    }

    boolean this_present_unused2 = true && this.isSetUnused2();
    boolean that_present_unused2 = true && that.isSetUnused2();
    if (this_present_unused2 || that_present_unused2) {
      if (!(this_present_unused2 && that_present_unused2))
        return false;
      if (this.unused2 != that.unused2)
        return false;
    }

    boolean this_present_adSource = true && this.isSetAdSource();
    boolean that_present_adSource = true && that.isSetAdSource();
    if (this_present_adSource || that_present_adSource) {
      if (!(this_present_adSource && that_present_adSource))
        return false;
      if (!this.adSource.equals(that.adSource))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_third_url = true && this.isSetThird_url();
    boolean that_present_third_url = true && that.isSetThird_url();
    if (this_present_third_url || that_present_third_url) {
      if (!(this_present_third_url && that_present_third_url))
        return false;
      if (!this.third_url.equals(that.third_url))
        return false;
    }

    boolean this_present_topAdViewNum = true && this.isSetTopAdViewNum();
    boolean that_present_topAdViewNum = true && that.isSetTopAdViewNum();
    if (this_present_topAdViewNum || that_present_topAdViewNum) {
      if (!(this_present_topAdViewNum && that_present_topAdViewNum))
        return false;
      if (this.topAdViewNum != that.topAdViewNum)
        return false;
    }

    boolean this_present_topAdClickNum = true && this.isSetTopAdClickNum();
    boolean that_present_topAdClickNum = true && that.isSetTopAdClickNum();
    if (this_present_topAdClickNum || that_present_topAdClickNum) {
      if (!(this_present_topAdClickNum && that_present_topAdClickNum))
        return false;
      if (this.topAdClickNum != that.topAdClickNum)
        return false;
    }

    boolean this_present_topAdTimeRanges = true && this.isSetTopAdTimeRanges();
    boolean that_present_topAdTimeRanges = true && that.isSetTopAdTimeRanges();
    if (this_present_topAdTimeRanges || that_present_topAdTimeRanges) {
      if (!(this_present_topAdTimeRanges && that_present_topAdTimeRanges))
        return false;
      if (!this.topAdTimeRanges.equals(that.topAdTimeRanges))
        return false;
    }

    boolean this_present_buttonName = true && this.isSetButtonName();
    boolean that_present_buttonName = true && that.isSetButtonName();
    if (this_present_buttonName || that_present_buttonName) {
      if (!(this_present_buttonName && that_present_buttonName))
        return false;
      if (!this.buttonName.equals(that.buttonName))
        return false;
    }

    boolean this_present_mutiAction = true && this.isSetMutiAction();
    boolean that_present_mutiAction = true && that.isSetMutiAction();
    if (this_present_mutiAction || that_present_mutiAction) {
      if (!(this_present_mutiAction && that_present_mutiAction))
        return false;
      if (!this.mutiAction.equals(that.mutiAction))
        return false;
    }

    boolean this_present_isUseThirdImg = true && this.isSetIsUseThirdImg();
    boolean that_present_isUseThirdImg = true && that.isSetIsUseThirdImg();
    if (this_present_isUseThirdImg || that_present_isUseThirdImg) {
      if (!(this_present_isUseThirdImg && that_present_isUseThirdImg))
        return false;
      if (this.isUseThirdImg != that.isUseThirdImg)
        return false;
    }

    boolean this_present_adpos = true && this.isSetAdpos();
    boolean that_present_adpos = true && that.isSetAdpos();
    if (this_present_adpos || that_present_adpos) {
      if (!(this_present_adpos && that_present_adpos))
        return false;
      if (this.adpos != that.adpos)
        return false;
    }

    boolean this_present_isNeedSrcImg = true && this.isSetIsNeedSrcImg();
    boolean that_present_isNeedSrcImg = true && that.isSetIsNeedSrcImg();
    if (this_present_isNeedSrcImg || that_present_isNeedSrcImg) {
      if (!(this_present_isNeedSrcImg && that_present_isNeedSrcImg))
        return false;
      if (this.isNeedSrcImg != that.isNeedSrcImg)
        return false;
    }

    boolean this_present_adSrcType = true && this.isSetAdSrcType();
    boolean that_present_adSrcType = true && that.isSetAdSrcType();
    if (this_present_adSrcType || that_present_adSrcType) {
      if (!(this_present_adSrcType && that_present_adSrcType))
        return false;
      if (this.adSrcType != that.adSrcType)
        return false;
    }

    boolean this_present_thirdReportLinks = true && this.isSetThirdReportLinks();
    boolean that_present_thirdReportLinks = true && that.isSetThirdReportLinks();
    if (this_present_thirdReportLinks || that_present_thirdReportLinks) {
      if (!(this_present_thirdReportLinks && that_present_thirdReportLinks))
        return false;
      if (!this.thirdReportLinks.equals(that.thirdReportLinks))
        return false;
    }

    boolean this_present_logoImg = true && this.isSetLogoImg();
    boolean that_present_logoImg = true && that.isSetLogoImg();
    if (this_present_logoImg || that_present_logoImg) {
      if (!(this_present_logoImg && that_present_logoImg))
        return false;
      if (!this.logoImg.equals(that.logoImg))
        return false;
    }

    boolean this_present_adVid = true && this.isSetAdVid();
    boolean that_present_adVid = true && that.isSetAdVid();
    if (this_present_adVid || that_present_adVid) {
      if (!(this_present_adVid && that_present_adVid))
        return false;
      if (!this.adVid.equals(that.adVid))
        return false;
    }

    boolean this_present_settlementType = true && this.isSetSettlementType();
    boolean that_present_settlementType = true && that.isSetSettlementType();
    if (this_present_settlementType || that_present_settlementType) {
      if (!(this_present_settlementType && that_present_settlementType))
        return false;
      if (!this.settlementType.equals(that.settlementType))
        return false;
    }

    boolean this_present_settlementPrice = true && this.isSetSettlementPrice();
    boolean that_present_settlementPrice = true && that.isSetSettlementPrice();
    if (this_present_settlementPrice || that_present_settlementPrice) {
      if (!(this_present_settlementPrice && that_present_settlementPrice))
        return false;
      if (this.settlementPrice != that.settlementPrice)
        return false;
    }

    boolean this_present_adSrc = true && this.isSetAdSrc();
    boolean that_present_adSrc = true && that.isSetAdSrc();
    if (this_present_adSrc || that_present_adSrc) {
      if (!(this_present_adSrc && that_present_adSrc))
        return false;
      if (this.adSrc != that.adSrc)
        return false;
    }

    boolean this_present_idFromAdSrc = true && this.isSetIdFromAdSrc();
    boolean that_present_idFromAdSrc = true && that.isSetIdFromAdSrc();
    if (this_present_idFromAdSrc || that_present_idFromAdSrc) {
      if (!(this_present_idFromAdSrc && that_present_idFromAdSrc))
        return false;
      if (!this.idFromAdSrc.equals(that.idFromAdSrc))
        return false;
    }

    boolean this_present_isHtmlAd = true && this.isSetIsHtmlAd();
    boolean that_present_isHtmlAd = true && that.isSetIsHtmlAd();
    if (this_present_isHtmlAd || that_present_isHtmlAd) {
      if (!(this_present_isHtmlAd && that_present_isHtmlAd))
        return false;
      if (this.isHtmlAd != that.isHtmlAd)
        return false;
    }

    boolean this_present_htmlSnippet = true && this.isSetHtmlSnippet();
    boolean that_present_htmlSnippet = true && that.isSetHtmlSnippet();
    if (this_present_htmlSnippet || that_present_htmlSnippet) {
      if (!(this_present_htmlSnippet && that_present_htmlSnippet))
        return false;
      if (!this.htmlSnippet.equals(that.htmlSnippet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_marketTitle = true && (isSetMarketTitle());
    list.add(present_marketTitle);
    if (present_marketTitle)
      list.add(marketTitle);

    boolean present_guideTitle = true && (isSetGuideTitle());
    list.add(present_guideTitle);
    if (present_guideTitle)
      list.add(guideTitle);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_imglist = true && (isSetImglist());
    list.add(present_imglist);
    if (present_imglist)
      list.add(imglist);

    boolean present_contentExist = true && (isSetContentExist());
    list.add(present_contentExist);
    if (present_contentExist)
      list.add(contentExist);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_linkurl = true && (isSetLinkurl());
    list.add(present_linkurl);
    if (present_linkurl)
      list.add(linkurl);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_cpName = true && (isSetCpName());
    list.add(present_cpName);
    if (present_cpName)
      list.add(cpName);

    boolean present_cpAuthor = true && (isSetCpAuthor());
    list.add(present_cpAuthor);
    if (present_cpAuthor)
      list.add(cpAuthor);

    boolean present_cpVersion = true && (isSetCpVersion());
    list.add(present_cpVersion);
    if (present_cpVersion)
      list.add(cpVersion);

    boolean present_cpLanguage = true && (isSetCpLanguage());
    list.add(present_cpLanguage);
    if (present_cpLanguage)
      list.add(cpLanguage);

    boolean present_cpPackage = true && (isSetCpPackage());
    list.add(present_cpPackage);
    if (present_cpPackage)
      list.add(cpPackage);

    boolean present_cpIcon = true && (isSetCpIcon());
    list.add(present_cpIcon);
    if (present_cpIcon)
      list.add(cpIcon);

    boolean present_cpApk = true && (isSetCpApk());
    list.add(present_cpApk);
    if (present_cpApk)
      list.add(cpApk);

    boolean present_cpMemo = true && (isSetCpMemo());
    list.add(present_cpMemo);
    if (present_cpMemo)
      list.add(cpMemo);

    boolean present_cpImgs = true && (isSetCpImgs());
    list.add(present_cpImgs);
    if (present_cpImgs)
      list.add(cpImgs);

    boolean present_adId = true;
    list.add(present_adId);
    if (present_adId)
      list.add(adId);

    boolean present_pubTime = true;
    list.add(present_pubTime);
    if (present_pubTime)
      list.add(pubTime);

    boolean present_favorites = true;
    list.add(present_favorites);
    if (present_favorites)
      list.add(favorites);

    boolean present_cpclass = true && (isSetCpclass());
    list.add(present_cpclass);
    if (present_cpclass)
      list.add(cpclass);

    boolean present_turn_type = true && (isSetTurn_type());
    list.add(present_turn_type);
    if (present_turn_type)
      list.add(turn_type);

    boolean present_param_type = true && (isSetParam_type());
    list.add(present_param_type);
    if (present_param_type)
      list.add(param_type);

    boolean present_unused1 = true && (isSetUnused1());
    list.add(present_unused1);
    if (present_unused1)
      list.add(unused1);

    boolean present_unused2 = true && (isSetUnused2());
    list.add(present_unused2);
    if (present_unused2)
      list.add(unused2);

    boolean present_adSource = true && (isSetAdSource());
    list.add(present_adSource);
    if (present_adSource)
      list.add(adSource);

    boolean present_action = true && (isSetAction());
    list.add(present_action);
    if (present_action)
      list.add(action);

    boolean present_third_url = true && (isSetThird_url());
    list.add(present_third_url);
    if (present_third_url)
      list.add(third_url);

    boolean present_topAdViewNum = true && (isSetTopAdViewNum());
    list.add(present_topAdViewNum);
    if (present_topAdViewNum)
      list.add(topAdViewNum);

    boolean present_topAdClickNum = true && (isSetTopAdClickNum());
    list.add(present_topAdClickNum);
    if (present_topAdClickNum)
      list.add(topAdClickNum);

    boolean present_topAdTimeRanges = true && (isSetTopAdTimeRanges());
    list.add(present_topAdTimeRanges);
    if (present_topAdTimeRanges)
      list.add(topAdTimeRanges);

    boolean present_buttonName = true && (isSetButtonName());
    list.add(present_buttonName);
    if (present_buttonName)
      list.add(buttonName);

    boolean present_mutiAction = true && (isSetMutiAction());
    list.add(present_mutiAction);
    if (present_mutiAction)
      list.add(mutiAction);

    boolean present_isUseThirdImg = true && (isSetIsUseThirdImg());
    list.add(present_isUseThirdImg);
    if (present_isUseThirdImg)
      list.add(isUseThirdImg);

    boolean present_adpos = true && (isSetAdpos());
    list.add(present_adpos);
    if (present_adpos)
      list.add(adpos);

    boolean present_isNeedSrcImg = true && (isSetIsNeedSrcImg());
    list.add(present_isNeedSrcImg);
    if (present_isNeedSrcImg)
      list.add(isNeedSrcImg);

    boolean present_adSrcType = true && (isSetAdSrcType());
    list.add(present_adSrcType);
    if (present_adSrcType)
      list.add(adSrcType);

    boolean present_thirdReportLinks = true && (isSetThirdReportLinks());
    list.add(present_thirdReportLinks);
    if (present_thirdReportLinks)
      list.add(thirdReportLinks);

    boolean present_logoImg = true && (isSetLogoImg());
    list.add(present_logoImg);
    if (present_logoImg)
      list.add(logoImg);

    boolean present_adVid = true && (isSetAdVid());
    list.add(present_adVid);
    if (present_adVid)
      list.add(adVid);

    boolean present_settlementType = true && (isSetSettlementType());
    list.add(present_settlementType);
    if (present_settlementType)
      list.add(settlementType.getValue());

    boolean present_settlementPrice = true && (isSetSettlementPrice());
    list.add(present_settlementPrice);
    if (present_settlementPrice)
      list.add(settlementPrice);

    boolean present_adSrc = true && (isSetAdSrc());
    list.add(present_adSrc);
    if (present_adSrc)
      list.add(adSrc);

    boolean present_idFromAdSrc = true && (isSetIdFromAdSrc());
    list.add(present_idFromAdSrc);
    if (present_idFromAdSrc)
      list.add(idFromAdSrc);

    boolean present_isHtmlAd = true && (isSetIsHtmlAd());
    list.add(present_isHtmlAd);
    if (present_isHtmlAd)
      list.add(isHtmlAd);

    boolean present_htmlSnippet = true && (isSetHtmlSnippet());
    list.add(present_htmlSnippet);
    if (present_htmlSnippet)
      list.add(htmlSnippet);

    return list.hashCode();
  }

  public int compareTo(AdContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMarketTitle()).compareTo(other.isSetMarketTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketTitle, other.marketTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuideTitle()).compareTo(other.isSetGuideTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuideTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guideTitle, other.guideTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImglist()).compareTo(other.isSetImglist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImglist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imglist, other.imglist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentExist()).compareTo(other.isSetContentExist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentExist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentExist, other.contentExist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkurl()).compareTo(other.isSetLinkurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkurl, other.linkurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpName()).compareTo(other.isSetCpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpName, other.cpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpAuthor()).compareTo(other.isSetCpAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpAuthor, other.cpAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpVersion()).compareTo(other.isSetCpVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpVersion, other.cpVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpLanguage()).compareTo(other.isSetCpLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpLanguage, other.cpLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpPackage()).compareTo(other.isSetCpPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpPackage, other.cpPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpIcon()).compareTo(other.isSetCpIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpIcon, other.cpIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpApk()).compareTo(other.isSetCpApk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpApk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpApk, other.cpApk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpMemo()).compareTo(other.isSetCpMemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpMemo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpMemo, other.cpMemo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpImgs()).compareTo(other.isSetCpImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpImgs, other.cpImgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubTime()).compareTo(other.isSetPubTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubTime, other.pubTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavorites()).compareTo(other.isSetFavorites());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorites()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorites, other.favorites);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpclass()).compareTo(other.isSetCpclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpclass, other.cpclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurn_type()).compareTo(other.isSetTurn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turn_type, other.turn_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam_type()).compareTo(other.isSetParam_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param_type, other.param_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnused1()).compareTo(other.isSetUnused1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused1, other.unused1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnused2()).compareTo(other.isSetUnused2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused2, other.unused2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSource()).compareTo(other.isSetAdSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSource, other.adSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThird_url()).compareTo(other.isSetThird_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThird_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.third_url, other.third_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopAdViewNum()).compareTo(other.isSetTopAdViewNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopAdViewNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topAdViewNum, other.topAdViewNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopAdClickNum()).compareTo(other.isSetTopAdClickNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopAdClickNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topAdClickNum, other.topAdClickNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopAdTimeRanges()).compareTo(other.isSetTopAdTimeRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopAdTimeRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topAdTimeRanges, other.topAdTimeRanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetButtonName()).compareTo(other.isSetButtonName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButtonName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonName, other.buttonName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMutiAction()).compareTo(other.isSetMutiAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutiAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutiAction, other.mutiAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUseThirdImg()).compareTo(other.isSetIsUseThirdImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUseThirdImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUseThirdImg, other.isUseThirdImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpos()).compareTo(other.isSetAdpos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpos, other.adpos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedSrcImg()).compareTo(other.isSetIsNeedSrcImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedSrcImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedSrcImg, other.isNeedSrcImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSrcType()).compareTo(other.isSetAdSrcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSrcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSrcType, other.adSrcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdReportLinks()).compareTo(other.isSetThirdReportLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdReportLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdReportLinks, other.thirdReportLinks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoImg()).compareTo(other.isSetLogoImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoImg, other.logoImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdVid()).compareTo(other.isSetAdVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adVid, other.adVid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementType()).compareTo(other.isSetSettlementType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementType, other.settlementType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementPrice()).compareTo(other.isSetSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementPrice, other.settlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSrc()).compareTo(other.isSetAdSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSrc, other.adSrc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdFromAdSrc()).compareTo(other.isSetIdFromAdSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdFromAdSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idFromAdSrc, other.idFromAdSrc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHtmlAd()).compareTo(other.isSetIsHtmlAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHtmlAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHtmlAd, other.isHtmlAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtmlSnippet()).compareTo(other.isSetHtmlSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtmlSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htmlSnippet, other.htmlSnippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdContent(");
    boolean first = true;

    sb.append("marketTitle:");
    if (this.marketTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.marketTitle);
    }
    first = false;
    if (isSetGuideTitle()) {
      if (!first) sb.append(", ");
      sb.append("guideTitle:");
      if (this.guideTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.guideTitle);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (isSetImglist()) {
      if (!first) sb.append(", ");
      sb.append("imglist:");
      if (this.imglist == null) {
        sb.append("null");
      } else {
        sb.append(this.imglist);
      }
      first = false;
    }
    if (isSetContentExist()) {
      if (!first) sb.append(", ");
      sb.append("contentExist:");
      sb.append(this.contentExist);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetLinkurl()) {
      if (!first) sb.append(", ");
      sb.append("linkurl:");
      if (this.linkurl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkurl);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetCpName()) {
      if (!first) sb.append(", ");
      sb.append("cpName:");
      if (this.cpName == null) {
        sb.append("null");
      } else {
        sb.append(this.cpName);
      }
      first = false;
    }
    if (isSetCpAuthor()) {
      if (!first) sb.append(", ");
      sb.append("cpAuthor:");
      if (this.cpAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.cpAuthor);
      }
      first = false;
    }
    if (isSetCpVersion()) {
      if (!first) sb.append(", ");
      sb.append("cpVersion:");
      if (this.cpVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.cpVersion);
      }
      first = false;
    }
    if (isSetCpLanguage()) {
      if (!first) sb.append(", ");
      sb.append("cpLanguage:");
      if (this.cpLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpLanguage);
      }
      first = false;
    }
    if (isSetCpPackage()) {
      if (!first) sb.append(", ");
      sb.append("cpPackage:");
      if (this.cpPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpPackage);
      }
      first = false;
    }
    if (isSetCpIcon()) {
      if (!first) sb.append(", ");
      sb.append("cpIcon:");
      if (this.cpIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.cpIcon);
      }
      first = false;
    }
    if (isSetCpApk()) {
      if (!first) sb.append(", ");
      sb.append("cpApk:");
      if (this.cpApk == null) {
        sb.append("null");
      } else {
        sb.append(this.cpApk);
      }
      first = false;
    }
    if (isSetCpMemo()) {
      if (!first) sb.append(", ");
      sb.append("cpMemo:");
      if (this.cpMemo == null) {
        sb.append("null");
      } else {
        sb.append(this.cpMemo);
      }
      first = false;
    }
    if (isSetCpImgs()) {
      if (!first) sb.append(", ");
      sb.append("cpImgs:");
      if (this.cpImgs == null) {
        sb.append("null");
      } else {
        sb.append(this.cpImgs);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("adId:");
    sb.append(this.adId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubTime:");
    sb.append(this.pubTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("favorites:");
    sb.append(this.favorites);
    first = false;
    if (isSetCpclass()) {
      if (!first) sb.append(", ");
      sb.append("cpclass:");
      if (this.cpclass == null) {
        sb.append("null");
      } else {
        sb.append(this.cpclass);
      }
      first = false;
    }
    if (isSetTurn_type()) {
      if (!first) sb.append(", ");
      sb.append("turn_type:");
      sb.append(this.turn_type);
      first = false;
    }
    if (isSetParam_type()) {
      if (!first) sb.append(", ");
      sb.append("param_type:");
      sb.append(this.param_type);
      first = false;
    }
    if (isSetUnused1()) {
      if (!first) sb.append(", ");
      sb.append("unused1:");
      sb.append(this.unused1);
      first = false;
    }
    if (isSetUnused2()) {
      if (!first) sb.append(", ");
      sb.append("unused2:");
      sb.append(this.unused2);
      first = false;
    }
    if (isSetAdSource()) {
      if (!first) sb.append(", ");
      sb.append("adSource:");
      if (this.adSource == null) {
        sb.append("null");
      } else {
        sb.append(this.adSource);
      }
      first = false;
    }
    if (isSetAction()) {
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
    }
    if (isSetThird_url()) {
      if (!first) sb.append(", ");
      sb.append("third_url:");
      if (this.third_url == null) {
        sb.append("null");
      } else {
        sb.append(this.third_url);
      }
      first = false;
    }
    if (isSetTopAdViewNum()) {
      if (!first) sb.append(", ");
      sb.append("topAdViewNum:");
      sb.append(this.topAdViewNum);
      first = false;
    }
    if (isSetTopAdClickNum()) {
      if (!first) sb.append(", ");
      sb.append("topAdClickNum:");
      sb.append(this.topAdClickNum);
      first = false;
    }
    if (isSetTopAdTimeRanges()) {
      if (!first) sb.append(", ");
      sb.append("topAdTimeRanges:");
      if (this.topAdTimeRanges == null) {
        sb.append("null");
      } else {
        sb.append(this.topAdTimeRanges);
      }
      first = false;
    }
    if (isSetButtonName()) {
      if (!first) sb.append(", ");
      sb.append("buttonName:");
      if (this.buttonName == null) {
        sb.append("null");
      } else {
        sb.append(this.buttonName);
      }
      first = false;
    }
    if (isSetMutiAction()) {
      if (!first) sb.append(", ");
      sb.append("mutiAction:");
      if (this.mutiAction == null) {
        sb.append("null");
      } else {
        sb.append(this.mutiAction);
      }
      first = false;
    }
    if (isSetIsUseThirdImg()) {
      if (!first) sb.append(", ");
      sb.append("isUseThirdImg:");
      sb.append(this.isUseThirdImg);
      first = false;
    }
    if (isSetAdpos()) {
      if (!first) sb.append(", ");
      sb.append("adpos:");
      sb.append(this.adpos);
      first = false;
    }
    if (isSetIsNeedSrcImg()) {
      if (!first) sb.append(", ");
      sb.append("isNeedSrcImg:");
      sb.append(this.isNeedSrcImg);
      first = false;
    }
    if (isSetAdSrcType()) {
      if (!first) sb.append(", ");
      sb.append("adSrcType:");
      sb.append(this.adSrcType);
      first = false;
    }
    if (isSetThirdReportLinks()) {
      if (!first) sb.append(", ");
      sb.append("thirdReportLinks:");
      if (this.thirdReportLinks == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdReportLinks);
      }
      first = false;
    }
    if (isSetLogoImg()) {
      if (!first) sb.append(", ");
      sb.append("logoImg:");
      if (this.logoImg == null) {
        sb.append("null");
      } else {
        sb.append(this.logoImg);
      }
      first = false;
    }
    if (isSetAdVid()) {
      if (!first) sb.append(", ");
      sb.append("adVid:");
      if (this.adVid == null) {
        sb.append("null");
      } else {
        sb.append(this.adVid);
      }
      first = false;
    }
    if (isSetSettlementType()) {
      if (!first) sb.append(", ");
      sb.append("settlementType:");
      if (this.settlementType == null) {
        sb.append("null");
      } else {
        sb.append(this.settlementType);
      }
      first = false;
    }
    if (isSetSettlementPrice()) {
      if (!first) sb.append(", ");
      sb.append("settlementPrice:");
      sb.append(this.settlementPrice);
      first = false;
    }
    if (isSetAdSrc()) {
      if (!first) sb.append(", ");
      sb.append("adSrc:");
      sb.append(this.adSrc);
      first = false;
    }
    if (isSetIdFromAdSrc()) {
      if (!first) sb.append(", ");
      sb.append("idFromAdSrc:");
      if (this.idFromAdSrc == null) {
        sb.append("null");
      } else {
        sb.append(this.idFromAdSrc);
      }
      first = false;
    }
    if (isSetIsHtmlAd()) {
      if (!first) sb.append(", ");
      sb.append("isHtmlAd:");
      sb.append(this.isHtmlAd);
      first = false;
    }
    if (isSetHtmlSnippet()) {
      if (!first) sb.append(", ");
      sb.append("htmlSnippet:");
      if (this.htmlSnippet == null) {
        sb.append("null");
      } else {
        sb.append(this.htmlSnippet);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (marketTitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'marketTitle' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'adId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pubTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'favorites' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (logoImg != null) {
      logoImg.validate();
    }
    if (adVid != null) {
      adVid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdContentStandardSchemeFactory implements SchemeFactory {
    public AdContentStandardScheme getScheme() {
      return new AdContentStandardScheme();
    }
  }

  private static class AdContentStandardScheme extends StandardScheme<AdContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MARKET_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marketTitle = iprot.readString();
              struct.setMarketTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GUIDE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guideTitle = iprot.readString();
              struct.setGuideTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMGLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.imglist = new ArrayList<AdImg>(_list78.size);
                AdImg _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = new AdImg();
                  _elem79.read(iprot);
                  struct.imglist.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setImglistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_EXIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentExist = iprot.readI32();
              struct.setContentExistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINKURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkurl = iprot.readString();
              struct.setLinkurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                struct.position = new ArrayList<Position>(_list81.size);
                Position _elem82;
                for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                {
                  _elem82 = new Position();
                  _elem82.read(iprot);
                  struct.position.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpName = iprot.readString();
              struct.setCpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CP_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpAuthor = iprot.readString();
              struct.setCpAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpVersion = iprot.readString();
              struct.setCpVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CP_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpLanguage = iprot.readString();
              struct.setCpLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CP_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpPackage = iprot.readString();
              struct.setCpPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CP_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpIcon = iprot.readString();
              struct.setCpIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CP_APK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpApk = iprot.readString();
              struct.setCpApkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CP_MEMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpMemo = iprot.readString();
              struct.setCpMemoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CP_IMGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.cpImgs = new ArrayList<String>(_list84.size);
                String _elem85;
                for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                {
                  _elem85 = iprot.readString();
                  struct.cpImgs.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setCpImgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.adId = iprot.readI64();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PUB_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pubTime = iprot.readI64();
              struct.setPubTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FAVORITES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.favorites = iprot.readI64();
              struct.setFavoritesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CPCLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpclass = iprot.readString();
              struct.setCpclassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TURN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.turn_type = iprot.readI32();
              struct.setTurn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PARAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.param_type = iprot.readI32();
              struct.setParam_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // UNUSED1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unused1 = iprot.readI32();
              struct.setUnused1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UNUSED2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unused2 = iprot.readI32();
              struct.setUnused2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // AD_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adSource = iprot.readString();
              struct.setAdSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // THIRD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.third_url = iprot.readString();
              struct.setThird_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TOP_AD_VIEW_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topAdViewNum = iprot.readI32();
              struct.setTopAdViewNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TOP_AD_CLICK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topAdClickNum = iprot.readI32();
              struct.setTopAdClickNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TOP_AD_TIME_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                struct.topAdTimeRanges = new ArrayList<LimitTimeRangeSec>(_list87.size);
                LimitTimeRangeSec _elem88;
                for (int _i89 = 0; _i89 < _list87.size; ++_i89)
                {
                  _elem88 = new LimitTimeRangeSec();
                  _elem88.read(iprot);
                  struct.topAdTimeRanges.add(_elem88);
                }
                iprot.readListEnd();
              }
              struct.setTopAdTimeRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // BUTTON_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buttonName = iprot.readString();
              struct.setButtonNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // MUTI_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.mutiAction = new ArrayList<AdMutiAction>(_list90.size);
                AdMutiAction _elem91;
                for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                {
                  _elem91 = new AdMutiAction();
                  _elem91.read(iprot);
                  struct.mutiAction.add(_elem91);
                }
                iprot.readListEnd();
              }
              struct.setMutiActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // IS_USE_THIRD_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isUseThirdImg = iprot.readBool();
              struct.setIsUseThirdImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ADPOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adpos = iprot.readI32();
              struct.setAdposIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // IS_NEED_SRC_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNeedSrcImg = iprot.readBool();
              struct.setIsNeedSrcImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // AD_SRC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSrcType = iprot.readI32();
              struct.setAdSrcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // THIRD_REPORT_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin();
                struct.thirdReportLinks = new HashMap<String,List<String>>(2*_map93.size);
                String _key94;
                List<String> _val95;
                for (int _i96 = 0; _i96 < _map93.size; ++_i96)
                {
                  _key94 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                    _val95 = new ArrayList<String>(_list97.size);
                    String _elem98;
                    for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                    {
                      _elem98 = iprot.readString();
                      _val95.add(_elem98);
                    }
                    iprot.readListEnd();
                  }
                  struct.thirdReportLinks.put(_key94, _val95);
                }
                iprot.readMapEnd();
              }
              struct.setThirdReportLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // LOGO_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.logoImg = new AdImg();
              struct.logoImg.read(iprot);
              struct.setLogoImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // AD_VID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adVid = new AdVid();
              struct.adVid.read(iprot);
              struct.setAdVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SETTLEMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementType = com.ocean.proxy.thrift.entity.SettlementType.findByValue(iprot.readI32());
              struct.setSettlementTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementPrice = iprot.readI32();
              struct.setSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // AD_SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSrc = iprot.readI32();
              struct.setAdSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // ID_FROM_AD_SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idFromAdSrc = iprot.readString();
              struct.setIdFromAdSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // IS_HTML_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHtmlAd = iprot.readBool();
              struct.setIsHtmlAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // HTML_SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.htmlSnippet = iprot.readString();
              struct.setHtmlSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAdId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPubTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pubTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFavorites()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'favorites' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.marketTitle != null) {
        oprot.writeFieldBegin(MARKET_TITLE_FIELD_DESC);
        oprot.writeString(struct.marketTitle);
        oprot.writeFieldEnd();
      }
      if (struct.guideTitle != null) {
        if (struct.isSetGuideTitle()) {
          oprot.writeFieldBegin(GUIDE_TITLE_FIELD_DESC);
          oprot.writeString(struct.guideTitle);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.imglist != null) {
        if (struct.isSetImglist()) {
          oprot.writeFieldBegin(IMGLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.imglist.size()));
            for (AdImg _iter100 : struct.imglist)
            {
              _iter100.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContentExist()) {
        oprot.writeFieldBegin(CONTENT_EXIST_FIELD_DESC);
        oprot.writeI32(struct.contentExist);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkurl != null) {
        if (struct.isSetLinkurl()) {
          oprot.writeFieldBegin(LINKURL_FIELD_DESC);
          oprot.writeString(struct.linkurl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.position.size()));
            for (Position _iter101 : struct.position)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpName != null) {
        if (struct.isSetCpName()) {
          oprot.writeFieldBegin(CP_NAME_FIELD_DESC);
          oprot.writeString(struct.cpName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpAuthor != null) {
        if (struct.isSetCpAuthor()) {
          oprot.writeFieldBegin(CP_AUTHOR_FIELD_DESC);
          oprot.writeString(struct.cpAuthor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpVersion != null) {
        if (struct.isSetCpVersion()) {
          oprot.writeFieldBegin(CP_VERSION_FIELD_DESC);
          oprot.writeString(struct.cpVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpLanguage != null) {
        if (struct.isSetCpLanguage()) {
          oprot.writeFieldBegin(CP_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.cpLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpPackage != null) {
        if (struct.isSetCpPackage()) {
          oprot.writeFieldBegin(CP_PACKAGE_FIELD_DESC);
          oprot.writeString(struct.cpPackage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpIcon != null) {
        if (struct.isSetCpIcon()) {
          oprot.writeFieldBegin(CP_ICON_FIELD_DESC);
          oprot.writeString(struct.cpIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpApk != null) {
        if (struct.isSetCpApk()) {
          oprot.writeFieldBegin(CP_APK_FIELD_DESC);
          oprot.writeString(struct.cpApk);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpMemo != null) {
        if (struct.isSetCpMemo()) {
          oprot.writeFieldBegin(CP_MEMO_FIELD_DESC);
          oprot.writeString(struct.cpMemo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpImgs != null) {
        if (struct.isSetCpImgs()) {
          oprot.writeFieldBegin(CP_IMGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cpImgs.size()));
            for (String _iter102 : struct.cpImgs)
            {
              oprot.writeString(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI64(struct.adId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUB_TIME_FIELD_DESC);
      oprot.writeI64(struct.pubTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAVORITES_FIELD_DESC);
      oprot.writeI64(struct.favorites);
      oprot.writeFieldEnd();
      if (struct.cpclass != null) {
        if (struct.isSetCpclass()) {
          oprot.writeFieldBegin(CPCLASS_FIELD_DESC);
          oprot.writeString(struct.cpclass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTurn_type()) {
        oprot.writeFieldBegin(TURN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.turn_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParam_type()) {
        oprot.writeFieldBegin(PARAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.param_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnused1()) {
        oprot.writeFieldBegin(UNUSED1_FIELD_DESC);
        oprot.writeI32(struct.unused1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnused2()) {
        oprot.writeFieldBegin(UNUSED2_FIELD_DESC);
        oprot.writeI32(struct.unused2);
        oprot.writeFieldEnd();
      }
      if (struct.adSource != null) {
        if (struct.isSetAdSource()) {
          oprot.writeFieldBegin(AD_SOURCE_FIELD_DESC);
          oprot.writeString(struct.adSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.third_url != null) {
        if (struct.isSetThird_url()) {
          oprot.writeFieldBegin(THIRD_URL_FIELD_DESC);
          oprot.writeString(struct.third_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTopAdViewNum()) {
        oprot.writeFieldBegin(TOP_AD_VIEW_NUM_FIELD_DESC);
        oprot.writeI32(struct.topAdViewNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTopAdClickNum()) {
        oprot.writeFieldBegin(TOP_AD_CLICK_NUM_FIELD_DESC);
        oprot.writeI32(struct.topAdClickNum);
        oprot.writeFieldEnd();
      }
      if (struct.topAdTimeRanges != null) {
        if (struct.isSetTopAdTimeRanges()) {
          oprot.writeFieldBegin(TOP_AD_TIME_RANGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topAdTimeRanges.size()));
            for (LimitTimeRangeSec _iter103 : struct.topAdTimeRanges)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.buttonName != null) {
        if (struct.isSetButtonName()) {
          oprot.writeFieldBegin(BUTTON_NAME_FIELD_DESC);
          oprot.writeString(struct.buttonName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mutiAction != null) {
        if (struct.isSetMutiAction()) {
          oprot.writeFieldBegin(MUTI_ACTION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mutiAction.size()));
            for (AdMutiAction _iter104 : struct.mutiAction)
            {
              _iter104.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsUseThirdImg()) {
        oprot.writeFieldBegin(IS_USE_THIRD_IMG_FIELD_DESC);
        oprot.writeBool(struct.isUseThirdImg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdpos()) {
        oprot.writeFieldBegin(ADPOS_FIELD_DESC);
        oprot.writeI32(struct.adpos);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsNeedSrcImg()) {
        oprot.writeFieldBegin(IS_NEED_SRC_IMG_FIELD_DESC);
        oprot.writeBool(struct.isNeedSrcImg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdSrcType()) {
        oprot.writeFieldBegin(AD_SRC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.adSrcType);
        oprot.writeFieldEnd();
      }
      if (struct.thirdReportLinks != null) {
        if (struct.isSetThirdReportLinks()) {
          oprot.writeFieldBegin(THIRD_REPORT_LINKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.thirdReportLinks.size()));
            for (Map.Entry<String, List<String>> _iter105 : struct.thirdReportLinks.entrySet())
            {
              oprot.writeString(_iter105.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter105.getValue().size()));
                for (String _iter106 : _iter105.getValue())
                {
                  oprot.writeString(_iter106);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoImg != null) {
        if (struct.isSetLogoImg()) {
          oprot.writeFieldBegin(LOGO_IMG_FIELD_DESC);
          struct.logoImg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adVid != null) {
        if (struct.isSetAdVid()) {
          oprot.writeFieldBegin(AD_VID_FIELD_DESC);
          struct.adVid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.settlementType != null) {
        if (struct.isSetSettlementType()) {
          oprot.writeFieldBegin(SETTLEMENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.settlementType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSettlementPrice()) {
        oprot.writeFieldBegin(SETTLEMENT_PRICE_FIELD_DESC);
        oprot.writeI32(struct.settlementPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdSrc()) {
        oprot.writeFieldBegin(AD_SRC_FIELD_DESC);
        oprot.writeI32(struct.adSrc);
        oprot.writeFieldEnd();
      }
      if (struct.idFromAdSrc != null) {
        if (struct.isSetIdFromAdSrc()) {
          oprot.writeFieldBegin(ID_FROM_AD_SRC_FIELD_DESC);
          oprot.writeString(struct.idFromAdSrc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsHtmlAd()) {
        oprot.writeFieldBegin(IS_HTML_AD_FIELD_DESC);
        oprot.writeBool(struct.isHtmlAd);
        oprot.writeFieldEnd();
      }
      if (struct.htmlSnippet != null) {
        if (struct.isSetHtmlSnippet()) {
          oprot.writeFieldBegin(HTML_SNIPPET_FIELD_DESC);
          oprot.writeString(struct.htmlSnippet);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdContentTupleSchemeFactory implements SchemeFactory {
    public AdContentTupleScheme getScheme() {
      return new AdContentTupleScheme();
    }
  }

  private static class AdContentTupleScheme extends TupleScheme<AdContent> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.marketTitle);
      oprot.writeI32(struct.type);
      oprot.writeI64(struct.adId);
      oprot.writeI64(struct.pubTime);
      oprot.writeI64(struct.favorites);
      BitSet optionals = new BitSet();
      if (struct.isSetGuideTitle()) {
        optionals.set(0);
      }
      if (struct.isSetImglist()) {
        optionals.set(1);
      }
      if (struct.isSetContentExist()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetLinkurl()) {
        optionals.set(4);
      }
      if (struct.isSetPhone()) {
        optionals.set(5);
      }
      if (struct.isSetPosition()) {
        optionals.set(6);
      }
      if (struct.isSetCpName()) {
        optionals.set(7);
      }
      if (struct.isSetCpAuthor()) {
        optionals.set(8);
      }
      if (struct.isSetCpVersion()) {
        optionals.set(9);
      }
      if (struct.isSetCpLanguage()) {
        optionals.set(10);
      }
      if (struct.isSetCpPackage()) {
        optionals.set(11);
      }
      if (struct.isSetCpIcon()) {
        optionals.set(12);
      }
      if (struct.isSetCpApk()) {
        optionals.set(13);
      }
      if (struct.isSetCpMemo()) {
        optionals.set(14);
      }
      if (struct.isSetCpImgs()) {
        optionals.set(15);
      }
      if (struct.isSetCpclass()) {
        optionals.set(16);
      }
      if (struct.isSetTurn_type()) {
        optionals.set(17);
      }
      if (struct.isSetParam_type()) {
        optionals.set(18);
      }
      if (struct.isSetUnused1()) {
        optionals.set(19);
      }
      if (struct.isSetUnused2()) {
        optionals.set(20);
      }
      if (struct.isSetAdSource()) {
        optionals.set(21);
      }
      if (struct.isSetAction()) {
        optionals.set(22);
      }
      if (struct.isSetThird_url()) {
        optionals.set(23);
      }
      if (struct.isSetTopAdViewNum()) {
        optionals.set(24);
      }
      if (struct.isSetTopAdClickNum()) {
        optionals.set(25);
      }
      if (struct.isSetTopAdTimeRanges()) {
        optionals.set(26);
      }
      if (struct.isSetButtonName()) {
        optionals.set(27);
      }
      if (struct.isSetMutiAction()) {
        optionals.set(28);
      }
      if (struct.isSetIsUseThirdImg()) {
        optionals.set(29);
      }
      if (struct.isSetAdpos()) {
        optionals.set(30);
      }
      if (struct.isSetIsNeedSrcImg()) {
        optionals.set(31);
      }
      if (struct.isSetAdSrcType()) {
        optionals.set(32);
      }
      if (struct.isSetThirdReportLinks()) {
        optionals.set(33);
      }
      if (struct.isSetLogoImg()) {
        optionals.set(34);
      }
      if (struct.isSetAdVid()) {
        optionals.set(35);
      }
      if (struct.isSetSettlementType()) {
        optionals.set(36);
      }
      if (struct.isSetSettlementPrice()) {
        optionals.set(37);
      }
      if (struct.isSetAdSrc()) {
        optionals.set(38);
      }
      if (struct.isSetIdFromAdSrc()) {
        optionals.set(39);
      }
      if (struct.isSetIsHtmlAd()) {
        optionals.set(40);
      }
      if (struct.isSetHtmlSnippet()) {
        optionals.set(41);
      }
      oprot.writeBitSet(optionals, 42);
      if (struct.isSetGuideTitle()) {
        oprot.writeString(struct.guideTitle);
      }
      if (struct.isSetImglist()) {
        {
          oprot.writeI32(struct.imglist.size());
          for (AdImg _iter107 : struct.imglist)
          {
            _iter107.write(oprot);
          }
        }
      }
      if (struct.isSetContentExist()) {
        oprot.writeI32(struct.contentExist);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetLinkurl()) {
        oprot.writeString(struct.linkurl);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetPosition()) {
        {
          oprot.writeI32(struct.position.size());
          for (Position _iter108 : struct.position)
          {
            _iter108.write(oprot);
          }
        }
      }
      if (struct.isSetCpName()) {
        oprot.writeString(struct.cpName);
      }
      if (struct.isSetCpAuthor()) {
        oprot.writeString(struct.cpAuthor);
      }
      if (struct.isSetCpVersion()) {
        oprot.writeString(struct.cpVersion);
      }
      if (struct.isSetCpLanguage()) {
        oprot.writeString(struct.cpLanguage);
      }
      if (struct.isSetCpPackage()) {
        oprot.writeString(struct.cpPackage);
      }
      if (struct.isSetCpIcon()) {
        oprot.writeString(struct.cpIcon);
      }
      if (struct.isSetCpApk()) {
        oprot.writeString(struct.cpApk);
      }
      if (struct.isSetCpMemo()) {
        oprot.writeString(struct.cpMemo);
      }
      if (struct.isSetCpImgs()) {
        {
          oprot.writeI32(struct.cpImgs.size());
          for (String _iter109 : struct.cpImgs)
          {
            oprot.writeString(_iter109);
          }
        }
      }
      if (struct.isSetCpclass()) {
        oprot.writeString(struct.cpclass);
      }
      if (struct.isSetTurn_type()) {
        oprot.writeI32(struct.turn_type);
      }
      if (struct.isSetParam_type()) {
        oprot.writeI32(struct.param_type);
      }
      if (struct.isSetUnused1()) {
        oprot.writeI32(struct.unused1);
      }
      if (struct.isSetUnused2()) {
        oprot.writeI32(struct.unused2);
      }
      if (struct.isSetAdSource()) {
        oprot.writeString(struct.adSource);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetThird_url()) {
        oprot.writeString(struct.third_url);
      }
      if (struct.isSetTopAdViewNum()) {
        oprot.writeI32(struct.topAdViewNum);
      }
      if (struct.isSetTopAdClickNum()) {
        oprot.writeI32(struct.topAdClickNum);
      }
      if (struct.isSetTopAdTimeRanges()) {
        {
          oprot.writeI32(struct.topAdTimeRanges.size());
          for (LimitTimeRangeSec _iter110 : struct.topAdTimeRanges)
          {
            _iter110.write(oprot);
          }
        }
      }
      if (struct.isSetButtonName()) {
        oprot.writeString(struct.buttonName);
      }
      if (struct.isSetMutiAction()) {
        {
          oprot.writeI32(struct.mutiAction.size());
          for (AdMutiAction _iter111 : struct.mutiAction)
          {
            _iter111.write(oprot);
          }
        }
      }
      if (struct.isSetIsUseThirdImg()) {
        oprot.writeBool(struct.isUseThirdImg);
      }
      if (struct.isSetAdpos()) {
        oprot.writeI32(struct.adpos);
      }
      if (struct.isSetIsNeedSrcImg()) {
        oprot.writeBool(struct.isNeedSrcImg);
      }
      if (struct.isSetAdSrcType()) {
        oprot.writeI32(struct.adSrcType);
      }
      if (struct.isSetThirdReportLinks()) {
        {
          oprot.writeI32(struct.thirdReportLinks.size());
          for (Map.Entry<String, List<String>> _iter112 : struct.thirdReportLinks.entrySet())
          {
            oprot.writeString(_iter112.getKey());
            {
              oprot.writeI32(_iter112.getValue().size());
              for (String _iter113 : _iter112.getValue())
              {
                oprot.writeString(_iter113);
              }
            }
          }
        }
      }
      if (struct.isSetLogoImg()) {
        struct.logoImg.write(oprot);
      }
      if (struct.isSetAdVid()) {
        struct.adVid.write(oprot);
      }
      if (struct.isSetSettlementType()) {
        oprot.writeI32(struct.settlementType.getValue());
      }
      if (struct.isSetSettlementPrice()) {
        oprot.writeI32(struct.settlementPrice);
      }
      if (struct.isSetAdSrc()) {
        oprot.writeI32(struct.adSrc);
      }
      if (struct.isSetIdFromAdSrc()) {
        oprot.writeString(struct.idFromAdSrc);
      }
      if (struct.isSetIsHtmlAd()) {
        oprot.writeBool(struct.isHtmlAd);
      }
      if (struct.isSetHtmlSnippet()) {
        oprot.writeString(struct.htmlSnippet);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.marketTitle = iprot.readString();
      struct.setMarketTitleIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.adId = iprot.readI64();
      struct.setAdIdIsSet(true);
      struct.pubTime = iprot.readI64();
      struct.setPubTimeIsSet(true);
      struct.favorites = iprot.readI64();
      struct.setFavoritesIsSet(true);
      BitSet incoming = iprot.readBitSet(42);
      if (incoming.get(0)) {
        struct.guideTitle = iprot.readString();
        struct.setGuideTitleIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.imglist = new ArrayList<AdImg>(_list114.size);
          AdImg _elem115;
          for (int _i116 = 0; _i116 < _list114.size; ++_i116)
          {
            _elem115 = new AdImg();
            _elem115.read(iprot);
            struct.imglist.add(_elem115);
          }
        }
        struct.setImglistIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contentExist = iprot.readI32();
        struct.setContentExistIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.linkurl = iprot.readString();
        struct.setLinkurlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.position = new ArrayList<Position>(_list117.size);
          Position _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new Position();
            _elem118.read(iprot);
            struct.position.add(_elem118);
          }
        }
        struct.setPositionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cpName = iprot.readString();
        struct.setCpNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cpAuthor = iprot.readString();
        struct.setCpAuthorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cpVersion = iprot.readString();
        struct.setCpVersionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cpLanguage = iprot.readString();
        struct.setCpLanguageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cpPackage = iprot.readString();
        struct.setCpPackageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cpIcon = iprot.readString();
        struct.setCpIconIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cpApk = iprot.readString();
        struct.setCpApkIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cpMemo = iprot.readString();
        struct.setCpMemoIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list120 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cpImgs = new ArrayList<String>(_list120.size);
          String _elem121;
          for (int _i122 = 0; _i122 < _list120.size; ++_i122)
          {
            _elem121 = iprot.readString();
            struct.cpImgs.add(_elem121);
          }
        }
        struct.setCpImgsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cpclass = iprot.readString();
        struct.setCpclassIsSet(true);
      }
      if (incoming.get(17)) {
        struct.turn_type = iprot.readI32();
        struct.setTurn_typeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.param_type = iprot.readI32();
        struct.setParam_typeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.unused1 = iprot.readI32();
        struct.setUnused1IsSet(true);
      }
      if (incoming.get(20)) {
        struct.unused2 = iprot.readI32();
        struct.setUnused2IsSet(true);
      }
      if (incoming.get(21)) {
        struct.adSource = iprot.readString();
        struct.setAdSourceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.third_url = iprot.readString();
        struct.setThird_urlIsSet(true);
      }
      if (incoming.get(24)) {
        struct.topAdViewNum = iprot.readI32();
        struct.setTopAdViewNumIsSet(true);
      }
      if (incoming.get(25)) {
        struct.topAdClickNum = iprot.readI32();
        struct.setTopAdClickNumIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.topAdTimeRanges = new ArrayList<LimitTimeRangeSec>(_list123.size);
          LimitTimeRangeSec _elem124;
          for (int _i125 = 0; _i125 < _list123.size; ++_i125)
          {
            _elem124 = new LimitTimeRangeSec();
            _elem124.read(iprot);
            struct.topAdTimeRanges.add(_elem124);
          }
        }
        struct.setTopAdTimeRangesIsSet(true);
      }
      if (incoming.get(27)) {
        struct.buttonName = iprot.readString();
        struct.setButtonNameIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list126 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mutiAction = new ArrayList<AdMutiAction>(_list126.size);
          AdMutiAction _elem127;
          for (int _i128 = 0; _i128 < _list126.size; ++_i128)
          {
            _elem127 = new AdMutiAction();
            _elem127.read(iprot);
            struct.mutiAction.add(_elem127);
          }
        }
        struct.setMutiActionIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isUseThirdImg = iprot.readBool();
        struct.setIsUseThirdImgIsSet(true);
      }
      if (incoming.get(30)) {
        struct.adpos = iprot.readI32();
        struct.setAdposIsSet(true);
      }
      if (incoming.get(31)) {
        struct.isNeedSrcImg = iprot.readBool();
        struct.setIsNeedSrcImgIsSet(true);
      }
      if (incoming.get(32)) {
        struct.adSrcType = iprot.readI32();
        struct.setAdSrcTypeIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TMap _map129 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.thirdReportLinks = new HashMap<String,List<String>>(2*_map129.size);
          String _key130;
          List<String> _val131;
          for (int _i132 = 0; _i132 < _map129.size; ++_i132)
          {
            _key130 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val131 = new ArrayList<String>(_list133.size);
              String _elem134;
              for (int _i135 = 0; _i135 < _list133.size; ++_i135)
              {
                _elem134 = iprot.readString();
                _val131.add(_elem134);
              }
            }
            struct.thirdReportLinks.put(_key130, _val131);
          }
        }
        struct.setThirdReportLinksIsSet(true);
      }
      if (incoming.get(34)) {
        struct.logoImg = new AdImg();
        struct.logoImg.read(iprot);
        struct.setLogoImgIsSet(true);
      }
      if (incoming.get(35)) {
        struct.adVid = new AdVid();
        struct.adVid.read(iprot);
        struct.setAdVidIsSet(true);
      }
      if (incoming.get(36)) {
        struct.settlementType = com.ocean.proxy.thrift.entity.SettlementType.findByValue(iprot.readI32());
        struct.setSettlementTypeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.settlementPrice = iprot.readI32();
        struct.setSettlementPriceIsSet(true);
      }
      if (incoming.get(38)) {
        struct.adSrc = iprot.readI32();
        struct.setAdSrcIsSet(true);
      }
      if (incoming.get(39)) {
        struct.idFromAdSrc = iprot.readString();
        struct.setIdFromAdSrcIsSet(true);
      }
      if (incoming.get(40)) {
        struct.isHtmlAd = iprot.readBool();
        struct.setIsHtmlAdIsSet(true);
      }
      if (incoming.get(41)) {
        struct.htmlSnippet = iprot.readString();
        struct.setHtmlSnippetIsSet(true);
      }
    }
  }

}

