/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class DateClickViewLimit implements org.apache.thrift.TBase<DateClickViewLimit, DateClickViewLimit._Fields>, java.io.Serializable, Cloneable, Comparable<DateClickViewLimit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateClickViewLimit");

  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LIMIT_COND_FIELD_DESC = new org.apache.thrift.protocol.TField("limitCond", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("limitNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LIMIT_CLICK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("limitClickNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRange", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TURN_PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnPlayType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TURN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnLimit", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TURN_CLICK_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnClickLimit", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TM_FIELD_DESC = new org.apache.thrift.protocol.TField("tm", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateClickViewLimitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateClickViewLimitTupleSchemeFactory());
  }

  public Date startDate; // required
  public Date endDate; // required
  public int limitCond; // optional
  public int limitNum; // optional
  public int limitClickNum; // optional
  public LimitTimeRange timeRange; // optional
  public int TurnPlayType; // optional
  public int TurnLimit; // optional
  public int TurnClickLimit; // optional
  public List<LimitTimeRangeSec> tm; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_DATE((short)1, "startDate"),
    END_DATE((short)2, "endDate"),
    LIMIT_COND((short)3, "limitCond"),
    LIMIT_NUM((short)4, "limitNum"),
    LIMIT_CLICK_NUM((short)5, "limitClickNum"),
    TIME_RANGE((short)6, "timeRange"),
    TURN_PLAY_TYPE((short)7, "TurnPlayType"),
    TURN_LIMIT((short)8, "TurnLimit"),
    TURN_CLICK_LIMIT((short)9, "TurnClickLimit"),
    TM((short)10, "tm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_DATE
          return START_DATE;
        case 2: // END_DATE
          return END_DATE;
        case 3: // LIMIT_COND
          return LIMIT_COND;
        case 4: // LIMIT_NUM
          return LIMIT_NUM;
        case 5: // LIMIT_CLICK_NUM
          return LIMIT_CLICK_NUM;
        case 6: // TIME_RANGE
          return TIME_RANGE;
        case 7: // TURN_PLAY_TYPE
          return TURN_PLAY_TYPE;
        case 8: // TURN_LIMIT
          return TURN_LIMIT;
        case 9: // TURN_CLICK_LIMIT
          return TURN_CLICK_LIMIT;
        case 10: // TM
          return TM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITCOND_ISSET_ID = 0;
  private static final int __LIMITNUM_ISSET_ID = 1;
  private static final int __LIMITCLICKNUM_ISSET_ID = 2;
  private static final int __TURNPLAYTYPE_ISSET_ID = 3;
  private static final int __TURNLIMIT_ISSET_ID = 4;
  private static final int __TURNCLICKLIMIT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LIMIT_COND,_Fields.LIMIT_NUM,_Fields.LIMIT_CLICK_NUM,_Fields.TIME_RANGE,_Fields.TURN_PLAY_TYPE,_Fields.TURN_LIMIT,_Fields.TURN_CLICK_LIMIT,_Fields.TM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    tmpMap.put(_Fields.LIMIT_COND, new org.apache.thrift.meta_data.FieldMetaData("limitCond", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_NUM, new org.apache.thrift.meta_data.FieldMetaData("limitNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_CLICK_NUM, new org.apache.thrift.meta_data.FieldMetaData("limitClickNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_RANGE, new org.apache.thrift.meta_data.FieldMetaData("timeRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitTimeRange.class)));
    tmpMap.put(_Fields.TURN_PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TurnPlayType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("TurnLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_CLICK_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("TurnClickLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TM, new org.apache.thrift.meta_data.FieldMetaData("tm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitTimeRangeSec.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateClickViewLimit.class, metaDataMap);
  }

  public DateClickViewLimit() {
  }

  public DateClickViewLimit(
    Date startDate,
    Date endDate)
  {
    this();
    this.startDate = startDate;
    this.endDate = endDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateClickViewLimit(DateClickViewLimit other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStartDate()) {
      this.startDate = new Date(other.startDate);
    }
    if (other.isSetEndDate()) {
      this.endDate = new Date(other.endDate);
    }
    this.limitCond = other.limitCond;
    this.limitNum = other.limitNum;
    this.limitClickNum = other.limitClickNum;
    if (other.isSetTimeRange()) {
      this.timeRange = new LimitTimeRange(other.timeRange);
    }
    this.TurnPlayType = other.TurnPlayType;
    this.TurnLimit = other.TurnLimit;
    this.TurnClickLimit = other.TurnClickLimit;
    if (other.isSetTm()) {
      List<LimitTimeRangeSec> __this__tm = new ArrayList<LimitTimeRangeSec>(other.tm.size());
      for (LimitTimeRangeSec other_element : other.tm) {
        __this__tm.add(new LimitTimeRangeSec(other_element));
      }
      this.tm = __this__tm;
    }
  }

  public DateClickViewLimit deepCopy() {
    return new DateClickViewLimit(this);
  }

  
  public void clear() {
    this.startDate = null;
    this.endDate = null;
    setLimitCondIsSet(false);
    this.limitCond = 0;
    setLimitNumIsSet(false);
    this.limitNum = 0;
    setLimitClickNumIsSet(false);
    this.limitClickNum = 0;
    this.timeRange = null;
    setTurnPlayTypeIsSet(false);
    this.TurnPlayType = 0;
    setTurnLimitIsSet(false);
    this.TurnLimit = 0;
    setTurnClickLimitIsSet(false);
    this.TurnClickLimit = 0;
    this.tm = null;
  }

  public Date getStartDate() {
    return this.startDate;
  }

  public DateClickViewLimit setStartDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public Date getEndDate() {
    return this.endDate;
  }

  public DateClickViewLimit setEndDate(Date endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getLimitCond() {
    return this.limitCond;
  }

  public DateClickViewLimit setLimitCond(int limitCond) {
    this.limitCond = limitCond;
    setLimitCondIsSet(true);
    return this;
  }

  public void unsetLimitCond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCOND_ISSET_ID);
  }

  /** Returns true if field limitCond is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitCond() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCOND_ISSET_ID);
  }

  public void setLimitCondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCOND_ISSET_ID, value);
  }

  public int getLimitNum() {
    return this.limitNum;
  }

  public DateClickViewLimit setLimitNum(int limitNum) {
    this.limitNum = limitNum;
    setLimitNumIsSet(true);
    return this;
  }

  public void unsetLimitNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITNUM_ISSET_ID);
  }

  /** Returns true if field limitNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITNUM_ISSET_ID);
  }

  public void setLimitNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITNUM_ISSET_ID, value);
  }

  public int getLimitClickNum() {
    return this.limitClickNum;
  }

  public DateClickViewLimit setLimitClickNum(int limitClickNum) {
    this.limitClickNum = limitClickNum;
    setLimitClickNumIsSet(true);
    return this;
  }

  public void unsetLimitClickNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID);
  }

  /** Returns true if field limitClickNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitClickNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID);
  }

  public void setLimitClickNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID, value);
  }

  public LimitTimeRange getTimeRange() {
    return this.timeRange;
  }

  public DateClickViewLimit setTimeRange(LimitTimeRange timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  public void unsetTimeRange() {
    this.timeRange = null;
  }

  /** Returns true if field timeRange is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRange() {
    return this.timeRange != null;
  }

  public void setTimeRangeIsSet(boolean value) {
    if (!value) {
      this.timeRange = null;
    }
  }

  public int getTurnPlayType() {
    return this.TurnPlayType;
  }

  public DateClickViewLimit setTurnPlayType(int TurnPlayType) {
    this.TurnPlayType = TurnPlayType;
    setTurnPlayTypeIsSet(true);
    return this;
  }

  public void unsetTurnPlayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID);
  }

  /** Returns true if field TurnPlayType is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnPlayType() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID);
  }

  public void setTurnPlayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID, value);
  }

  public int getTurnLimit() {
    return this.TurnLimit;
  }

  public DateClickViewLimit setTurnLimit(int TurnLimit) {
    this.TurnLimit = TurnLimit;
    setTurnLimitIsSet(true);
    return this;
  }

  public void unsetTurnLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNLIMIT_ISSET_ID);
  }

  /** Returns true if field TurnLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNLIMIT_ISSET_ID);
  }

  public void setTurnLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNLIMIT_ISSET_ID, value);
  }

  public int getTurnClickLimit() {
    return this.TurnClickLimit;
  }

  public DateClickViewLimit setTurnClickLimit(int TurnClickLimit) {
    this.TurnClickLimit = TurnClickLimit;
    setTurnClickLimitIsSet(true);
    return this;
  }

  public void unsetTurnClickLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID);
  }

  /** Returns true if field TurnClickLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnClickLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID);
  }

  public void setTurnClickLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID, value);
  }

  public int getTmSize() {
    return (this.tm == null) ? 0 : this.tm.size();
  }

  public java.util.Iterator<LimitTimeRangeSec> getTmIterator() {
    return (this.tm == null) ? null : this.tm.iterator();
  }

  public void addToTm(LimitTimeRangeSec elem) {
    if (this.tm == null) {
      this.tm = new ArrayList<LimitTimeRangeSec>();
    }
    this.tm.add(elem);
  }

  public List<LimitTimeRangeSec> getTm() {
    return this.tm;
  }

  public DateClickViewLimit setTm(List<LimitTimeRangeSec> tm) {
    this.tm = tm;
    return this;
  }

  public void unsetTm() {
    this.tm = null;
  }

  /** Returns true if field tm is set (has been assigned a value) and false otherwise */
  public boolean isSetTm() {
    return this.tm != null;
  }

  public void setTmIsSet(boolean value) {
    if (!value) {
      this.tm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Date)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Date)value);
      }
      break;

    case LIMIT_COND:
      if (value == null) {
        unsetLimitCond();
      } else {
        setLimitCond((Integer)value);
      }
      break;

    case LIMIT_NUM:
      if (value == null) {
        unsetLimitNum();
      } else {
        setLimitNum((Integer)value);
      }
      break;

    case LIMIT_CLICK_NUM:
      if (value == null) {
        unsetLimitClickNum();
      } else {
        setLimitClickNum((Integer)value);
      }
      break;

    case TIME_RANGE:
      if (value == null) {
        unsetTimeRange();
      } else {
        setTimeRange((LimitTimeRange)value);
      }
      break;

    case TURN_PLAY_TYPE:
      if (value == null) {
        unsetTurnPlayType();
      } else {
        setTurnPlayType((Integer)value);
      }
      break;

    case TURN_LIMIT:
      if (value == null) {
        unsetTurnLimit();
      } else {
        setTurnLimit((Integer)value);
      }
      break;

    case TURN_CLICK_LIMIT:
      if (value == null) {
        unsetTurnClickLimit();
      } else {
        setTurnClickLimit((Integer)value);
      }
      break;

    case TM:
      if (value == null) {
        unsetTm();
      } else {
        setTm((List<LimitTimeRangeSec>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case LIMIT_COND:
      return Integer.valueOf(getLimitCond());

    case LIMIT_NUM:
      return Integer.valueOf(getLimitNum());

    case LIMIT_CLICK_NUM:
      return Integer.valueOf(getLimitClickNum());

    case TIME_RANGE:
      return getTimeRange();

    case TURN_PLAY_TYPE:
      return Integer.valueOf(getTurnPlayType());

    case TURN_LIMIT:
      return Integer.valueOf(getTurnLimit());

    case TURN_CLICK_LIMIT:
      return Integer.valueOf(getTurnClickLimit());

    case TM:
      return getTm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case LIMIT_COND:
      return isSetLimitCond();
    case LIMIT_NUM:
      return isSetLimitNum();
    case LIMIT_CLICK_NUM:
      return isSetLimitClickNum();
    case TIME_RANGE:
      return isSetTimeRange();
    case TURN_PLAY_TYPE:
      return isSetTurnPlayType();
    case TURN_LIMIT:
      return isSetTurnLimit();
    case TURN_CLICK_LIMIT:
      return isSetTurnClickLimit();
    case TM:
      return isSetTm();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateClickViewLimit)
      return this.equals((DateClickViewLimit)that);
    return false;
  }

  public boolean equals(DateClickViewLimit that) {
    if (that == null)
      return false;

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_limitCond = true && this.isSetLimitCond();
    boolean that_present_limitCond = true && that.isSetLimitCond();
    if (this_present_limitCond || that_present_limitCond) {
      if (!(this_present_limitCond && that_present_limitCond))
        return false;
      if (this.limitCond != that.limitCond)
        return false;
    }

    boolean this_present_limitNum = true && this.isSetLimitNum();
    boolean that_present_limitNum = true && that.isSetLimitNum();
    if (this_present_limitNum || that_present_limitNum) {
      if (!(this_present_limitNum && that_present_limitNum))
        return false;
      if (this.limitNum != that.limitNum)
        return false;
    }

    boolean this_present_limitClickNum = true && this.isSetLimitClickNum();
    boolean that_present_limitClickNum = true && that.isSetLimitClickNum();
    if (this_present_limitClickNum || that_present_limitClickNum) {
      if (!(this_present_limitClickNum && that_present_limitClickNum))
        return false;
      if (this.limitClickNum != that.limitClickNum)
        return false;
    }

    boolean this_present_timeRange = true && this.isSetTimeRange();
    boolean that_present_timeRange = true && that.isSetTimeRange();
    if (this_present_timeRange || that_present_timeRange) {
      if (!(this_present_timeRange && that_present_timeRange))
        return false;
      if (!this.timeRange.equals(that.timeRange))
        return false;
    }

    boolean this_present_TurnPlayType = true && this.isSetTurnPlayType();
    boolean that_present_TurnPlayType = true && that.isSetTurnPlayType();
    if (this_present_TurnPlayType || that_present_TurnPlayType) {
      if (!(this_present_TurnPlayType && that_present_TurnPlayType))
        return false;
      if (this.TurnPlayType != that.TurnPlayType)
        return false;
    }

    boolean this_present_TurnLimit = true && this.isSetTurnLimit();
    boolean that_present_TurnLimit = true && that.isSetTurnLimit();
    if (this_present_TurnLimit || that_present_TurnLimit) {
      if (!(this_present_TurnLimit && that_present_TurnLimit))
        return false;
      if (this.TurnLimit != that.TurnLimit)
        return false;
    }

    boolean this_present_TurnClickLimit = true && this.isSetTurnClickLimit();
    boolean that_present_TurnClickLimit = true && that.isSetTurnClickLimit();
    if (this_present_TurnClickLimit || that_present_TurnClickLimit) {
      if (!(this_present_TurnClickLimit && that_present_TurnClickLimit))
        return false;
      if (this.TurnClickLimit != that.TurnClickLimit)
        return false;
    }

    boolean this_present_tm = true && this.isSetTm();
    boolean that_present_tm = true && that.isSetTm();
    if (this_present_tm || that_present_tm) {
      if (!(this_present_tm && that_present_tm))
        return false;
      if (!this.tm.equals(that.tm))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_limitCond = true && (isSetLimitCond());
    list.add(present_limitCond);
    if (present_limitCond)
      list.add(limitCond);

    boolean present_limitNum = true && (isSetLimitNum());
    list.add(present_limitNum);
    if (present_limitNum)
      list.add(limitNum);

    boolean present_limitClickNum = true && (isSetLimitClickNum());
    list.add(present_limitClickNum);
    if (present_limitClickNum)
      list.add(limitClickNum);

    boolean present_timeRange = true && (isSetTimeRange());
    list.add(present_timeRange);
    if (present_timeRange)
      list.add(timeRange);

    boolean present_TurnPlayType = true && (isSetTurnPlayType());
    list.add(present_TurnPlayType);
    if (present_TurnPlayType)
      list.add(TurnPlayType);

    boolean present_TurnLimit = true && (isSetTurnLimit());
    list.add(present_TurnLimit);
    if (present_TurnLimit)
      list.add(TurnLimit);

    boolean present_TurnClickLimit = true && (isSetTurnClickLimit());
    list.add(present_TurnClickLimit);
    if (present_TurnClickLimit)
      list.add(TurnClickLimit);

    boolean present_tm = true && (isSetTm());
    list.add(present_tm);
    if (present_tm)
      list.add(tm);

    return list.hashCode();
  }

  
  public int compareTo(DateClickViewLimit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitCond()).compareTo(other.isSetLimitCond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitCond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitCond, other.limitCond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitNum()).compareTo(other.isSetLimitNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitNum, other.limitNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitClickNum()).compareTo(other.isSetLimitClickNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitClickNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitClickNum, other.limitClickNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(other.isSetTimeRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRange, other.timeRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnPlayType()).compareTo(other.isSetTurnPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnPlayType, other.TurnPlayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnLimit()).compareTo(other.isSetTurnLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnLimit, other.TurnLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnClickLimit()).compareTo(other.isSetTurnClickLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnClickLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnClickLimit, other.TurnClickLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTm()).compareTo(other.isSetTm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tm, other.tm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("DateClickViewLimit(");
    boolean first = true;

    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (isSetLimitCond()) {
      if (!first) sb.append(", ");
      sb.append("limitCond:");
      sb.append(this.limitCond);
      first = false;
    }
    if (isSetLimitNum()) {
      if (!first) sb.append(", ");
      sb.append("limitNum:");
      sb.append(this.limitNum);
      first = false;
    }
    if (isSetLimitClickNum()) {
      if (!first) sb.append(", ");
      sb.append("limitClickNum:");
      sb.append(this.limitClickNum);
      first = false;
    }
    if (isSetTimeRange()) {
      if (!first) sb.append(", ");
      sb.append("timeRange:");
      if (this.timeRange == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRange);
      }
      first = false;
    }
    if (isSetTurnPlayType()) {
      if (!first) sb.append(", ");
      sb.append("TurnPlayType:");
      sb.append(this.TurnPlayType);
      first = false;
    }
    if (isSetTurnLimit()) {
      if (!first) sb.append(", ");
      sb.append("TurnLimit:");
      sb.append(this.TurnLimit);
      first = false;
    }
    if (isSetTurnClickLimit()) {
      if (!first) sb.append(", ");
      sb.append("TurnClickLimit:");
      sb.append(this.TurnClickLimit);
      first = false;
    }
    if (isSetTm()) {
      if (!first) sb.append(", ");
      sb.append("tm:");
      if (this.tm == null) {
        sb.append("null");
      } else {
        sb.append(this.tm);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (startDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startDate' was not present! Struct: " + toString());
    }
    if (endDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endDate' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (startDate != null) {
      startDate.validate();
    }
    if (endDate != null) {
      endDate.validate();
    }
    if (timeRange != null) {
      timeRange.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateClickViewLimitStandardSchemeFactory implements SchemeFactory {
    public DateClickViewLimitStandardScheme getScheme() {
      return new DateClickViewLimitStandardScheme();
    }
  }

  private static class DateClickViewLimitStandardScheme extends StandardScheme<DateClickViewLimit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateClickViewLimit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startDate = new Date();
              struct.startDate.read(iprot);
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endDate = new Date();
              struct.endDate.read(iprot);
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMIT_COND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitCond = iprot.readI32();
              struct.setLimitCondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitNum = iprot.readI32();
              struct.setLimitNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMIT_CLICK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitClickNum = iprot.readI32();
              struct.setLimitClickNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeRange = new LimitTimeRange();
              struct.timeRange.read(iprot);
              struct.setTimeRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TURN_PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnPlayType = iprot.readI32();
              struct.setTurnPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TURN_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnLimit = iprot.readI32();
              struct.setTurnLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TURN_CLICK_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnClickLimit = iprot.readI32();
              struct.setTurnClickLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.tm = new ArrayList<LimitTimeRangeSec>(_list54.size);
                LimitTimeRangeSec _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = new LimitTimeRangeSec();
                  _elem55.read(iprot);
                  struct.tm.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setTmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateClickViewLimit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        struct.startDate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        struct.endDate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitCond()) {
        oprot.writeFieldBegin(LIMIT_COND_FIELD_DESC);
        oprot.writeI32(struct.limitCond);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitNum()) {
        oprot.writeFieldBegin(LIMIT_NUM_FIELD_DESC);
        oprot.writeI32(struct.limitNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitClickNum()) {
        oprot.writeFieldBegin(LIMIT_CLICK_NUM_FIELD_DESC);
        oprot.writeI32(struct.limitClickNum);
        oprot.writeFieldEnd();
      }
      if (struct.timeRange != null) {
        if (struct.isSetTimeRange()) {
          oprot.writeFieldBegin(TIME_RANGE_FIELD_DESC);
          struct.timeRange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTurnPlayType()) {
        oprot.writeFieldBegin(TURN_PLAY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.TurnPlayType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnLimit()) {
        oprot.writeFieldBegin(TURN_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.TurnLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnClickLimit()) {
        oprot.writeFieldBegin(TURN_CLICK_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.TurnClickLimit);
        oprot.writeFieldEnd();
      }
      if (struct.tm != null) {
        if (struct.isSetTm()) {
          oprot.writeFieldBegin(TM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tm.size()));
            for (LimitTimeRangeSec _iter57 : struct.tm)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateClickViewLimitTupleSchemeFactory implements SchemeFactory {
    public DateClickViewLimitTupleScheme getScheme() {
      return new DateClickViewLimitTupleScheme();
    }
  }

  private static class DateClickViewLimitTupleScheme extends TupleScheme<DateClickViewLimit> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, DateClickViewLimit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.startDate.write(oprot);
      struct.endDate.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetLimitCond()) {
        optionals.set(0);
      }
      if (struct.isSetLimitNum()) {
        optionals.set(1);
      }
      if (struct.isSetLimitClickNum()) {
        optionals.set(2);
      }
      if (struct.isSetTimeRange()) {
        optionals.set(3);
      }
      if (struct.isSetTurnPlayType()) {
        optionals.set(4);
      }
      if (struct.isSetTurnLimit()) {
        optionals.set(5);
      }
      if (struct.isSetTurnClickLimit()) {
        optionals.set(6);
      }
      if (struct.isSetTm()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetLimitCond()) {
        oprot.writeI32(struct.limitCond);
      }
      if (struct.isSetLimitNum()) {
        oprot.writeI32(struct.limitNum);
      }
      if (struct.isSetLimitClickNum()) {
        oprot.writeI32(struct.limitClickNum);
      }
      if (struct.isSetTimeRange()) {
        struct.timeRange.write(oprot);
      }
      if (struct.isSetTurnPlayType()) {
        oprot.writeI32(struct.TurnPlayType);
      }
      if (struct.isSetTurnLimit()) {
        oprot.writeI32(struct.TurnLimit);
      }
      if (struct.isSetTurnClickLimit()) {
        oprot.writeI32(struct.TurnClickLimit);
      }
      if (struct.isSetTm()) {
        {
          oprot.writeI32(struct.tm.size());
          for (LimitTimeRangeSec _iter58 : struct.tm)
          {
            _iter58.write(oprot);
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, DateClickViewLimit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.startDate = new Date();
      struct.startDate.read(iprot);
      struct.setStartDateIsSet(true);
      struct.endDate = new Date();
      struct.endDate.read(iprot);
      struct.setEndDateIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.limitCond = iprot.readI32();
        struct.setLimitCondIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limitNum = iprot.readI32();
        struct.setLimitNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.limitClickNum = iprot.readI32();
        struct.setLimitClickNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timeRange = new LimitTimeRange();
        struct.timeRange.read(iprot);
        struct.setTimeRangeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.TurnPlayType = iprot.readI32();
        struct.setTurnPlayTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.TurnLimit = iprot.readI32();
        struct.setTurnLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.TurnClickLimit = iprot.readI32();
        struct.setTurnClickLimitIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tm = new ArrayList<LimitTimeRangeSec>(_list59.size);
          LimitTimeRangeSec _elem60;
          for (int _i61 = 0; _i61 < _list59.size; ++_i61)
          {
            _elem60 = new LimitTimeRangeSec();
            _elem60.read(iprot);
            struct.tm.add(_elem60);
          }
        }
        struct.setTmIsSet(true);
      }
    }
  }

}

