/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-16")
public class UserAdSpaceAttri implements org.apache.thrift.TBase<UserAdSpaceAttri, UserAdSpaceAttri._Fields>, java.io.Serializable, Cloneable, Comparable<UserAdSpaceAttri> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserAdSpaceAttri");

  private static final org.apache.thrift.protocol.TField SPACE_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceWidth", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPACE_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceHeight", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXPECTED_MARKET_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedMarketTypes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ALLOWED_OPENTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedOpentype", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SPACE_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("spacePosition", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SPACE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField AD_SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adSpaceId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IMG_FORMATS_FIELD_DESC = new org.apache.thrift.protocol.TField("imgFormats", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField IMG_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("imgMaxSize", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField TITLE_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("titleMin", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TITLE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("titleMax", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CW_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("cwMin", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CW_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("cwMax", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField AD_SOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("adSources", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VID_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("vidExt", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField BID_FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("bidFloor", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ALLOWED_HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedHtml", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField JOIN_DSP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("joinDspName", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserAdSpaceAttriStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserAdSpaceAttriTupleSchemeFactory());
  }

  public int spaceWidth; // required
  public int spaceHeight; // required
  public List<ExpectedMarketType> expectedMarketTypes; // optional
  public int allowedOpentype; // optional
  public int spacePosition; // optional
  /**
   * 
   * @see com.ocean.proxy.thrift.entity.AdSpaceType
   */
  public com.ocean.proxy.thrift.entity.AdSpaceType spaceType; // required
  public int appId; // optional
  public int adSpaceId; // optional
  public Set<AdSpaceImgFmt> imgFormats; // optional
  public long imgMaxSize; // optional
  public int titleMin; // optional
  public int titleMax; // optional
  public int cwMin; // optional
  public int cwMax; // optional
  public Set<AdSource> adSources; // optional
  /**
   * 
   * @see From
   */
  public From from; // optional
  public VidExt vidExt; // optional
  public int bidFloor; // optional
  public boolean allowedHtml; // optional
  public String joinDspName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPACE_WIDTH((short)1, "spaceWidth"),
    SPACE_HEIGHT((short)2, "spaceHeight"),
    EXPECTED_MARKET_TYPES((short)3, "expectedMarketTypes"),
    ALLOWED_OPENTYPE((short)4, "allowedOpentype"),
    SPACE_POSITION((short)5, "spacePosition"),
    /**
     * 
     * @see com.ocean.proxy.thrift.entity.AdSpaceType
     */
    SPACE_TYPE((short)6, "spaceType"),
    APP_ID((short)7, "appId"),
    AD_SPACE_ID((short)8, "adSpaceId"),
    IMG_FORMATS((short)9, "imgFormats"),
    IMG_MAX_SIZE((short)10, "imgMaxSize"),
    TITLE_MIN((short)11, "titleMin"),
    TITLE_MAX((short)12, "titleMax"),
    CW_MIN((short)13, "cwMin"),
    CW_MAX((short)14, "cwMax"),
    AD_SOURCES((short)15, "adSources"),
    /**
     * 
     * @see From
     */
    FROM((short)16, "from"),
    VID_EXT((short)17, "vidExt"),
    BID_FLOOR((short)18, "bidFloor"),
    ALLOWED_HTML((short)19, "allowedHtml"),
    JOIN_DSP_NAME((short)20, "joinDspName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPACE_WIDTH
          return SPACE_WIDTH;
        case 2: // SPACE_HEIGHT
          return SPACE_HEIGHT;
        case 3: // EXPECTED_MARKET_TYPES
          return EXPECTED_MARKET_TYPES;
        case 4: // ALLOWED_OPENTYPE
          return ALLOWED_OPENTYPE;
        case 5: // SPACE_POSITION
          return SPACE_POSITION;
        case 6: // SPACE_TYPE
          return SPACE_TYPE;
        case 7: // APP_ID
          return APP_ID;
        case 8: // AD_SPACE_ID
          return AD_SPACE_ID;
        case 9: // IMG_FORMATS
          return IMG_FORMATS;
        case 10: // IMG_MAX_SIZE
          return IMG_MAX_SIZE;
        case 11: // TITLE_MIN
          return TITLE_MIN;
        case 12: // TITLE_MAX
          return TITLE_MAX;
        case 13: // CW_MIN
          return CW_MIN;
        case 14: // CW_MAX
          return CW_MAX;
        case 15: // AD_SOURCES
          return AD_SOURCES;
        case 16: // FROM
          return FROM;
        case 17: // VID_EXT
          return VID_EXT;
        case 18: // BID_FLOOR
          return BID_FLOOR;
        case 19: // ALLOWED_HTML
          return ALLOWED_HTML;
        case 20: // JOIN_DSP_NAME
          return JOIN_DSP_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPACEWIDTH_ISSET_ID = 0;
  private static final int __SPACEHEIGHT_ISSET_ID = 1;
  private static final int __ALLOWEDOPENTYPE_ISSET_ID = 2;
  private static final int __SPACEPOSITION_ISSET_ID = 3;
  private static final int __APPID_ISSET_ID = 4;
  private static final int __ADSPACEID_ISSET_ID = 5;
  private static final int __IMGMAXSIZE_ISSET_ID = 6;
  private static final int __TITLEMIN_ISSET_ID = 7;
  private static final int __TITLEMAX_ISSET_ID = 8;
  private static final int __CWMIN_ISSET_ID = 9;
  private static final int __CWMAX_ISSET_ID = 10;
  private static final int __BIDFLOOR_ISSET_ID = 11;
  private static final int __ALLOWEDHTML_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXPECTED_MARKET_TYPES,_Fields.ALLOWED_OPENTYPE,_Fields.SPACE_POSITION,_Fields.APP_ID,_Fields.AD_SPACE_ID,_Fields.IMG_FORMATS,_Fields.IMG_MAX_SIZE,_Fields.TITLE_MIN,_Fields.TITLE_MAX,_Fields.CW_MIN,_Fields.CW_MAX,_Fields.AD_SOURCES,_Fields.FROM,_Fields.VID_EXT,_Fields.BID_FLOOR,_Fields.ALLOWED_HTML,_Fields.JOIN_DSP_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPACE_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("spaceWidth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("spaceHeight", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPECTED_MARKET_TYPES, new org.apache.thrift.meta_data.FieldMetaData("expectedMarketTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExpectedMarketType.class))));
    tmpMap.put(_Fields.ALLOWED_OPENTYPE, new org.apache.thrift.meta_data.FieldMetaData("allowedOpentype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_POSITION, new org.apache.thrift.meta_data.FieldMetaData("spacePosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("spaceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ocean.proxy.thrift.entity.AdSpaceType.class)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("adSpaceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMG_FORMATS, new org.apache.thrift.meta_data.FieldMetaData("imgFormats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AdSpaceImgFmt.class))));
    tmpMap.put(_Fields.IMG_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("imgMaxSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE_MIN, new org.apache.thrift.meta_data.FieldMetaData("titleMin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE_MAX, new org.apache.thrift.meta_data.FieldMetaData("titleMax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CW_MIN, new org.apache.thrift.meta_data.FieldMetaData("cwMin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CW_MAX, new org.apache.thrift.meta_data.FieldMetaData("cwMax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_SOURCES, new org.apache.thrift.meta_data.FieldMetaData("adSources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AdSource.class))));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, From.class)));
    tmpMap.put(_Fields.VID_EXT, new org.apache.thrift.meta_data.FieldMetaData("vidExt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VidExt.class)));
    tmpMap.put(_Fields.BID_FLOOR, new org.apache.thrift.meta_data.FieldMetaData("bidFloor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOWED_HTML, new org.apache.thrift.meta_data.FieldMetaData("allowedHtml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOIN_DSP_NAME, new org.apache.thrift.meta_data.FieldMetaData("joinDspName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAdSpaceAttri.class, metaDataMap);
  }

  public UserAdSpaceAttri() {
  }

  public UserAdSpaceAttri(
    int spaceWidth,
    int spaceHeight,
    com.ocean.proxy.thrift.entity.AdSpaceType spaceType)
  {
    this();
    this.spaceWidth = spaceWidth;
    setSpaceWidthIsSet(true);
    this.spaceHeight = spaceHeight;
    setSpaceHeightIsSet(true);
    this.spaceType = spaceType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserAdSpaceAttri(UserAdSpaceAttri other) {
    __isset_bitfield = other.__isset_bitfield;
    this.spaceWidth = other.spaceWidth;
    this.spaceHeight = other.spaceHeight;
    if (other.isSetExpectedMarketTypes()) {
      List<ExpectedMarketType> __this__expectedMarketTypes = new ArrayList<ExpectedMarketType>(other.expectedMarketTypes.size());
      for (ExpectedMarketType other_element : other.expectedMarketTypes) {
        __this__expectedMarketTypes.add(other_element);
      }
      this.expectedMarketTypes = __this__expectedMarketTypes;
    }
    this.allowedOpentype = other.allowedOpentype;
    this.spacePosition = other.spacePosition;
    if (other.isSetSpaceType()) {
      this.spaceType = other.spaceType;
    }
    this.appId = other.appId;
    this.adSpaceId = other.adSpaceId;
    if (other.isSetImgFormats()) {
      Set<AdSpaceImgFmt> __this__imgFormats = new HashSet<AdSpaceImgFmt>(other.imgFormats.size());
      for (AdSpaceImgFmt other_element : other.imgFormats) {
        __this__imgFormats.add(other_element);
      }
      this.imgFormats = __this__imgFormats;
    }
    this.imgMaxSize = other.imgMaxSize;
    this.titleMin = other.titleMin;
    this.titleMax = other.titleMax;
    this.cwMin = other.cwMin;
    this.cwMax = other.cwMax;
    if (other.isSetAdSources()) {
      Set<AdSource> __this__adSources = new HashSet<AdSource>(other.adSources.size());
      for (AdSource other_element : other.adSources) {
        __this__adSources.add(other_element);
      }
      this.adSources = __this__adSources;
    }
    if (other.isSetFrom()) {
      this.from = other.from;
    }
    if (other.isSetVidExt()) {
      this.vidExt = new VidExt(other.vidExt);
    }
    this.bidFloor = other.bidFloor;
    this.allowedHtml = other.allowedHtml;
    if (other.isSetJoinDspName()) {
      this.joinDspName = other.joinDspName;
    }
  }

  public UserAdSpaceAttri deepCopy() {
    return new UserAdSpaceAttri(this);
  }

  public void clear() {
    setSpaceWidthIsSet(false);
    this.spaceWidth = 0;
    setSpaceHeightIsSet(false);
    this.spaceHeight = 0;
    this.expectedMarketTypes = null;
    setAllowedOpentypeIsSet(false);
    this.allowedOpentype = 0;
    setSpacePositionIsSet(false);
    this.spacePosition = 0;
    this.spaceType = null;
    setAppIdIsSet(false);
    this.appId = 0;
    setAdSpaceIdIsSet(false);
    this.adSpaceId = 0;
    this.imgFormats = null;
    setImgMaxSizeIsSet(false);
    this.imgMaxSize = 0;
    setTitleMinIsSet(false);
    this.titleMin = 0;
    setTitleMaxIsSet(false);
    this.titleMax = 0;
    setCwMinIsSet(false);
    this.cwMin = 0;
    setCwMaxIsSet(false);
    this.cwMax = 0;
    this.adSources = null;
    this.from = null;
    this.vidExt = null;
    setBidFloorIsSet(false);
    this.bidFloor = 0;
    setAllowedHtmlIsSet(false);
    this.allowedHtml = false;
    this.joinDspName = null;
  }

  public int getSpaceWidth() {
    return this.spaceWidth;
  }

  public UserAdSpaceAttri setSpaceWidth(int spaceWidth) {
    this.spaceWidth = spaceWidth;
    setSpaceWidthIsSet(true);
    return this;
  }

  public void unsetSpaceWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEWIDTH_ISSET_ID);
  }

  /** Returns true if field spaceWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEWIDTH_ISSET_ID);
  }

  public void setSpaceWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEWIDTH_ISSET_ID, value);
  }

  public int getSpaceHeight() {
    return this.spaceHeight;
  }

  public UserAdSpaceAttri setSpaceHeight(int spaceHeight) {
    this.spaceHeight = spaceHeight;
    setSpaceHeightIsSet(true);
    return this;
  }

  public void unsetSpaceHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEHEIGHT_ISSET_ID);
  }

  /** Returns true if field spaceHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEHEIGHT_ISSET_ID);
  }

  public void setSpaceHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEHEIGHT_ISSET_ID, value);
  }

  public int getExpectedMarketTypesSize() {
    return (this.expectedMarketTypes == null) ? 0 : this.expectedMarketTypes.size();
  }

  public java.util.Iterator<ExpectedMarketType> getExpectedMarketTypesIterator() {
    return (this.expectedMarketTypes == null) ? null : this.expectedMarketTypes.iterator();
  }

  public void addToExpectedMarketTypes(ExpectedMarketType elem) {
    if (this.expectedMarketTypes == null) {
      this.expectedMarketTypes = new ArrayList<ExpectedMarketType>();
    }
    this.expectedMarketTypes.add(elem);
  }

  public List<ExpectedMarketType> getExpectedMarketTypes() {
    return this.expectedMarketTypes;
  }

  public UserAdSpaceAttri setExpectedMarketTypes(List<ExpectedMarketType> expectedMarketTypes) {
    this.expectedMarketTypes = expectedMarketTypes;
    return this;
  }

  public void unsetExpectedMarketTypes() {
    this.expectedMarketTypes = null;
  }

  /** Returns true if field expectedMarketTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedMarketTypes() {
    return this.expectedMarketTypes != null;
  }

  public void setExpectedMarketTypesIsSet(boolean value) {
    if (!value) {
      this.expectedMarketTypes = null;
    }
  }

  public int getAllowedOpentype() {
    return this.allowedOpentype;
  }

  public UserAdSpaceAttri setAllowedOpentype(int allowedOpentype) {
    this.allowedOpentype = allowedOpentype;
    setAllowedOpentypeIsSet(true);
    return this;
  }

  public void unsetAllowedOpentype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWEDOPENTYPE_ISSET_ID);
  }

  /** Returns true if field allowedOpentype is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedOpentype() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWEDOPENTYPE_ISSET_ID);
  }

  public void setAllowedOpentypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWEDOPENTYPE_ISSET_ID, value);
  }

  public int getSpacePosition() {
    return this.spacePosition;
  }

  public UserAdSpaceAttri setSpacePosition(int spacePosition) {
    this.spacePosition = spacePosition;
    setSpacePositionIsSet(true);
    return this;
  }

  public void unsetSpacePosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEPOSITION_ISSET_ID);
  }

  /** Returns true if field spacePosition is set (has been assigned a value) and false otherwise */
  public boolean isSetSpacePosition() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEPOSITION_ISSET_ID);
  }

  public void setSpacePositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEPOSITION_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ocean.proxy.thrift.entity.AdSpaceType
   */
  public com.ocean.proxy.thrift.entity.AdSpaceType getSpaceType() {
    return this.spaceType;
  }

  /**
   * 
   * @see com.ocean.proxy.thrift.entity.AdSpaceType
   */
  public UserAdSpaceAttri setSpaceType(com.ocean.proxy.thrift.entity.AdSpaceType spaceType) {
    this.spaceType = spaceType;
    return this;
  }

  public void unsetSpaceType() {
    this.spaceType = null;
  }

  /** Returns true if field spaceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceType() {
    return this.spaceType != null;
  }

  public void setSpaceTypeIsSet(boolean value) {
    if (!value) {
      this.spaceType = null;
    }
  }

  public int getAppId() {
    return this.appId;
  }

  public UserAdSpaceAttri setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public int getAdSpaceId() {
    return this.adSpaceId;
  }

  public UserAdSpaceAttri setAdSpaceId(int adSpaceId) {
    this.adSpaceId = adSpaceId;
    setAdSpaceIdIsSet(true);
    return this;
  }

  public void unsetAdSpaceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  /** Returns true if field adSpaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSpaceId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  public void setAdSpaceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSPACEID_ISSET_ID, value);
  }

  public int getImgFormatsSize() {
    return (this.imgFormats == null) ? 0 : this.imgFormats.size();
  }

  public java.util.Iterator<AdSpaceImgFmt> getImgFormatsIterator() {
    return (this.imgFormats == null) ? null : this.imgFormats.iterator();
  }

  public void addToImgFormats(AdSpaceImgFmt elem) {
    if (this.imgFormats == null) {
      this.imgFormats = new HashSet<AdSpaceImgFmt>();
    }
    this.imgFormats.add(elem);
  }

  public Set<AdSpaceImgFmt> getImgFormats() {
    return this.imgFormats;
  }

  public UserAdSpaceAttri setImgFormats(Set<AdSpaceImgFmt> imgFormats) {
    this.imgFormats = imgFormats;
    return this;
  }

  public void unsetImgFormats() {
    this.imgFormats = null;
  }

  /** Returns true if field imgFormats is set (has been assigned a value) and false otherwise */
  public boolean isSetImgFormats() {
    return this.imgFormats != null;
  }

  public void setImgFormatsIsSet(boolean value) {
    if (!value) {
      this.imgFormats = null;
    }
  }

  public long getImgMaxSize() {
    return this.imgMaxSize;
  }

  public UserAdSpaceAttri setImgMaxSize(long imgMaxSize) {
    this.imgMaxSize = imgMaxSize;
    setImgMaxSizeIsSet(true);
    return this;
  }

  public void unsetImgMaxSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGMAXSIZE_ISSET_ID);
  }

  /** Returns true if field imgMaxSize is set (has been assigned a value) and false otherwise */
  public boolean isSetImgMaxSize() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGMAXSIZE_ISSET_ID);
  }

  public void setImgMaxSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGMAXSIZE_ISSET_ID, value);
  }

  public int getTitleMin() {
    return this.titleMin;
  }

  public UserAdSpaceAttri setTitleMin(int titleMin) {
    this.titleMin = titleMin;
    setTitleMinIsSet(true);
    return this;
  }

  public void unsetTitleMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TITLEMIN_ISSET_ID);
  }

  /** Returns true if field titleMin is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleMin() {
    return EncodingUtils.testBit(__isset_bitfield, __TITLEMIN_ISSET_ID);
  }

  public void setTitleMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TITLEMIN_ISSET_ID, value);
  }

  public int getTitleMax() {
    return this.titleMax;
  }

  public UserAdSpaceAttri setTitleMax(int titleMax) {
    this.titleMax = titleMax;
    setTitleMaxIsSet(true);
    return this;
  }

  public void unsetTitleMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TITLEMAX_ISSET_ID);
  }

  /** Returns true if field titleMax is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleMax() {
    return EncodingUtils.testBit(__isset_bitfield, __TITLEMAX_ISSET_ID);
  }

  public void setTitleMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TITLEMAX_ISSET_ID, value);
  }

  public int getCwMin() {
    return this.cwMin;
  }

  public UserAdSpaceAttri setCwMin(int cwMin) {
    this.cwMin = cwMin;
    setCwMinIsSet(true);
    return this;
  }

  public void unsetCwMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CWMIN_ISSET_ID);
  }

  /** Returns true if field cwMin is set (has been assigned a value) and false otherwise */
  public boolean isSetCwMin() {
    return EncodingUtils.testBit(__isset_bitfield, __CWMIN_ISSET_ID);
  }

  public void setCwMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CWMIN_ISSET_ID, value);
  }

  public int getCwMax() {
    return this.cwMax;
  }

  public UserAdSpaceAttri setCwMax(int cwMax) {
    this.cwMax = cwMax;
    setCwMaxIsSet(true);
    return this;
  }

  public void unsetCwMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CWMAX_ISSET_ID);
  }

  /** Returns true if field cwMax is set (has been assigned a value) and false otherwise */
  public boolean isSetCwMax() {
    return EncodingUtils.testBit(__isset_bitfield, __CWMAX_ISSET_ID);
  }

  public void setCwMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CWMAX_ISSET_ID, value);
  }

  public int getAdSourcesSize() {
    return (this.adSources == null) ? 0 : this.adSources.size();
  }

  public java.util.Iterator<AdSource> getAdSourcesIterator() {
    return (this.adSources == null) ? null : this.adSources.iterator();
  }

  public void addToAdSources(AdSource elem) {
    if (this.adSources == null) {
      this.adSources = new HashSet<AdSource>();
    }
    this.adSources.add(elem);
  }

  public Set<AdSource> getAdSources() {
    return this.adSources;
  }

  public UserAdSpaceAttri setAdSources(Set<AdSource> adSources) {
    this.adSources = adSources;
    return this;
  }

  public void unsetAdSources() {
    this.adSources = null;
  }

  /** Returns true if field adSources is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSources() {
    return this.adSources != null;
  }

  public void setAdSourcesIsSet(boolean value) {
    if (!value) {
      this.adSources = null;
    }
  }

  /**
   * 
   * @see From
   */
  public From getFrom() {
    return this.from;
  }

  /**
   * 
   * @see From
   */
  public UserAdSpaceAttri setFrom(From from) {
    this.from = from;
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public VidExt getVidExt() {
    return this.vidExt;
  }

  public UserAdSpaceAttri setVidExt(VidExt vidExt) {
    this.vidExt = vidExt;
    return this;
  }

  public void unsetVidExt() {
    this.vidExt = null;
  }

  /** Returns true if field vidExt is set (has been assigned a value) and false otherwise */
  public boolean isSetVidExt() {
    return this.vidExt != null;
  }

  public void setVidExtIsSet(boolean value) {
    if (!value) {
      this.vidExt = null;
    }
  }

  public int getBidFloor() {
    return this.bidFloor;
  }

  public UserAdSpaceAttri setBidFloor(int bidFloor) {
    this.bidFloor = bidFloor;
    setBidFloorIsSet(true);
    return this;
  }

  public void unsetBidFloor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDFLOOR_ISSET_ID);
  }

  /** Returns true if field bidFloor is set (has been assigned a value) and false otherwise */
  public boolean isSetBidFloor() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDFLOOR_ISSET_ID);
  }

  public void setBidFloorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDFLOOR_ISSET_ID, value);
  }

  public boolean isAllowedHtml() {
    return this.allowedHtml;
  }

  public UserAdSpaceAttri setAllowedHtml(boolean allowedHtml) {
    this.allowedHtml = allowedHtml;
    setAllowedHtmlIsSet(true);
    return this;
  }

  public void unsetAllowedHtml() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWEDHTML_ISSET_ID);
  }

  /** Returns true if field allowedHtml is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedHtml() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWEDHTML_ISSET_ID);
  }

  public void setAllowedHtmlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWEDHTML_ISSET_ID, value);
  }

  public String getJoinDspName() {
    return this.joinDspName;
  }

  public UserAdSpaceAttri setJoinDspName(String joinDspName) {
    this.joinDspName = joinDspName;
    return this;
  }

  public void unsetJoinDspName() {
    this.joinDspName = null;
  }

  /** Returns true if field joinDspName is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinDspName() {
    return this.joinDspName != null;
  }

  public void setJoinDspNameIsSet(boolean value) {
    if (!value) {
      this.joinDspName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPACE_WIDTH:
      if (value == null) {
        unsetSpaceWidth();
      } else {
        setSpaceWidth((Integer)value);
      }
      break;

    case SPACE_HEIGHT:
      if (value == null) {
        unsetSpaceHeight();
      } else {
        setSpaceHeight((Integer)value);
      }
      break;

    case EXPECTED_MARKET_TYPES:
      if (value == null) {
        unsetExpectedMarketTypes();
      } else {
        setExpectedMarketTypes((List<ExpectedMarketType>)value);
      }
      break;

    case ALLOWED_OPENTYPE:
      if (value == null) {
        unsetAllowedOpentype();
      } else {
        setAllowedOpentype((Integer)value);
      }
      break;

    case SPACE_POSITION:
      if (value == null) {
        unsetSpacePosition();
      } else {
        setSpacePosition((Integer)value);
      }
      break;

    case SPACE_TYPE:
      if (value == null) {
        unsetSpaceType();
      } else {
        setSpaceType((com.ocean.proxy.thrift.entity.AdSpaceType)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case AD_SPACE_ID:
      if (value == null) {
        unsetAdSpaceId();
      } else {
        setAdSpaceId((Integer)value);
      }
      break;

    case IMG_FORMATS:
      if (value == null) {
        unsetImgFormats();
      } else {
        setImgFormats((Set<AdSpaceImgFmt>)value);
      }
      break;

    case IMG_MAX_SIZE:
      if (value == null) {
        unsetImgMaxSize();
      } else {
        setImgMaxSize((Long)value);
      }
      break;

    case TITLE_MIN:
      if (value == null) {
        unsetTitleMin();
      } else {
        setTitleMin((Integer)value);
      }
      break;

    case TITLE_MAX:
      if (value == null) {
        unsetTitleMax();
      } else {
        setTitleMax((Integer)value);
      }
      break;

    case CW_MIN:
      if (value == null) {
        unsetCwMin();
      } else {
        setCwMin((Integer)value);
      }
      break;

    case CW_MAX:
      if (value == null) {
        unsetCwMax();
      } else {
        setCwMax((Integer)value);
      }
      break;

    case AD_SOURCES:
      if (value == null) {
        unsetAdSources();
      } else {
        setAdSources((Set<AdSource>)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((From)value);
      }
      break;

    case VID_EXT:
      if (value == null) {
        unsetVidExt();
      } else {
        setVidExt((VidExt)value);
      }
      break;

    case BID_FLOOR:
      if (value == null) {
        unsetBidFloor();
      } else {
        setBidFloor((Integer)value);
      }
      break;

    case ALLOWED_HTML:
      if (value == null) {
        unsetAllowedHtml();
      } else {
        setAllowedHtml((Boolean)value);
      }
      break;

    case JOIN_DSP_NAME:
      if (value == null) {
        unsetJoinDspName();
      } else {
        setJoinDspName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPACE_WIDTH:
      return Integer.valueOf(getSpaceWidth());

    case SPACE_HEIGHT:
      return Integer.valueOf(getSpaceHeight());

    case EXPECTED_MARKET_TYPES:
      return getExpectedMarketTypes();

    case ALLOWED_OPENTYPE:
      return Integer.valueOf(getAllowedOpentype());

    case SPACE_POSITION:
      return Integer.valueOf(getSpacePosition());

    case SPACE_TYPE:
      return getSpaceType();

    case APP_ID:
      return Integer.valueOf(getAppId());

    case AD_SPACE_ID:
      return Integer.valueOf(getAdSpaceId());

    case IMG_FORMATS:
      return getImgFormats();

    case IMG_MAX_SIZE:
      return Long.valueOf(getImgMaxSize());

    case TITLE_MIN:
      return Integer.valueOf(getTitleMin());

    case TITLE_MAX:
      return Integer.valueOf(getTitleMax());

    case CW_MIN:
      return Integer.valueOf(getCwMin());

    case CW_MAX:
      return Integer.valueOf(getCwMax());

    case AD_SOURCES:
      return getAdSources();

    case FROM:
      return getFrom();

    case VID_EXT:
      return getVidExt();

    case BID_FLOOR:
      return Integer.valueOf(getBidFloor());

    case ALLOWED_HTML:
      return Boolean.valueOf(isAllowedHtml());

    case JOIN_DSP_NAME:
      return getJoinDspName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPACE_WIDTH:
      return isSetSpaceWidth();
    case SPACE_HEIGHT:
      return isSetSpaceHeight();
    case EXPECTED_MARKET_TYPES:
      return isSetExpectedMarketTypes();
    case ALLOWED_OPENTYPE:
      return isSetAllowedOpentype();
    case SPACE_POSITION:
      return isSetSpacePosition();
    case SPACE_TYPE:
      return isSetSpaceType();
    case APP_ID:
      return isSetAppId();
    case AD_SPACE_ID:
      return isSetAdSpaceId();
    case IMG_FORMATS:
      return isSetImgFormats();
    case IMG_MAX_SIZE:
      return isSetImgMaxSize();
    case TITLE_MIN:
      return isSetTitleMin();
    case TITLE_MAX:
      return isSetTitleMax();
    case CW_MIN:
      return isSetCwMin();
    case CW_MAX:
      return isSetCwMax();
    case AD_SOURCES:
      return isSetAdSources();
    case FROM:
      return isSetFrom();
    case VID_EXT:
      return isSetVidExt();
    case BID_FLOOR:
      return isSetBidFloor();
    case ALLOWED_HTML:
      return isSetAllowedHtml();
    case JOIN_DSP_NAME:
      return isSetJoinDspName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserAdSpaceAttri)
      return this.equals((UserAdSpaceAttri)that);
    return false;
  }

  public boolean equals(UserAdSpaceAttri that) {
    if (that == null)
      return false;

    boolean this_present_spaceWidth = true;
    boolean that_present_spaceWidth = true;
    if (this_present_spaceWidth || that_present_spaceWidth) {
      if (!(this_present_spaceWidth && that_present_spaceWidth))
        return false;
      if (this.spaceWidth != that.spaceWidth)
        return false;
    }

    boolean this_present_spaceHeight = true;
    boolean that_present_spaceHeight = true;
    if (this_present_spaceHeight || that_present_spaceHeight) {
      if (!(this_present_spaceHeight && that_present_spaceHeight))
        return false;
      if (this.spaceHeight != that.spaceHeight)
        return false;
    }

    boolean this_present_expectedMarketTypes = true && this.isSetExpectedMarketTypes();
    boolean that_present_expectedMarketTypes = true && that.isSetExpectedMarketTypes();
    if (this_present_expectedMarketTypes || that_present_expectedMarketTypes) {
      if (!(this_present_expectedMarketTypes && that_present_expectedMarketTypes))
        return false;
      if (!this.expectedMarketTypes.equals(that.expectedMarketTypes))
        return false;
    }

    boolean this_present_allowedOpentype = true && this.isSetAllowedOpentype();
    boolean that_present_allowedOpentype = true && that.isSetAllowedOpentype();
    if (this_present_allowedOpentype || that_present_allowedOpentype) {
      if (!(this_present_allowedOpentype && that_present_allowedOpentype))
        return false;
      if (this.allowedOpentype != that.allowedOpentype)
        return false;
    }

    boolean this_present_spacePosition = true && this.isSetSpacePosition();
    boolean that_present_spacePosition = true && that.isSetSpacePosition();
    if (this_present_spacePosition || that_present_spacePosition) {
      if (!(this_present_spacePosition && that_present_spacePosition))
        return false;
      if (this.spacePosition != that.spacePosition)
        return false;
    }

    boolean this_present_spaceType = true && this.isSetSpaceType();
    boolean that_present_spaceType = true && that.isSetSpaceType();
    if (this_present_spaceType || that_present_spaceType) {
      if (!(this_present_spaceType && that_present_spaceType))
        return false;
      if (!this.spaceType.equals(that.spaceType))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_adSpaceId = true && this.isSetAdSpaceId();
    boolean that_present_adSpaceId = true && that.isSetAdSpaceId();
    if (this_present_adSpaceId || that_present_adSpaceId) {
      if (!(this_present_adSpaceId && that_present_adSpaceId))
        return false;
      if (this.adSpaceId != that.adSpaceId)
        return false;
    }

    boolean this_present_imgFormats = true && this.isSetImgFormats();
    boolean that_present_imgFormats = true && that.isSetImgFormats();
    if (this_present_imgFormats || that_present_imgFormats) {
      if (!(this_present_imgFormats && that_present_imgFormats))
        return false;
      if (!this.imgFormats.equals(that.imgFormats))
        return false;
    }

    boolean this_present_imgMaxSize = true && this.isSetImgMaxSize();
    boolean that_present_imgMaxSize = true && that.isSetImgMaxSize();
    if (this_present_imgMaxSize || that_present_imgMaxSize) {
      if (!(this_present_imgMaxSize && that_present_imgMaxSize))
        return false;
      if (this.imgMaxSize != that.imgMaxSize)
        return false;
    }

    boolean this_present_titleMin = true && this.isSetTitleMin();
    boolean that_present_titleMin = true && that.isSetTitleMin();
    if (this_present_titleMin || that_present_titleMin) {
      if (!(this_present_titleMin && that_present_titleMin))
        return false;
      if (this.titleMin != that.titleMin)
        return false;
    }

    boolean this_present_titleMax = true && this.isSetTitleMax();
    boolean that_present_titleMax = true && that.isSetTitleMax();
    if (this_present_titleMax || that_present_titleMax) {
      if (!(this_present_titleMax && that_present_titleMax))
        return false;
      if (this.titleMax != that.titleMax)
        return false;
    }

    boolean this_present_cwMin = true && this.isSetCwMin();
    boolean that_present_cwMin = true && that.isSetCwMin();
    if (this_present_cwMin || that_present_cwMin) {
      if (!(this_present_cwMin && that_present_cwMin))
        return false;
      if (this.cwMin != that.cwMin)
        return false;
    }

    boolean this_present_cwMax = true && this.isSetCwMax();
    boolean that_present_cwMax = true && that.isSetCwMax();
    if (this_present_cwMax || that_present_cwMax) {
      if (!(this_present_cwMax && that_present_cwMax))
        return false;
      if (this.cwMax != that.cwMax)
        return false;
    }

    boolean this_present_adSources = true && this.isSetAdSources();
    boolean that_present_adSources = true && that.isSetAdSources();
    if (this_present_adSources || that_present_adSources) {
      if (!(this_present_adSources && that_present_adSources))
        return false;
      if (!this.adSources.equals(that.adSources))
        return false;
    }

    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }

    boolean this_present_vidExt = true && this.isSetVidExt();
    boolean that_present_vidExt = true && that.isSetVidExt();
    if (this_present_vidExt || that_present_vidExt) {
      if (!(this_present_vidExt && that_present_vidExt))
        return false;
      if (!this.vidExt.equals(that.vidExt))
        return false;
    }

    boolean this_present_bidFloor = true && this.isSetBidFloor();
    boolean that_present_bidFloor = true && that.isSetBidFloor();
    if (this_present_bidFloor || that_present_bidFloor) {
      if (!(this_present_bidFloor && that_present_bidFloor))
        return false;
      if (this.bidFloor != that.bidFloor)
        return false;
    }

    boolean this_present_allowedHtml = true && this.isSetAllowedHtml();
    boolean that_present_allowedHtml = true && that.isSetAllowedHtml();
    if (this_present_allowedHtml || that_present_allowedHtml) {
      if (!(this_present_allowedHtml && that_present_allowedHtml))
        return false;
      if (this.allowedHtml != that.allowedHtml)
        return false;
    }

    boolean this_present_joinDspName = true && this.isSetJoinDspName();
    boolean that_present_joinDspName = true && that.isSetJoinDspName();
    if (this_present_joinDspName || that_present_joinDspName) {
      if (!(this_present_joinDspName && that_present_joinDspName))
        return false;
      if (!this.joinDspName.equals(that.joinDspName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_spaceWidth = true;
    list.add(present_spaceWidth);
    if (present_spaceWidth)
      list.add(spaceWidth);

    boolean present_spaceHeight = true;
    list.add(present_spaceHeight);
    if (present_spaceHeight)
      list.add(spaceHeight);

    boolean present_expectedMarketTypes = true && (isSetExpectedMarketTypes());
    list.add(present_expectedMarketTypes);
    if (present_expectedMarketTypes)
      list.add(expectedMarketTypes);

    boolean present_allowedOpentype = true && (isSetAllowedOpentype());
    list.add(present_allowedOpentype);
    if (present_allowedOpentype)
      list.add(allowedOpentype);

    boolean present_spacePosition = true && (isSetSpacePosition());
    list.add(present_spacePosition);
    if (present_spacePosition)
      list.add(spacePosition);

    boolean present_spaceType = true && (isSetSpaceType());
    list.add(present_spaceType);
    if (present_spaceType)
      list.add(spaceType.getValue());

    boolean present_appId = true && (isSetAppId());
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_adSpaceId = true && (isSetAdSpaceId());
    list.add(present_adSpaceId);
    if (present_adSpaceId)
      list.add(adSpaceId);

    boolean present_imgFormats = true && (isSetImgFormats());
    list.add(present_imgFormats);
    if (present_imgFormats)
      list.add(imgFormats);

    boolean present_imgMaxSize = true && (isSetImgMaxSize());
    list.add(present_imgMaxSize);
    if (present_imgMaxSize)
      list.add(imgMaxSize);

    boolean present_titleMin = true && (isSetTitleMin());
    list.add(present_titleMin);
    if (present_titleMin)
      list.add(titleMin);

    boolean present_titleMax = true && (isSetTitleMax());
    list.add(present_titleMax);
    if (present_titleMax)
      list.add(titleMax);

    boolean present_cwMin = true && (isSetCwMin());
    list.add(present_cwMin);
    if (present_cwMin)
      list.add(cwMin);

    boolean present_cwMax = true && (isSetCwMax());
    list.add(present_cwMax);
    if (present_cwMax)
      list.add(cwMax);

    boolean present_adSources = true && (isSetAdSources());
    list.add(present_adSources);
    if (present_adSources)
      list.add(adSources);

    boolean present_from = true && (isSetFrom());
    list.add(present_from);
    if (present_from)
      list.add(from.getValue());

    boolean present_vidExt = true && (isSetVidExt());
    list.add(present_vidExt);
    if (present_vidExt)
      list.add(vidExt);

    boolean present_bidFloor = true && (isSetBidFloor());
    list.add(present_bidFloor);
    if (present_bidFloor)
      list.add(bidFloor);

    boolean present_allowedHtml = true && (isSetAllowedHtml());
    list.add(present_allowedHtml);
    if (present_allowedHtml)
      list.add(allowedHtml);

    boolean present_joinDspName = true && (isSetJoinDspName());
    list.add(present_joinDspName);
    if (present_joinDspName)
      list.add(joinDspName);

    return list.hashCode();
  }


  public int compareTo(UserAdSpaceAttri other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpaceWidth()).compareTo(other.isSetSpaceWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceWidth, other.spaceWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceHeight()).compareTo(other.isSetSpaceHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceHeight, other.spaceHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectedMarketTypes()).compareTo(other.isSetExpectedMarketTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedMarketTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedMarketTypes, other.expectedMarketTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedOpentype()).compareTo(other.isSetAllowedOpentype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedOpentype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedOpentype, other.allowedOpentype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpacePosition()).compareTo(other.isSetSpacePosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpacePosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spacePosition, other.spacePosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceType()).compareTo(other.isSetSpaceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceType, other.spaceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSpaceId()).compareTo(other.isSetAdSpaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSpaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSpaceId, other.adSpaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgFormats()).compareTo(other.isSetImgFormats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgFormats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgFormats, other.imgFormats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgMaxSize()).compareTo(other.isSetImgMaxSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgMaxSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgMaxSize, other.imgMaxSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleMin()).compareTo(other.isSetTitleMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleMin, other.titleMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleMax()).compareTo(other.isSetTitleMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleMax, other.titleMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCwMin()).compareTo(other.isSetCwMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCwMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cwMin, other.cwMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCwMax()).compareTo(other.isSetCwMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCwMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cwMax, other.cwMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSources()).compareTo(other.isSetAdSources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSources, other.adSources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(other.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, other.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVidExt()).compareTo(other.isSetVidExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVidExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vidExt, other.vidExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidFloor()).compareTo(other.isSetBidFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidFloor, other.bidFloor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedHtml()).compareTo(other.isSetAllowedHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedHtml, other.allowedHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinDspName()).compareTo(other.isSetJoinDspName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinDspName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinDspName, other.joinDspName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserAdSpaceAttri(");
    boolean first = true;

    sb.append("spaceWidth:");
    sb.append(this.spaceWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceHeight:");
    sb.append(this.spaceHeight);
    first = false;
    if (isSetExpectedMarketTypes()) {
      if (!first) sb.append(", ");
      sb.append("expectedMarketTypes:");
      if (this.expectedMarketTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.expectedMarketTypes);
      }
      first = false;
    }
    if (isSetAllowedOpentype()) {
      if (!first) sb.append(", ");
      sb.append("allowedOpentype:");
      sb.append(this.allowedOpentype);
      first = false;
    }
    if (isSetSpacePosition()) {
      if (!first) sb.append(", ");
      sb.append("spacePosition:");
      sb.append(this.spacePosition);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("spaceType:");
    if (this.spaceType == null) {
      sb.append("null");
    } else {
      sb.append(this.spaceType);
    }
    first = false;
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetAdSpaceId()) {
      if (!first) sb.append(", ");
      sb.append("adSpaceId:");
      sb.append(this.adSpaceId);
      first = false;
    }
    if (isSetImgFormats()) {
      if (!first) sb.append(", ");
      sb.append("imgFormats:");
      if (this.imgFormats == null) {
        sb.append("null");
      } else {
        sb.append(this.imgFormats);
      }
      first = false;
    }
    if (isSetImgMaxSize()) {
      if (!first) sb.append(", ");
      sb.append("imgMaxSize:");
      sb.append(this.imgMaxSize);
      first = false;
    }
    if (isSetTitleMin()) {
      if (!first) sb.append(", ");
      sb.append("titleMin:");
      sb.append(this.titleMin);
      first = false;
    }
    if (isSetTitleMax()) {
      if (!first) sb.append(", ");
      sb.append("titleMax:");
      sb.append(this.titleMax);
      first = false;
    }
    if (isSetCwMin()) {
      if (!first) sb.append(", ");
      sb.append("cwMin:");
      sb.append(this.cwMin);
      first = false;
    }
    if (isSetCwMax()) {
      if (!first) sb.append(", ");
      sb.append("cwMax:");
      sb.append(this.cwMax);
      first = false;
    }
    if (isSetAdSources()) {
      if (!first) sb.append(", ");
      sb.append("adSources:");
      if (this.adSources == null) {
        sb.append("null");
      } else {
        sb.append(this.adSources);
      }
      first = false;
    }
    if (isSetFrom()) {
      if (!first) sb.append(", ");
      sb.append("from:");
      if (this.from == null) {
        sb.append("null");
      } else {
        sb.append(this.from);
      }
      first = false;
    }
    if (isSetVidExt()) {
      if (!first) sb.append(", ");
      sb.append("vidExt:");
      if (this.vidExt == null) {
        sb.append("null");
      } else {
        sb.append(this.vidExt);
      }
      first = false;
    }
    if (isSetBidFloor()) {
      if (!first) sb.append(", ");
      sb.append("bidFloor:");
      sb.append(this.bidFloor);
      first = false;
    }
    if (isSetAllowedHtml()) {
      if (!first) sb.append(", ");
      sb.append("allowedHtml:");
      sb.append(this.allowedHtml);
      first = false;
    }
    if (isSetJoinDspName()) {
      if (!first) sb.append(", ");
      sb.append("joinDspName:");
      if (this.joinDspName == null) {
        sb.append("null");
      } else {
        sb.append(this.joinDspName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'spaceWidth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'spaceHeight' because it's a primitive and you chose the non-beans generator.
    if (spaceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (vidExt != null) {
      vidExt.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserAdSpaceAttriStandardSchemeFactory implements SchemeFactory {
    public UserAdSpaceAttriStandardScheme getScheme() {
      return new UserAdSpaceAttriStandardScheme();
    }
  }

  private static class UserAdSpaceAttriStandardScheme extends StandardScheme<UserAdSpaceAttri> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserAdSpaceAttri struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPACE_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceWidth = iprot.readI32();
              struct.setSpaceWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPACE_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceHeight = iprot.readI32();
              struct.setSpaceHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPECTED_MARKET_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.expectedMarketTypes = new ArrayList<ExpectedMarketType>(_list8.size);
                ExpectedMarketType _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = com.ocean.proxy.thrift.entity.ExpectedMarketType.findByValue(iprot.readI32());
                  struct.expectedMarketTypes.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setExpectedMarketTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALLOWED_OPENTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.allowedOpentype = iprot.readI32();
              struct.setAllowedOpentypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPACE_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spacePosition = iprot.readI32();
              struct.setSpacePositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPACE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceType = com.ocean.proxy.thrift.entity.AdSpaceType.findByValue(iprot.readI32());
              struct.setSpaceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AD_SPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSpaceId = iprot.readI32();
              struct.setAdSpaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IMG_FORMATS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set11 = iprot.readSetBegin();
                struct.imgFormats = new HashSet<AdSpaceImgFmt>(2*_set11.size);
                AdSpaceImgFmt _elem12;
                for (int _i13 = 0; _i13 < _set11.size; ++_i13)
                {
                  _elem12 = com.ocean.proxy.thrift.entity.AdSpaceImgFmt.findByValue(iprot.readI32());
                  struct.imgFormats.add(_elem12);
                }
                iprot.readSetEnd();
              }
              struct.setImgFormatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMG_MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.imgMaxSize = iprot.readI64();
              struct.setImgMaxSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TITLE_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.titleMin = iprot.readI32();
              struct.setTitleMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TITLE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.titleMax = iprot.readI32();
              struct.setTitleMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CW_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cwMin = iprot.readI32();
              struct.setCwMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CW_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cwMax = iprot.readI32();
              struct.setCwMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AD_SOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set14 = iprot.readSetBegin();
                struct.adSources = new HashSet<AdSource>(2*_set14.size);
                AdSource _elem15;
                for (int _i16 = 0; _i16 < _set14.size; ++_i16)
                {
                  _elem15 = com.ocean.proxy.thrift.entity.AdSource.findByValue(iprot.readI32());
                  struct.adSources.add(_elem15);
                }
                iprot.readSetEnd();
              }
              struct.setAdSourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.from = com.ocean.proxy.thrift.entity.From.findByValue(iprot.readI32());
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VID_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vidExt = new VidExt();
              struct.vidExt.read(iprot);
              struct.setVidExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BID_FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidFloor = iprot.readI32();
              struct.setBidFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ALLOWED_HTML
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowedHtml = iprot.readBool();
              struct.setAllowedHtmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // JOIN_DSP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.joinDspName = iprot.readString();
              struct.setJoinDspNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSpaceWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceWidth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpaceHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceHeight' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserAdSpaceAttri struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SPACE_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.spaceWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPACE_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.spaceHeight);
      oprot.writeFieldEnd();
      if (struct.expectedMarketTypes != null) {
        if (struct.isSetExpectedMarketTypes()) {
          oprot.writeFieldBegin(EXPECTED_MARKET_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.expectedMarketTypes.size()));
            for (ExpectedMarketType _iter17 : struct.expectedMarketTypes)
            {
              oprot.writeI32(_iter17.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllowedOpentype()) {
        oprot.writeFieldBegin(ALLOWED_OPENTYPE_FIELD_DESC);
        oprot.writeI32(struct.allowedOpentype);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpacePosition()) {
        oprot.writeFieldBegin(SPACE_POSITION_FIELD_DESC);
        oprot.writeI32(struct.spacePosition);
        oprot.writeFieldEnd();
      }
      if (struct.spaceType != null) {
        oprot.writeFieldBegin(SPACE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.spaceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdSpaceId()) {
        oprot.writeFieldBegin(AD_SPACE_ID_FIELD_DESC);
        oprot.writeI32(struct.adSpaceId);
        oprot.writeFieldEnd();
      }
      if (struct.imgFormats != null) {
        if (struct.isSetImgFormats()) {
          oprot.writeFieldBegin(IMG_FORMATS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.imgFormats.size()));
            for (AdSpaceImgFmt _iter18 : struct.imgFormats)
            {
              oprot.writeI32(_iter18.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetImgMaxSize()) {
        oprot.writeFieldBegin(IMG_MAX_SIZE_FIELD_DESC);
        oprot.writeI64(struct.imgMaxSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTitleMin()) {
        oprot.writeFieldBegin(TITLE_MIN_FIELD_DESC);
        oprot.writeI32(struct.titleMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTitleMax()) {
        oprot.writeFieldBegin(TITLE_MAX_FIELD_DESC);
        oprot.writeI32(struct.titleMax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCwMin()) {
        oprot.writeFieldBegin(CW_MIN_FIELD_DESC);
        oprot.writeI32(struct.cwMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCwMax()) {
        oprot.writeFieldBegin(CW_MAX_FIELD_DESC);
        oprot.writeI32(struct.cwMax);
        oprot.writeFieldEnd();
      }
      if (struct.adSources != null) {
        if (struct.isSetAdSources()) {
          oprot.writeFieldBegin(AD_SOURCES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.adSources.size()));
            for (AdSource _iter19 : struct.adSources)
            {
              oprot.writeI32(_iter19.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.from != null) {
        if (struct.isSetFrom()) {
          oprot.writeFieldBegin(FROM_FIELD_DESC);
          oprot.writeI32(struct.from.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.vidExt != null) {
        if (struct.isSetVidExt()) {
          oprot.writeFieldBegin(VID_EXT_FIELD_DESC);
          struct.vidExt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBidFloor()) {
        oprot.writeFieldBegin(BID_FLOOR_FIELD_DESC);
        oprot.writeI32(struct.bidFloor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllowedHtml()) {
        oprot.writeFieldBegin(ALLOWED_HTML_FIELD_DESC);
        oprot.writeBool(struct.allowedHtml);
        oprot.writeFieldEnd();
      }
      if (struct.joinDspName != null) {
        if (struct.isSetJoinDspName()) {
          oprot.writeFieldBegin(JOIN_DSP_NAME_FIELD_DESC);
          oprot.writeString(struct.joinDspName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserAdSpaceAttriTupleSchemeFactory implements SchemeFactory {
    public UserAdSpaceAttriTupleScheme getScheme() {
      return new UserAdSpaceAttriTupleScheme();
    }
  }

  private static class UserAdSpaceAttriTupleScheme extends TupleScheme<UserAdSpaceAttri> {


    public void write(org.apache.thrift.protocol.TProtocol prot, UserAdSpaceAttri struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.spaceWidth);
      oprot.writeI32(struct.spaceHeight);
      oprot.writeI32(struct.spaceType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetExpectedMarketTypes()) {
        optionals.set(0);
      }
      if (struct.isSetAllowedOpentype()) {
        optionals.set(1);
      }
      if (struct.isSetSpacePosition()) {
        optionals.set(2);
      }
      if (struct.isSetAppId()) {
        optionals.set(3);
      }
      if (struct.isSetAdSpaceId()) {
        optionals.set(4);
      }
      if (struct.isSetImgFormats()) {
        optionals.set(5);
      }
      if (struct.isSetImgMaxSize()) {
        optionals.set(6);
      }
      if (struct.isSetTitleMin()) {
        optionals.set(7);
      }
      if (struct.isSetTitleMax()) {
        optionals.set(8);
      }
      if (struct.isSetCwMin()) {
        optionals.set(9);
      }
      if (struct.isSetCwMax()) {
        optionals.set(10);
      }
      if (struct.isSetAdSources()) {
        optionals.set(11);
      }
      if (struct.isSetFrom()) {
        optionals.set(12);
      }
      if (struct.isSetVidExt()) {
        optionals.set(13);
      }
      if (struct.isSetBidFloor()) {
        optionals.set(14);
      }
      if (struct.isSetAllowedHtml()) {
        optionals.set(15);
      }
      if (struct.isSetJoinDspName()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetExpectedMarketTypes()) {
        {
          oprot.writeI32(struct.expectedMarketTypes.size());
          for (ExpectedMarketType _iter20 : struct.expectedMarketTypes)
          {
            oprot.writeI32(_iter20.getValue());
          }
        }
      }
      if (struct.isSetAllowedOpentype()) {
        oprot.writeI32(struct.allowedOpentype);
      }
      if (struct.isSetSpacePosition()) {
        oprot.writeI32(struct.spacePosition);
      }
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.appId);
      }
      if (struct.isSetAdSpaceId()) {
        oprot.writeI32(struct.adSpaceId);
      }
      if (struct.isSetImgFormats()) {
        {
          oprot.writeI32(struct.imgFormats.size());
          for (AdSpaceImgFmt _iter21 : struct.imgFormats)
          {
            oprot.writeI32(_iter21.getValue());
          }
        }
      }
      if (struct.isSetImgMaxSize()) {
        oprot.writeI64(struct.imgMaxSize);
      }
      if (struct.isSetTitleMin()) {
        oprot.writeI32(struct.titleMin);
      }
      if (struct.isSetTitleMax()) {
        oprot.writeI32(struct.titleMax);
      }
      if (struct.isSetCwMin()) {
        oprot.writeI32(struct.cwMin);
      }
      if (struct.isSetCwMax()) {
        oprot.writeI32(struct.cwMax);
      }
      if (struct.isSetAdSources()) {
        {
          oprot.writeI32(struct.adSources.size());
          for (AdSource _iter22 : struct.adSources)
          {
            oprot.writeI32(_iter22.getValue());
          }
        }
      }
      if (struct.isSetFrom()) {
        oprot.writeI32(struct.from.getValue());
      }
      if (struct.isSetVidExt()) {
        struct.vidExt.write(oprot);
      }
      if (struct.isSetBidFloor()) {
        oprot.writeI32(struct.bidFloor);
      }
      if (struct.isSetAllowedHtml()) {
        oprot.writeBool(struct.allowedHtml);
      }
      if (struct.isSetJoinDspName()) {
        oprot.writeString(struct.joinDspName);
      }
    }


    public void read(org.apache.thrift.protocol.TProtocol prot, UserAdSpaceAttri struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.spaceWidth = iprot.readI32();
      struct.setSpaceWidthIsSet(true);
      struct.spaceHeight = iprot.readI32();
      struct.setSpaceHeightIsSet(true);
      struct.spaceType = com.ocean.proxy.thrift.entity.AdSpaceType.findByValue(iprot.readI32());
      struct.setSpaceTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.expectedMarketTypes = new ArrayList<ExpectedMarketType>(_list23.size);
          ExpectedMarketType _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = com.ocean.proxy.thrift.entity.ExpectedMarketType.findByValue(iprot.readI32());
            struct.expectedMarketTypes.add(_elem24);
          }
        }
        struct.setExpectedMarketTypesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.allowedOpentype = iprot.readI32();
        struct.setAllowedOpentypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spacePosition = iprot.readI32();
        struct.setSpacePositionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.adSpaceId = iprot.readI32();
        struct.setAdSpaceIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.imgFormats = new HashSet<AdSpaceImgFmt>(2*_set26.size);
          AdSpaceImgFmt _elem27;
          for (int _i28 = 0; _i28 < _set26.size; ++_i28)
          {
            _elem27 = com.ocean.proxy.thrift.entity.AdSpaceImgFmt.findByValue(iprot.readI32());
            struct.imgFormats.add(_elem27);
          }
        }
        struct.setImgFormatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.imgMaxSize = iprot.readI64();
        struct.setImgMaxSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.titleMin = iprot.readI32();
        struct.setTitleMinIsSet(true);
      }
      if (incoming.get(8)) {
        struct.titleMax = iprot.readI32();
        struct.setTitleMaxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cwMin = iprot.readI32();
        struct.setCwMinIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cwMax = iprot.readI32();
        struct.setCwMaxIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.adSources = new HashSet<AdSource>(2*_set29.size);
          AdSource _elem30;
          for (int _i31 = 0; _i31 < _set29.size; ++_i31)
          {
            _elem30 = com.ocean.proxy.thrift.entity.AdSource.findByValue(iprot.readI32());
            struct.adSources.add(_elem30);
          }
        }
        struct.setAdSourcesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.from = com.ocean.proxy.thrift.entity.From.findByValue(iprot.readI32());
        struct.setFromIsSet(true);
      }
      if (incoming.get(13)) {
        struct.vidExt = new VidExt();
        struct.vidExt.read(iprot);
        struct.setVidExtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bidFloor = iprot.readI32();
        struct.setBidFloorIsSet(true);
      }
      if (incoming.get(15)) {
        struct.allowedHtml = iprot.readBool();
        struct.setAllowedHtmlIsSet(true);
      }
      if (incoming.get(16)) {
        struct.joinDspName = iprot.readString();
        struct.setJoinDspNameIsSet(true);
      }
    }
  }

}

