/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-13")
public class AdInfo implements org.apache.thrift.TBase<AdInfo, AdInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AdInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdInfo");

  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AD_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("adContent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRange", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LIMIT_COND_FIELD_DESC = new org.apache.thrift.protocol.TField("limitCond", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LIMIT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("limitNum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RECOMMEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UNUSED1_FIELD_DESC = new org.apache.thrift.protocol.TField("unused1", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField UNUSED2_FIELD_DESC = new org.apache.thrift.protocol.TField("unused2", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField UNUSED3_FIELD_DESC = new org.apache.thrift.protocol.TField("unused3", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField PUT_FIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("putFirm", org.apache.thrift.protocol.TType.SET, (short)14);
  private static final org.apache.thrift.protocol.TField OPERATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("operators", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField NET_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("netEnv", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField GEOGRAPHY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("geographyType", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField UNUSED4_FIELD_DESC = new org.apache.thrift.protocol.TField("unused4", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField PUT_DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("putDevice", org.apache.thrift.protocol.TType.SET, (short)19);
  private static final org.apache.thrift.protocol.TField PUT_PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("putProduct", org.apache.thrift.protocol.TType.SET, (short)20);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.SET, (short)21);
  private static final org.apache.thrift.protocol.TField GEOGRAPHY_FIELD_DESC = new org.apache.thrift.protocol.TField("geography", org.apache.thrift.protocol.TType.SET, (short)22);
  private static final org.apache.thrift.protocol.TField IS_ALL_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllApp", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField IS_ALL_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllMobile", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField IS_ALL_NET_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllNet", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField IS_KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("isKeywords", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField MATCH_KEY_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchKeyWords", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField IS_NEWS_SOURE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNewsSoure", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField IS_MATCH_ALL_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMatchAllSource", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField MATCH_NEW_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNewSource", org.apache.thrift.protocol.TType.SET, (short)30);
  private static final org.apache.thrift.protocol.TField ABTEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ABTestType", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField DATE_CLICK_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("dateClickView", org.apache.thrift.protocol.TType.LIST, (short)35);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.SET, (short)36);
  private static final org.apache.thrift.protocol.TField IS_REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("isRefresh", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField M_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("mSeq", org.apache.thrift.protocol.TType.MAP, (short)38);
  private static final org.apache.thrift.protocol.TField DATA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataVersion", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.SET, (short)40);
  private static final org.apache.thrift.protocol.TField TURN_PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnPlayType", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField TURN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnLimit", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField TURN_CLICK_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TurnClickLimit", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.SET, (short)45);
  private static final org.apache.thrift.protocol.TField AD_SRC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("adSrcType", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField THIRD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdID", org.apache.thrift.protocol.TType.I64, (short)47);
  private static final org.apache.thrift.protocol.TField INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("income", org.apache.thrift.protocol.TType.SET, (short)48);
  private static final org.apache.thrift.protocol.TField KID_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("kidState", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField IS_CATE_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("isCateMatch", org.apache.thrift.protocol.TType.BOOL, (short)50);
  private static final org.apache.thrift.protocol.TField NEWS_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("newsTags", org.apache.thrift.protocol.TType.SET, (short)51);
  private static final org.apache.thrift.protocol.TField IS_SCREEN_FLASH_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("isScreenFlashAd", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField FRESH_TM_FIELD_DESC = new org.apache.thrift.protocol.TField("freshTm", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField DATE_CLICK_VIEW_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("dateClickViewV2", org.apache.thrift.protocol.TType.LIST, (short)54);
  private static final org.apache.thrift.protocol.TField AD_DELIVERY_CTRL_FIELD_DESC = new org.apache.thrift.protocol.TField("adDeliveryCtrl", org.apache.thrift.protocol.TType.STRUCT, (short)55);
  private static final org.apache.thrift.protocol.TField LIMIT_CLICK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("limitClickNum", org.apache.thrift.protocol.TType.I32, (short)56);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdInfoTupleSchemeFactory());
  }

  public long adId; // required
  public AdContent adContent; // required
  public int state; // required
  public List<LimitTimeRange> timeRange; // optional
  public String startDate; // optional
  public String endDate; // optional
  public int limitCond; // optional
  public int limitNum; // optional
  public int recommendType; // optional
  public int weight; // optional
  public List<String> unused1; // optional
  public List<Integer> unused2; // optional
  public List<Integer> unused3; // optional
  public Set<String> putFirm; // optional
  public List<Integer> operators; // optional
  public List<Integer> netEnv; // optional
  public int geographyType; // optional
  public List<String> unused4; // optional
  public Set<Integer> putDevice; // optional
  public Set<Integer> putProduct; // optional
  public Set<String> category; // optional
  public Set<String> geography; // optional
  public int isAllApp; // optional
  public int isAllMobile; // optional
  public int isAllNet; // optional
  public int isKeywords; // optional
  public List<String> matchKeyWords; // optional
  public int isNewsSoure; // optional
  public int isMatchAllSource; // optional
  public Set<Integer> matchNewSource; // optional
  public int ABTestType; // optional
  public List<DateClickViewLimit> dateClickView; // optional
  public Set<String> appVersion; // optional
  public int isRefresh; // optional
  public Map<String,Integer> mSeq; // optional
  public int dataVersion; // optional
  public Set<String> model; // optional
  public int TurnPlayType; // optional
  public int TurnLimit; // optional
  public int TurnClickLimit; // optional
  public int sex; // optional
  public Set<String> os; // optional
  public int adSrcType; // optional
  public long thirdID; // optional
  public Set<Integer> income; // optional
  public int kidState; // optional
  public boolean isCateMatch; // optional
  public Set<String> newsTags; // optional
  public boolean isScreenFlashAd; // optional
  public int freshTm; // optional
  public List<DateClickViewLimitV2> dateClickViewV2; // optional
  public AdDeliveryCtrl adDeliveryCtrl; // optional
  public int limitClickNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_ID((short)1, "adId"),
    AD_CONTENT((short)2, "adContent"),
    STATE((short)3, "state"),
    TIME_RANGE((short)4, "timeRange"),
    START_DATE((short)5, "startDate"),
    END_DATE((short)6, "endDate"),
    LIMIT_COND((short)7, "limitCond"),
    LIMIT_NUM((short)8, "limitNum"),
    RECOMMEND_TYPE((short)9, "recommendType"),
    WEIGHT((short)10, "weight"),
    UNUSED1((short)11, "unused1"),
    UNUSED2((short)12, "unused2"),
    UNUSED3((short)13, "unused3"),
    PUT_FIRM((short)14, "putFirm"),
    OPERATORS((short)15, "operators"),
    NET_ENV((short)16, "netEnv"),
    GEOGRAPHY_TYPE((short)17, "geographyType"),
    UNUSED4((short)18, "unused4"),
    PUT_DEVICE((short)19, "putDevice"),
    PUT_PRODUCT((short)20, "putProduct"),
    CATEGORY((short)21, "category"),
    GEOGRAPHY((short)22, "geography"),
    IS_ALL_APP((short)23, "isAllApp"),
    IS_ALL_MOBILE((short)24, "isAllMobile"),
    IS_ALL_NET((short)25, "isAllNet"),
    IS_KEYWORDS((short)26, "isKeywords"),
    MATCH_KEY_WORDS((short)27, "matchKeyWords"),
    IS_NEWS_SOURE((short)28, "isNewsSoure"),
    IS_MATCH_ALL_SOURCE((short)29, "isMatchAllSource"),
    MATCH_NEW_SOURCE((short)30, "matchNewSource"),
    ABTEST_TYPE((short)34, "ABTestType"),
    DATE_CLICK_VIEW((short)35, "dateClickView"),
    APP_VERSION((short)36, "appVersion"),
    IS_REFRESH((short)37, "isRefresh"),
    M_SEQ((short)38, "mSeq"),
    DATA_VERSION((short)39, "dataVersion"),
    MODEL((short)40, "model"),
    TURN_PLAY_TYPE((short)41, "TurnPlayType"),
    TURN_LIMIT((short)42, "TurnLimit"),
    TURN_CLICK_LIMIT((short)43, "TurnClickLimit"),
    SEX((short)44, "sex"),
    OS((short)45, "os"),
    AD_SRC_TYPE((short)46, "adSrcType"),
    THIRD_ID((short)47, "thirdID"),
    INCOME((short)48, "income"),
    KID_STATE((short)49, "kidState"),
    IS_CATE_MATCH((short)50, "isCateMatch"),
    NEWS_TAGS((short)51, "newsTags"),
    IS_SCREEN_FLASH_AD((short)52, "isScreenFlashAd"),
    FRESH_TM((short)53, "freshTm"),
    DATE_CLICK_VIEW_V2((short)54, "dateClickViewV2"),
    AD_DELIVERY_CTRL((short)55, "adDeliveryCtrl"),
    LIMIT_CLICK_NUM((short)56, "limitClickNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_ID
          return AD_ID;
        case 2: // AD_CONTENT
          return AD_CONTENT;
        case 3: // STATE
          return STATE;
        case 4: // TIME_RANGE
          return TIME_RANGE;
        case 5: // START_DATE
          return START_DATE;
        case 6: // END_DATE
          return END_DATE;
        case 7: // LIMIT_COND
          return LIMIT_COND;
        case 8: // LIMIT_NUM
          return LIMIT_NUM;
        case 9: // RECOMMEND_TYPE
          return RECOMMEND_TYPE;
        case 10: // WEIGHT
          return WEIGHT;
        case 11: // UNUSED1
          return UNUSED1;
        case 12: // UNUSED2
          return UNUSED2;
        case 13: // UNUSED3
          return UNUSED3;
        case 14: // PUT_FIRM
          return PUT_FIRM;
        case 15: // OPERATORS
          return OPERATORS;
        case 16: // NET_ENV
          return NET_ENV;
        case 17: // GEOGRAPHY_TYPE
          return GEOGRAPHY_TYPE;
        case 18: // UNUSED4
          return UNUSED4;
        case 19: // PUT_DEVICE
          return PUT_DEVICE;
        case 20: // PUT_PRODUCT
          return PUT_PRODUCT;
        case 21: // CATEGORY
          return CATEGORY;
        case 22: // GEOGRAPHY
          return GEOGRAPHY;
        case 23: // IS_ALL_APP
          return IS_ALL_APP;
        case 24: // IS_ALL_MOBILE
          return IS_ALL_MOBILE;
        case 25: // IS_ALL_NET
          return IS_ALL_NET;
        case 26: // IS_KEYWORDS
          return IS_KEYWORDS;
        case 27: // MATCH_KEY_WORDS
          return MATCH_KEY_WORDS;
        case 28: // IS_NEWS_SOURE
          return IS_NEWS_SOURE;
        case 29: // IS_MATCH_ALL_SOURCE
          return IS_MATCH_ALL_SOURCE;
        case 30: // MATCH_NEW_SOURCE
          return MATCH_NEW_SOURCE;
        case 34: // ABTEST_TYPE
          return ABTEST_TYPE;
        case 35: // DATE_CLICK_VIEW
          return DATE_CLICK_VIEW;
        case 36: // APP_VERSION
          return APP_VERSION;
        case 37: // IS_REFRESH
          return IS_REFRESH;
        case 38: // M_SEQ
          return M_SEQ;
        case 39: // DATA_VERSION
          return DATA_VERSION;
        case 40: // MODEL
          return MODEL;
        case 41: // TURN_PLAY_TYPE
          return TURN_PLAY_TYPE;
        case 42: // TURN_LIMIT
          return TURN_LIMIT;
        case 43: // TURN_CLICK_LIMIT
          return TURN_CLICK_LIMIT;
        case 44: // SEX
          return SEX;
        case 45: // OS
          return OS;
        case 46: // AD_SRC_TYPE
          return AD_SRC_TYPE;
        case 47: // THIRD_ID
          return THIRD_ID;
        case 48: // INCOME
          return INCOME;
        case 49: // KID_STATE
          return KID_STATE;
        case 50: // IS_CATE_MATCH
          return IS_CATE_MATCH;
        case 51: // NEWS_TAGS
          return NEWS_TAGS;
        case 52: // IS_SCREEN_FLASH_AD
          return IS_SCREEN_FLASH_AD;
        case 53: // FRESH_TM
          return FRESH_TM;
        case 54: // DATE_CLICK_VIEW_V2
          return DATE_CLICK_VIEW_V2;
        case 55: // AD_DELIVERY_CTRL
          return AD_DELIVERY_CTRL;
        case 56: // LIMIT_CLICK_NUM
          return LIMIT_CLICK_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADID_ISSET_ID = 0;
  private static final int __STATE_ISSET_ID = 1;
  private static final int __LIMITCOND_ISSET_ID = 2;
  private static final int __LIMITNUM_ISSET_ID = 3;
  private static final int __RECOMMENDTYPE_ISSET_ID = 4;
  private static final int __WEIGHT_ISSET_ID = 5;
  private static final int __GEOGRAPHYTYPE_ISSET_ID = 6;
  private static final int __ISALLAPP_ISSET_ID = 7;
  private static final int __ISALLMOBILE_ISSET_ID = 8;
  private static final int __ISALLNET_ISSET_ID = 9;
  private static final int __ISKEYWORDS_ISSET_ID = 10;
  private static final int __ISNEWSSOURE_ISSET_ID = 11;
  private static final int __ISMATCHALLSOURCE_ISSET_ID = 12;
  private static final int __ABTESTTYPE_ISSET_ID = 13;
  private static final int __ISREFRESH_ISSET_ID = 14;
  private static final int __DATAVERSION_ISSET_ID = 15;
  private static final int __TURNPLAYTYPE_ISSET_ID = 16;
  private static final int __TURNLIMIT_ISSET_ID = 17;
  private static final int __TURNCLICKLIMIT_ISSET_ID = 18;
  private static final int __SEX_ISSET_ID = 19;
  private static final int __ADSRCTYPE_ISSET_ID = 20;
  private static final int __THIRDID_ISSET_ID = 21;
  private static final int __KIDSTATE_ISSET_ID = 22;
  private static final int __ISCATEMATCH_ISSET_ID = 23;
  private static final int __ISSCREENFLASHAD_ISSET_ID = 24;
  private static final int __FRESHTM_ISSET_ID = 25;
  private static final int __LIMITCLICKNUM_ISSET_ID = 26;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIME_RANGE,_Fields.START_DATE,_Fields.END_DATE,_Fields.LIMIT_COND,_Fields.LIMIT_NUM,_Fields.RECOMMEND_TYPE,_Fields.WEIGHT,_Fields.UNUSED1,_Fields.UNUSED2,_Fields.UNUSED3,_Fields.PUT_FIRM,_Fields.OPERATORS,_Fields.NET_ENV,_Fields.GEOGRAPHY_TYPE,_Fields.UNUSED4,_Fields.PUT_DEVICE,_Fields.PUT_PRODUCT,_Fields.CATEGORY,_Fields.GEOGRAPHY,_Fields.IS_ALL_APP,_Fields.IS_ALL_MOBILE,_Fields.IS_ALL_NET,_Fields.IS_KEYWORDS,_Fields.MATCH_KEY_WORDS,_Fields.IS_NEWS_SOURE,_Fields.IS_MATCH_ALL_SOURCE,_Fields.MATCH_NEW_SOURCE,_Fields.ABTEST_TYPE,_Fields.DATE_CLICK_VIEW,_Fields.APP_VERSION,_Fields.IS_REFRESH,_Fields.M_SEQ,_Fields.DATA_VERSION,_Fields.MODEL,_Fields.TURN_PLAY_TYPE,_Fields.TURN_LIMIT,_Fields.TURN_CLICK_LIMIT,_Fields.SEX,_Fields.OS,_Fields.AD_SRC_TYPE,_Fields.THIRD_ID,_Fields.INCOME,_Fields.KID_STATE,_Fields.IS_CATE_MATCH,_Fields.NEWS_TAGS,_Fields.IS_SCREEN_FLASH_AD,_Fields.FRESH_TM,_Fields.DATE_CLICK_VIEW_V2,_Fields.AD_DELIVERY_CTRL,_Fields.LIMIT_CLICK_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AD_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("adContent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdContent.class)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_RANGE, new org.apache.thrift.meta_data.FieldMetaData("timeRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitTimeRange.class))));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_COND, new org.apache.thrift.meta_data.FieldMetaData("limitCond", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_NUM, new org.apache.thrift.meta_data.FieldMetaData("limitNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOMMEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("recommendType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNUSED1, new org.apache.thrift.meta_data.FieldMetaData("unused1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UNUSED2, new org.apache.thrift.meta_data.FieldMetaData("unused2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UNUSED3, new org.apache.thrift.meta_data.FieldMetaData("unused3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PUT_FIRM, new org.apache.thrift.meta_data.FieldMetaData("putFirm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPERATORS, new org.apache.thrift.meta_data.FieldMetaData("operators", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NET_ENV, new org.apache.thrift.meta_data.FieldMetaData("netEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.GEOGRAPHY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("geographyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNUSED4, new org.apache.thrift.meta_data.FieldMetaData("unused4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PUT_DEVICE, new org.apache.thrift.meta_data.FieldMetaData("putDevice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PUT_PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("putProduct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GEOGRAPHY, new org.apache.thrift.meta_data.FieldMetaData("geography", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_ALL_APP, new org.apache.thrift.meta_data.FieldMetaData("isAllApp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ALL_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("isAllMobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ALL_NET, new org.apache.thrift.meta_data.FieldMetaData("isAllNet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("isKeywords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_KEY_WORDS, new org.apache.thrift.meta_data.FieldMetaData("matchKeyWords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_NEWS_SOURE, new org.apache.thrift.meta_data.FieldMetaData("isNewsSoure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_MATCH_ALL_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("isMatchAllSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_NEW_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("matchNewSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ABTEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ABTestType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_CLICK_VIEW, new org.apache.thrift.meta_data.FieldMetaData("dateClickView", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateClickViewLimit.class))));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_REFRESH, new org.apache.thrift.meta_data.FieldMetaData("isRefresh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SEQ, new org.apache.thrift.meta_data.FieldMetaData("mSeq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DATA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("dataVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TURN_PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TurnPlayType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("TurnLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_CLICK_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("TurnClickLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AD_SRC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("adSrcType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_ID, new org.apache.thrift.meta_data.FieldMetaData("thirdID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INCOME, new org.apache.thrift.meta_data.FieldMetaData("income", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.KID_STATE, new org.apache.thrift.meta_data.FieldMetaData("kidState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CATE_MATCH, new org.apache.thrift.meta_data.FieldMetaData("isCateMatch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEWS_TAGS, new org.apache.thrift.meta_data.FieldMetaData("newsTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_SCREEN_FLASH_AD, new org.apache.thrift.meta_data.FieldMetaData("isScreenFlashAd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FRESH_TM, new org.apache.thrift.meta_data.FieldMetaData("freshTm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_CLICK_VIEW_V2, new org.apache.thrift.meta_data.FieldMetaData("dateClickViewV2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateClickViewLimitV2.class))));
    tmpMap.put(_Fields.AD_DELIVERY_CTRL, new org.apache.thrift.meta_data.FieldMetaData("adDeliveryCtrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "AdDeliveryCtrl")));
    tmpMap.put(_Fields.LIMIT_CLICK_NUM, new org.apache.thrift.meta_data.FieldMetaData("limitClickNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdInfo.class, metaDataMap);
  }

  public AdInfo() {
    this.adSrcType = 0;

  }

  public AdInfo(
    long adId,
    AdContent adContent,
    int state)
  {
    this();
    this.adId = adId;
    setAdIdIsSet(true);
    this.adContent = adContent;
    this.state = state;
    setStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdInfo(AdInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adId = other.adId;
    if (other.isSetAdContent()) {
      this.adContent = new AdContent(other.adContent);
    }
    this.state = other.state;
    if (other.isSetTimeRange()) {
      List<LimitTimeRange> __this__timeRange = new ArrayList<LimitTimeRange>(other.timeRange.size());
      for (LimitTimeRange other_element : other.timeRange) {
        __this__timeRange.add(new LimitTimeRange(other_element));
      }
      this.timeRange = __this__timeRange;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.limitCond = other.limitCond;
    this.limitNum = other.limitNum;
    this.recommendType = other.recommendType;
    this.weight = other.weight;
    if (other.isSetUnused1()) {
      List<String> __this__unused1 = new ArrayList<String>(other.unused1);
      this.unused1 = __this__unused1;
    }
    if (other.isSetUnused2()) {
      List<Integer> __this__unused2 = new ArrayList<Integer>(other.unused2);
      this.unused2 = __this__unused2;
    }
    if (other.isSetUnused3()) {
      List<Integer> __this__unused3 = new ArrayList<Integer>(other.unused3);
      this.unused3 = __this__unused3;
    }
    if (other.isSetPutFirm()) {
      Set<String> __this__putFirm = new HashSet<String>(other.putFirm);
      this.putFirm = __this__putFirm;
    }
    if (other.isSetOperators()) {
      List<Integer> __this__operators = new ArrayList<Integer>(other.operators);
      this.operators = __this__operators;
    }
    if (other.isSetNetEnv()) {
      List<Integer> __this__netEnv = new ArrayList<Integer>(other.netEnv);
      this.netEnv = __this__netEnv;
    }
    this.geographyType = other.geographyType;
    if (other.isSetUnused4()) {
      List<String> __this__unused4 = new ArrayList<String>(other.unused4);
      this.unused4 = __this__unused4;
    }
    if (other.isSetPutDevice()) {
      Set<Integer> __this__putDevice = new HashSet<Integer>(other.putDevice);
      this.putDevice = __this__putDevice;
    }
    if (other.isSetPutProduct()) {
      Set<Integer> __this__putProduct = new HashSet<Integer>(other.putProduct);
      this.putProduct = __this__putProduct;
    }
    if (other.isSetCategory()) {
      Set<String> __this__category = new HashSet<String>(other.category);
      this.category = __this__category;
    }
    if (other.isSetGeography()) {
      Set<String> __this__geography = new HashSet<String>(other.geography);
      this.geography = __this__geography;
    }
    this.isAllApp = other.isAllApp;
    this.isAllMobile = other.isAllMobile;
    this.isAllNet = other.isAllNet;
    this.isKeywords = other.isKeywords;
    if (other.isSetMatchKeyWords()) {
      List<String> __this__matchKeyWords = new ArrayList<String>(other.matchKeyWords);
      this.matchKeyWords = __this__matchKeyWords;
    }
    this.isNewsSoure = other.isNewsSoure;
    this.isMatchAllSource = other.isMatchAllSource;
    if (other.isSetMatchNewSource()) {
      Set<Integer> __this__matchNewSource = new HashSet<Integer>(other.matchNewSource);
      this.matchNewSource = __this__matchNewSource;
    }
    this.ABTestType = other.ABTestType;
    if (other.isSetDateClickView()) {
      List<DateClickViewLimit> __this__dateClickView = new ArrayList<DateClickViewLimit>(other.dateClickView.size());
      for (DateClickViewLimit other_element : other.dateClickView) {
        __this__dateClickView.add(new DateClickViewLimit(other_element));
      }
      this.dateClickView = __this__dateClickView;
    }
    if (other.isSetAppVersion()) {
      Set<String> __this__appVersion = new HashSet<String>(other.appVersion);
      this.appVersion = __this__appVersion;
    }
    this.isRefresh = other.isRefresh;
    if (other.isSetMSeq()) {
      Map<String,Integer> __this__mSeq = new HashMap<String,Integer>(other.mSeq);
      this.mSeq = __this__mSeq;
    }
    this.dataVersion = other.dataVersion;
    if (other.isSetModel()) {
      Set<String> __this__model = new HashSet<String>(other.model);
      this.model = __this__model;
    }
    this.TurnPlayType = other.TurnPlayType;
    this.TurnLimit = other.TurnLimit;
    this.TurnClickLimit = other.TurnClickLimit;
    this.sex = other.sex;
    if (other.isSetOs()) {
      Set<String> __this__os = new HashSet<String>(other.os);
      this.os = __this__os;
    }
    this.adSrcType = other.adSrcType;
    this.thirdID = other.thirdID;
    if (other.isSetIncome()) {
      Set<Integer> __this__income = new HashSet<Integer>(other.income);
      this.income = __this__income;
    }
    this.kidState = other.kidState;
    this.isCateMatch = other.isCateMatch;
    if (other.isSetNewsTags()) {
      Set<String> __this__newsTags = new HashSet<String>(other.newsTags);
      this.newsTags = __this__newsTags;
    }
    this.isScreenFlashAd = other.isScreenFlashAd;
    this.freshTm = other.freshTm;
    if (other.isSetDateClickViewV2()) {
      List<DateClickViewLimitV2> __this__dateClickViewV2 = new ArrayList<DateClickViewLimitV2>(other.dateClickViewV2.size());
      for (DateClickViewLimitV2 other_element : other.dateClickViewV2) {
        __this__dateClickViewV2.add(new DateClickViewLimitV2(other_element));
      }
      this.dateClickViewV2 = __this__dateClickViewV2;
    }
    if (other.isSetAdDeliveryCtrl()) {
      this.adDeliveryCtrl = other.adDeliveryCtrl;
    }
    this.limitClickNum = other.limitClickNum;
  }

  public AdInfo deepCopy() {
    return new AdInfo(this);
  }

  public void clear() {
    setAdIdIsSet(false);
    this.adId = 0;
    this.adContent = null;
    setStateIsSet(false);
    this.state = 0;
    this.timeRange = null;
    this.startDate = null;
    this.endDate = null;
    setLimitCondIsSet(false);
    this.limitCond = 0;
    setLimitNumIsSet(false);
    this.limitNum = 0;
    setRecommendTypeIsSet(false);
    this.recommendType = 0;
    setWeightIsSet(false);
    this.weight = 0;
    this.unused1 = null;
    this.unused2 = null;
    this.unused3 = null;
    this.putFirm = null;
    this.operators = null;
    this.netEnv = null;
    setGeographyTypeIsSet(false);
    this.geographyType = 0;
    this.unused4 = null;
    this.putDevice = null;
    this.putProduct = null;
    this.category = null;
    this.geography = null;
    setIsAllAppIsSet(false);
    this.isAllApp = 0;
    setIsAllMobileIsSet(false);
    this.isAllMobile = 0;
    setIsAllNetIsSet(false);
    this.isAllNet = 0;
    setIsKeywordsIsSet(false);
    this.isKeywords = 0;
    this.matchKeyWords = null;
    setIsNewsSoureIsSet(false);
    this.isNewsSoure = 0;
    setIsMatchAllSourceIsSet(false);
    this.isMatchAllSource = 0;
    this.matchNewSource = null;
    setABTestTypeIsSet(false);
    this.ABTestType = 0;
    this.dateClickView = null;
    this.appVersion = null;
    setIsRefreshIsSet(false);
    this.isRefresh = 0;
    this.mSeq = null;
    setDataVersionIsSet(false);
    this.dataVersion = 0;
    this.model = null;
    setTurnPlayTypeIsSet(false);
    this.TurnPlayType = 0;
    setTurnLimitIsSet(false);
    this.TurnLimit = 0;
    setTurnClickLimitIsSet(false);
    this.TurnClickLimit = 0;
    setSexIsSet(false);
    this.sex = 0;
    this.os = null;
    this.adSrcType = 0;

    setThirdIDIsSet(false);
    this.thirdID = 0;
    this.income = null;
    setKidStateIsSet(false);
    this.kidState = 0;
    setIsCateMatchIsSet(false);
    this.isCateMatch = false;
    this.newsTags = null;
    setIsScreenFlashAdIsSet(false);
    this.isScreenFlashAd = false;
    setFreshTmIsSet(false);
    this.freshTm = 0;
    this.dateClickViewV2 = null;
    this.adDeliveryCtrl = null;
    setLimitClickNumIsSet(false);
    this.limitClickNum = 0;
  }

  public long getAdId() {
    return this.adId;
  }

  public AdInfo setAdId(long adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public AdContent getAdContent() {
    return this.adContent;
  }

  public AdInfo setAdContent(AdContent adContent) {
    this.adContent = adContent;
    return this;
  }

  public void unsetAdContent() {
    this.adContent = null;
  }

  /** Returns true if field adContent is set (has been assigned a value) and false otherwise */
  public boolean isSetAdContent() {
    return this.adContent != null;
  }

  public void setAdContentIsSet(boolean value) {
    if (!value) {
      this.adContent = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public AdInfo setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getTimeRangeSize() {
    return (this.timeRange == null) ? 0 : this.timeRange.size();
  }

  public java.util.Iterator<LimitTimeRange> getTimeRangeIterator() {
    return (this.timeRange == null) ? null : this.timeRange.iterator();
  }

  public void addToTimeRange(LimitTimeRange elem) {
    if (this.timeRange == null) {
      this.timeRange = new ArrayList<LimitTimeRange>();
    }
    this.timeRange.add(elem);
  }

  public List<LimitTimeRange> getTimeRange() {
    return this.timeRange;
  }

  public AdInfo setTimeRange(List<LimitTimeRange> timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  public void unsetTimeRange() {
    this.timeRange = null;
  }

  /** Returns true if field timeRange is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRange() {
    return this.timeRange != null;
  }

  public void setTimeRangeIsSet(boolean value) {
    if (!value) {
      this.timeRange = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public AdInfo setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public AdInfo setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getLimitCond() {
    return this.limitCond;
  }

  public AdInfo setLimitCond(int limitCond) {
    this.limitCond = limitCond;
    setLimitCondIsSet(true);
    return this;
  }

  public void unsetLimitCond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCOND_ISSET_ID);
  }

  /** Returns true if field limitCond is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitCond() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCOND_ISSET_ID);
  }

  public void setLimitCondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCOND_ISSET_ID, value);
  }

  public int getLimitNum() {
    return this.limitNum;
  }

  public AdInfo setLimitNum(int limitNum) {
    this.limitNum = limitNum;
    setLimitNumIsSet(true);
    return this;
  }

  public void unsetLimitNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITNUM_ISSET_ID);
  }

  /** Returns true if field limitNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITNUM_ISSET_ID);
  }

  public void setLimitNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITNUM_ISSET_ID, value);
  }

  public int getRecommendType() {
    return this.recommendType;
  }

  public AdInfo setRecommendType(int recommendType) {
    this.recommendType = recommendType;
    setRecommendTypeIsSet(true);
    return this;
  }

  public void unsetRecommendType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDTYPE_ISSET_ID);
  }

  /** Returns true if field recommendType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendType() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDTYPE_ISSET_ID);
  }

  public void setRecommendTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDTYPE_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public AdInfo setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public int getUnused1Size() {
    return (this.unused1 == null) ? 0 : this.unused1.size();
  }

  public java.util.Iterator<String> getUnused1Iterator() {
    return (this.unused1 == null) ? null : this.unused1.iterator();
  }

  public void addToUnused1(String elem) {
    if (this.unused1 == null) {
      this.unused1 = new ArrayList<String>();
    }
    this.unused1.add(elem);
  }

  public List<String> getUnused1() {
    return this.unused1;
  }

  public AdInfo setUnused1(List<String> unused1) {
    this.unused1 = unused1;
    return this;
  }

  public void unsetUnused1() {
    this.unused1 = null;
  }

  /** Returns true if field unused1 is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused1() {
    return this.unused1 != null;
  }

  public void setUnused1IsSet(boolean value) {
    if (!value) {
      this.unused1 = null;
    }
  }

  public int getUnused2Size() {
    return (this.unused2 == null) ? 0 : this.unused2.size();
  }

  public java.util.Iterator<Integer> getUnused2Iterator() {
    return (this.unused2 == null) ? null : this.unused2.iterator();
  }

  public void addToUnused2(int elem) {
    if (this.unused2 == null) {
      this.unused2 = new ArrayList<Integer>();
    }
    this.unused2.add(elem);
  }

  public List<Integer> getUnused2() {
    return this.unused2;
  }

  public AdInfo setUnused2(List<Integer> unused2) {
    this.unused2 = unused2;
    return this;
  }

  public void unsetUnused2() {
    this.unused2 = null;
  }

  /** Returns true if field unused2 is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused2() {
    return this.unused2 != null;
  }

  public void setUnused2IsSet(boolean value) {
    if (!value) {
      this.unused2 = null;
    }
  }

  public int getUnused3Size() {
    return (this.unused3 == null) ? 0 : this.unused3.size();
  }

  public java.util.Iterator<Integer> getUnused3Iterator() {
    return (this.unused3 == null) ? null : this.unused3.iterator();
  }

  public void addToUnused3(int elem) {
    if (this.unused3 == null) {
      this.unused3 = new ArrayList<Integer>();
    }
    this.unused3.add(elem);
  }

  public List<Integer> getUnused3() {
    return this.unused3;
  }

  public AdInfo setUnused3(List<Integer> unused3) {
    this.unused3 = unused3;
    return this;
  }

  public void unsetUnused3() {
    this.unused3 = null;
  }

  /** Returns true if field unused3 is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused3() {
    return this.unused3 != null;
  }

  public void setUnused3IsSet(boolean value) {
    if (!value) {
      this.unused3 = null;
    }
  }

  public int getPutFirmSize() {
    return (this.putFirm == null) ? 0 : this.putFirm.size();
  }

  public java.util.Iterator<String> getPutFirmIterator() {
    return (this.putFirm == null) ? null : this.putFirm.iterator();
  }

  public void addToPutFirm(String elem) {
    if (this.putFirm == null) {
      this.putFirm = new HashSet<String>();
    }
    this.putFirm.add(elem);
  }

  public Set<String> getPutFirm() {
    return this.putFirm;
  }

  public AdInfo setPutFirm(Set<String> putFirm) {
    this.putFirm = putFirm;
    return this;
  }

  public void unsetPutFirm() {
    this.putFirm = null;
  }

  /** Returns true if field putFirm is set (has been assigned a value) and false otherwise */
  public boolean isSetPutFirm() {
    return this.putFirm != null;
  }

  public void setPutFirmIsSet(boolean value) {
    if (!value) {
      this.putFirm = null;
    }
  }

  public int getOperatorsSize() {
    return (this.operators == null) ? 0 : this.operators.size();
  }

  public java.util.Iterator<Integer> getOperatorsIterator() {
    return (this.operators == null) ? null : this.operators.iterator();
  }

  public void addToOperators(int elem) {
    if (this.operators == null) {
      this.operators = new ArrayList<Integer>();
    }
    this.operators.add(elem);
  }

  public List<Integer> getOperators() {
    return this.operators;
  }

  public AdInfo setOperators(List<Integer> operators) {
    this.operators = operators;
    return this;
  }

  public void unsetOperators() {
    this.operators = null;
  }

  /** Returns true if field operators is set (has been assigned a value) and false otherwise */
  public boolean isSetOperators() {
    return this.operators != null;
  }

  public void setOperatorsIsSet(boolean value) {
    if (!value) {
      this.operators = null;
    }
  }

  public int getNetEnvSize() {
    return (this.netEnv == null) ? 0 : this.netEnv.size();
  }

  public java.util.Iterator<Integer> getNetEnvIterator() {
    return (this.netEnv == null) ? null : this.netEnv.iterator();
  }

  public void addToNetEnv(int elem) {
    if (this.netEnv == null) {
      this.netEnv = new ArrayList<Integer>();
    }
    this.netEnv.add(elem);
  }

  public List<Integer> getNetEnv() {
    return this.netEnv;
  }

  public AdInfo setNetEnv(List<Integer> netEnv) {
    this.netEnv = netEnv;
    return this;
  }

  public void unsetNetEnv() {
    this.netEnv = null;
  }

  /** Returns true if field netEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetNetEnv() {
    return this.netEnv != null;
  }

  public void setNetEnvIsSet(boolean value) {
    if (!value) {
      this.netEnv = null;
    }
  }

  public int getGeographyType() {
    return this.geographyType;
  }

  public AdInfo setGeographyType(int geographyType) {
    this.geographyType = geographyType;
    setGeographyTypeIsSet(true);
    return this;
  }

  public void unsetGeographyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GEOGRAPHYTYPE_ISSET_ID);
  }

  /** Returns true if field geographyType is set (has been assigned a value) and false otherwise */
  public boolean isSetGeographyType() {
    return EncodingUtils.testBit(__isset_bitfield, __GEOGRAPHYTYPE_ISSET_ID);
  }

  public void setGeographyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GEOGRAPHYTYPE_ISSET_ID, value);
  }

  public int getUnused4Size() {
    return (this.unused4 == null) ? 0 : this.unused4.size();
  }

  public java.util.Iterator<String> getUnused4Iterator() {
    return (this.unused4 == null) ? null : this.unused4.iterator();
  }

  public void addToUnused4(String elem) {
    if (this.unused4 == null) {
      this.unused4 = new ArrayList<String>();
    }
    this.unused4.add(elem);
  }

  public List<String> getUnused4() {
    return this.unused4;
  }

  public AdInfo setUnused4(List<String> unused4) {
    this.unused4 = unused4;
    return this;
  }

  public void unsetUnused4() {
    this.unused4 = null;
  }

  /** Returns true if field unused4 is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused4() {
    return this.unused4 != null;
  }

  public void setUnused4IsSet(boolean value) {
    if (!value) {
      this.unused4 = null;
    }
  }

  public int getPutDeviceSize() {
    return (this.putDevice == null) ? 0 : this.putDevice.size();
  }

  public java.util.Iterator<Integer> getPutDeviceIterator() {
    return (this.putDevice == null) ? null : this.putDevice.iterator();
  }

  public void addToPutDevice(int elem) {
    if (this.putDevice == null) {
      this.putDevice = new HashSet<Integer>();
    }
    this.putDevice.add(elem);
  }

  public Set<Integer> getPutDevice() {
    return this.putDevice;
  }

  public AdInfo setPutDevice(Set<Integer> putDevice) {
    this.putDevice = putDevice;
    return this;
  }

  public void unsetPutDevice() {
    this.putDevice = null;
  }

  /** Returns true if field putDevice is set (has been assigned a value) and false otherwise */
  public boolean isSetPutDevice() {
    return this.putDevice != null;
  }

  public void setPutDeviceIsSet(boolean value) {
    if (!value) {
      this.putDevice = null;
    }
  }

  public int getPutProductSize() {
    return (this.putProduct == null) ? 0 : this.putProduct.size();
  }

  public java.util.Iterator<Integer> getPutProductIterator() {
    return (this.putProduct == null) ? null : this.putProduct.iterator();
  }

  public void addToPutProduct(int elem) {
    if (this.putProduct == null) {
      this.putProduct = new HashSet<Integer>();
    }
    this.putProduct.add(elem);
  }

  public Set<Integer> getPutProduct() {
    return this.putProduct;
  }

  public AdInfo setPutProduct(Set<Integer> putProduct) {
    this.putProduct = putProduct;
    return this;
  }

  public void unsetPutProduct() {
    this.putProduct = null;
  }

  /** Returns true if field putProduct is set (has been assigned a value) and false otherwise */
  public boolean isSetPutProduct() {
    return this.putProduct != null;
  }

  public void setPutProductIsSet(boolean value) {
    if (!value) {
      this.putProduct = null;
    }
  }

  public int getCategorySize() {
    return (this.category == null) ? 0 : this.category.size();
  }

  public java.util.Iterator<String> getCategoryIterator() {
    return (this.category == null) ? null : this.category.iterator();
  }

  public void addToCategory(String elem) {
    if (this.category == null) {
      this.category = new HashSet<String>();
    }
    this.category.add(elem);
  }

  public Set<String> getCategory() {
    return this.category;
  }

  public AdInfo setCategory(Set<String> category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public int getGeographySize() {
    return (this.geography == null) ? 0 : this.geography.size();
  }

  public java.util.Iterator<String> getGeographyIterator() {
    return (this.geography == null) ? null : this.geography.iterator();
  }

  public void addToGeography(String elem) {
    if (this.geography == null) {
      this.geography = new HashSet<String>();
    }
    this.geography.add(elem);
  }

  public Set<String> getGeography() {
    return this.geography;
  }

  public AdInfo setGeography(Set<String> geography) {
    this.geography = geography;
    return this;
  }

  public void unsetGeography() {
    this.geography = null;
  }

  /** Returns true if field geography is set (has been assigned a value) and false otherwise */
  public boolean isSetGeography() {
    return this.geography != null;
  }

  public void setGeographyIsSet(boolean value) {
    if (!value) {
      this.geography = null;
    }
  }

  public int getIsAllApp() {
    return this.isAllApp;
  }

  public AdInfo setIsAllApp(int isAllApp) {
    this.isAllApp = isAllApp;
    setIsAllAppIsSet(true);
    return this;
  }

  public void unsetIsAllApp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALLAPP_ISSET_ID);
  }

  /** Returns true if field isAllApp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllApp() {
    return EncodingUtils.testBit(__isset_bitfield, __ISALLAPP_ISSET_ID);
  }

  public void setIsAllAppIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALLAPP_ISSET_ID, value);
  }

  public int getIsAllMobile() {
    return this.isAllMobile;
  }

  public AdInfo setIsAllMobile(int isAllMobile) {
    this.isAllMobile = isAllMobile;
    setIsAllMobileIsSet(true);
    return this;
  }

  public void unsetIsAllMobile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALLMOBILE_ISSET_ID);
  }

  /** Returns true if field isAllMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllMobile() {
    return EncodingUtils.testBit(__isset_bitfield, __ISALLMOBILE_ISSET_ID);
  }

  public void setIsAllMobileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALLMOBILE_ISSET_ID, value);
  }

  public int getIsAllNet() {
    return this.isAllNet;
  }

  public AdInfo setIsAllNet(int isAllNet) {
    this.isAllNet = isAllNet;
    setIsAllNetIsSet(true);
    return this;
  }

  public void unsetIsAllNet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALLNET_ISSET_ID);
  }

  /** Returns true if field isAllNet is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllNet() {
    return EncodingUtils.testBit(__isset_bitfield, __ISALLNET_ISSET_ID);
  }

  public void setIsAllNetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALLNET_ISSET_ID, value);
  }

  public int getIsKeywords() {
    return this.isKeywords;
  }

  public AdInfo setIsKeywords(int isKeywords) {
    this.isKeywords = isKeywords;
    setIsKeywordsIsSet(true);
    return this;
  }

  public void unsetIsKeywords() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISKEYWORDS_ISSET_ID);
  }

  /** Returns true if field isKeywords is set (has been assigned a value) and false otherwise */
  public boolean isSetIsKeywords() {
    return EncodingUtils.testBit(__isset_bitfield, __ISKEYWORDS_ISSET_ID);
  }

  public void setIsKeywordsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISKEYWORDS_ISSET_ID, value);
  }

  public int getMatchKeyWordsSize() {
    return (this.matchKeyWords == null) ? 0 : this.matchKeyWords.size();
  }

  public java.util.Iterator<String> getMatchKeyWordsIterator() {
    return (this.matchKeyWords == null) ? null : this.matchKeyWords.iterator();
  }

  public void addToMatchKeyWords(String elem) {
    if (this.matchKeyWords == null) {
      this.matchKeyWords = new ArrayList<String>();
    }
    this.matchKeyWords.add(elem);
  }

  public List<String> getMatchKeyWords() {
    return this.matchKeyWords;
  }

  public AdInfo setMatchKeyWords(List<String> matchKeyWords) {
    this.matchKeyWords = matchKeyWords;
    return this;
  }

  public void unsetMatchKeyWords() {
    this.matchKeyWords = null;
  }

  /** Returns true if field matchKeyWords is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchKeyWords() {
    return this.matchKeyWords != null;
  }

  public void setMatchKeyWordsIsSet(boolean value) {
    if (!value) {
      this.matchKeyWords = null;
    }
  }

  public int getIsNewsSoure() {
    return this.isNewsSoure;
  }

  public AdInfo setIsNewsSoure(int isNewsSoure) {
    this.isNewsSoure = isNewsSoure;
    setIsNewsSoureIsSet(true);
    return this;
  }

  public void unsetIsNewsSoure() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEWSSOURE_ISSET_ID);
  }

  /** Returns true if field isNewsSoure is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNewsSoure() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEWSSOURE_ISSET_ID);
  }

  public void setIsNewsSoureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEWSSOURE_ISSET_ID, value);
  }

  public int getIsMatchAllSource() {
    return this.isMatchAllSource;
  }

  public AdInfo setIsMatchAllSource(int isMatchAllSource) {
    this.isMatchAllSource = isMatchAllSource;
    setIsMatchAllSourceIsSet(true);
    return this;
  }

  public void unsetIsMatchAllSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMATCHALLSOURCE_ISSET_ID);
  }

  /** Returns true if field isMatchAllSource is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMatchAllSource() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMATCHALLSOURCE_ISSET_ID);
  }

  public void setIsMatchAllSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMATCHALLSOURCE_ISSET_ID, value);
  }

  public int getMatchNewSourceSize() {
    return (this.matchNewSource == null) ? 0 : this.matchNewSource.size();
  }

  public java.util.Iterator<Integer> getMatchNewSourceIterator() {
    return (this.matchNewSource == null) ? null : this.matchNewSource.iterator();
  }

  public void addToMatchNewSource(int elem) {
    if (this.matchNewSource == null) {
      this.matchNewSource = new HashSet<Integer>();
    }
    this.matchNewSource.add(elem);
  }

  public Set<Integer> getMatchNewSource() {
    return this.matchNewSource;
  }

  public AdInfo setMatchNewSource(Set<Integer> matchNewSource) {
    this.matchNewSource = matchNewSource;
    return this;
  }

  public void unsetMatchNewSource() {
    this.matchNewSource = null;
  }

  /** Returns true if field matchNewSource is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchNewSource() {
    return this.matchNewSource != null;
  }

  public void setMatchNewSourceIsSet(boolean value) {
    if (!value) {
      this.matchNewSource = null;
    }
  }

  public int getABTestType() {
    return this.ABTestType;
  }

  public AdInfo setABTestType(int ABTestType) {
    this.ABTestType = ABTestType;
    setABTestTypeIsSet(true);
    return this;
  }

  public void unsetABTestType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABTESTTYPE_ISSET_ID);
  }

  /** Returns true if field ABTestType is set (has been assigned a value) and false otherwise */
  public boolean isSetABTestType() {
    return EncodingUtils.testBit(__isset_bitfield, __ABTESTTYPE_ISSET_ID);
  }

  public void setABTestTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABTESTTYPE_ISSET_ID, value);
  }

  public int getDateClickViewSize() {
    return (this.dateClickView == null) ? 0 : this.dateClickView.size();
  }

  public java.util.Iterator<DateClickViewLimit> getDateClickViewIterator() {
    return (this.dateClickView == null) ? null : this.dateClickView.iterator();
  }

  public void addToDateClickView(DateClickViewLimit elem) {
    if (this.dateClickView == null) {
      this.dateClickView = new ArrayList<DateClickViewLimit>();
    }
    this.dateClickView.add(elem);
  }

  public List<DateClickViewLimit> getDateClickView() {
    return this.dateClickView;
  }

  public AdInfo setDateClickView(List<DateClickViewLimit> dateClickView) {
    this.dateClickView = dateClickView;
    return this;
  }

  public void unsetDateClickView() {
    this.dateClickView = null;
  }

  /** Returns true if field dateClickView is set (has been assigned a value) and false otherwise */
  public boolean isSetDateClickView() {
    return this.dateClickView != null;
  }

  public void setDateClickViewIsSet(boolean value) {
    if (!value) {
      this.dateClickView = null;
    }
  }

  public int getAppVersionSize() {
    return (this.appVersion == null) ? 0 : this.appVersion.size();
  }

  public java.util.Iterator<String> getAppVersionIterator() {
    return (this.appVersion == null) ? null : this.appVersion.iterator();
  }

  public void addToAppVersion(String elem) {
    if (this.appVersion == null) {
      this.appVersion = new HashSet<String>();
    }
    this.appVersion.add(elem);
  }

  public Set<String> getAppVersion() {
    return this.appVersion;
  }

  public AdInfo setAppVersion(Set<String> appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public int getIsRefresh() {
    return this.isRefresh;
  }

  public AdInfo setIsRefresh(int isRefresh) {
    this.isRefresh = isRefresh;
    setIsRefreshIsSet(true);
    return this;
  }

  public void unsetIsRefresh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREFRESH_ISSET_ID);
  }

  /** Returns true if field isRefresh is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRefresh() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREFRESH_ISSET_ID);
  }

  public void setIsRefreshIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREFRESH_ISSET_ID, value);
  }

  public int getMSeqSize() {
    return (this.mSeq == null) ? 0 : this.mSeq.size();
  }

  public void putToMSeq(String key, int val) {
    if (this.mSeq == null) {
      this.mSeq = new HashMap<String,Integer>();
    }
    this.mSeq.put(key, val);
  }

  public Map<String,Integer> getMSeq() {
    return this.mSeq;
  }

  public AdInfo setMSeq(Map<String,Integer> mSeq) {
    this.mSeq = mSeq;
    return this;
  }

  public void unsetMSeq() {
    this.mSeq = null;
  }

  /** Returns true if field mSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetMSeq() {
    return this.mSeq != null;
  }

  public void setMSeqIsSet(boolean value) {
    if (!value) {
      this.mSeq = null;
    }
  }

  public int getDataVersion() {
    return this.dataVersion;
  }

  public AdInfo setDataVersion(int dataVersion) {
    this.dataVersion = dataVersion;
    setDataVersionIsSet(true);
    return this;
  }

  public void unsetDataVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAVERSION_ISSET_ID);
  }

  /** Returns true if field dataVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDataVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAVERSION_ISSET_ID);
  }

  public void setDataVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAVERSION_ISSET_ID, value);
  }

  public int getModelSize() {
    return (this.model == null) ? 0 : this.model.size();
  }

  public java.util.Iterator<String> getModelIterator() {
    return (this.model == null) ? null : this.model.iterator();
  }

  public void addToModel(String elem) {
    if (this.model == null) {
      this.model = new HashSet<String>();
    }
    this.model.add(elem);
  }

  public Set<String> getModel() {
    return this.model;
  }

  public AdInfo setModel(Set<String> model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public int getTurnPlayType() {
    return this.TurnPlayType;
  }

  public AdInfo setTurnPlayType(int TurnPlayType) {
    this.TurnPlayType = TurnPlayType;
    setTurnPlayTypeIsSet(true);
    return this;
  }

  public void unsetTurnPlayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID);
  }

  /** Returns true if field TurnPlayType is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnPlayType() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID);
  }

  public void setTurnPlayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNPLAYTYPE_ISSET_ID, value);
  }

  public int getTurnLimit() {
    return this.TurnLimit;
  }

  public AdInfo setTurnLimit(int TurnLimit) {
    this.TurnLimit = TurnLimit;
    setTurnLimitIsSet(true);
    return this;
  }

  public void unsetTurnLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNLIMIT_ISSET_ID);
  }

  /** Returns true if field TurnLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNLIMIT_ISSET_ID);
  }

  public void setTurnLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNLIMIT_ISSET_ID, value);
  }

  public int getTurnClickLimit() {
    return this.TurnClickLimit;
  }

  public AdInfo setTurnClickLimit(int TurnClickLimit) {
    this.TurnClickLimit = TurnClickLimit;
    setTurnClickLimitIsSet(true);
    return this;
  }

  public void unsetTurnClickLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID);
  }

  /** Returns true if field TurnClickLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnClickLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID);
  }

  public void setTurnClickLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNCLICKLIMIT_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public AdInfo setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public int getOsSize() {
    return (this.os == null) ? 0 : this.os.size();
  }

  public java.util.Iterator<String> getOsIterator() {
    return (this.os == null) ? null : this.os.iterator();
  }

  public void addToOs(String elem) {
    if (this.os == null) {
      this.os = new HashSet<String>();
    }
    this.os.add(elem);
  }

  public Set<String> getOs() {
    return this.os;
  }

  public AdInfo setOs(Set<String> os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public int getAdSrcType() {
    return this.adSrcType;
  }

  public AdInfo setAdSrcType(int adSrcType) {
    this.adSrcType = adSrcType;
    setAdSrcTypeIsSet(true);
    return this;
  }

  public void unsetAdSrcType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSRCTYPE_ISSET_ID);
  }

  /** Returns true if field adSrcType is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSrcType() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSRCTYPE_ISSET_ID);
  }

  public void setAdSrcTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSRCTYPE_ISSET_ID, value);
  }

  public long getThirdID() {
    return this.thirdID;
  }

  public AdInfo setThirdID(long thirdID) {
    this.thirdID = thirdID;
    setThirdIDIsSet(true);
    return this;
  }

  public void unsetThirdID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIRDID_ISSET_ID);
  }

  /** Returns true if field thirdID is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdID() {
    return EncodingUtils.testBit(__isset_bitfield, __THIRDID_ISSET_ID);
  }

  public void setThirdIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIRDID_ISSET_ID, value);
  }

  public int getIncomeSize() {
    return (this.income == null) ? 0 : this.income.size();
  }

  public java.util.Iterator<Integer> getIncomeIterator() {
    return (this.income == null) ? null : this.income.iterator();
  }

  public void addToIncome(int elem) {
    if (this.income == null) {
      this.income = new HashSet<Integer>();
    }
    this.income.add(elem);
  }

  public Set<Integer> getIncome() {
    return this.income;
  }

  public AdInfo setIncome(Set<Integer> income) {
    this.income = income;
    return this;
  }

  public void unsetIncome() {
    this.income = null;
  }

  /** Returns true if field income is set (has been assigned a value) and false otherwise */
  public boolean isSetIncome() {
    return this.income != null;
  }

  public void setIncomeIsSet(boolean value) {
    if (!value) {
      this.income = null;
    }
  }

  public int getKidState() {
    return this.kidState;
  }

  public AdInfo setKidState(int kidState) {
    this.kidState = kidState;
    setKidStateIsSet(true);
    return this;
  }

  public void unsetKidState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KIDSTATE_ISSET_ID);
  }

  /** Returns true if field kidState is set (has been assigned a value) and false otherwise */
  public boolean isSetKidState() {
    return EncodingUtils.testBit(__isset_bitfield, __KIDSTATE_ISSET_ID);
  }

  public void setKidStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KIDSTATE_ISSET_ID, value);
  }

  public boolean isIsCateMatch() {
    return this.isCateMatch;
  }

  public AdInfo setIsCateMatch(boolean isCateMatch) {
    this.isCateMatch = isCateMatch;
    setIsCateMatchIsSet(true);
    return this;
  }

  public void unsetIsCateMatch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCATEMATCH_ISSET_ID);
  }

  /** Returns true if field isCateMatch is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCateMatch() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCATEMATCH_ISSET_ID);
  }

  public void setIsCateMatchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCATEMATCH_ISSET_ID, value);
  }

  public int getNewsTagsSize() {
    return (this.newsTags == null) ? 0 : this.newsTags.size();
  }

  public java.util.Iterator<String> getNewsTagsIterator() {
    return (this.newsTags == null) ? null : this.newsTags.iterator();
  }

  public void addToNewsTags(String elem) {
    if (this.newsTags == null) {
      this.newsTags = new HashSet<String>();
    }
    this.newsTags.add(elem);
  }

  public Set<String> getNewsTags() {
    return this.newsTags;
  }

  public AdInfo setNewsTags(Set<String> newsTags) {
    this.newsTags = newsTags;
    return this;
  }

  public void unsetNewsTags() {
    this.newsTags = null;
  }

  /** Returns true if field newsTags is set (has been assigned a value) and false otherwise */
  public boolean isSetNewsTags() {
    return this.newsTags != null;
  }

  public void setNewsTagsIsSet(boolean value) {
    if (!value) {
      this.newsTags = null;
    }
  }

  public boolean isIsScreenFlashAd() {
    return this.isScreenFlashAd;
  }

  public AdInfo setIsScreenFlashAd(boolean isScreenFlashAd) {
    this.isScreenFlashAd = isScreenFlashAd;
    setIsScreenFlashAdIsSet(true);
    return this;
  }

  public void unsetIsScreenFlashAd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSCREENFLASHAD_ISSET_ID);
  }

  /** Returns true if field isScreenFlashAd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsScreenFlashAd() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSCREENFLASHAD_ISSET_ID);
  }

  public void setIsScreenFlashAdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSCREENFLASHAD_ISSET_ID, value);
  }

  public int getFreshTm() {
    return this.freshTm;
  }

  public AdInfo setFreshTm(int freshTm) {
    this.freshTm = freshTm;
    setFreshTmIsSet(true);
    return this;
  }

  public void unsetFreshTm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRESHTM_ISSET_ID);
  }

  /** Returns true if field freshTm is set (has been assigned a value) and false otherwise */
  public boolean isSetFreshTm() {
    return EncodingUtils.testBit(__isset_bitfield, __FRESHTM_ISSET_ID);
  }

  public void setFreshTmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRESHTM_ISSET_ID, value);
  }

  public int getDateClickViewV2Size() {
    return (this.dateClickViewV2 == null) ? 0 : this.dateClickViewV2.size();
  }

  public java.util.Iterator<DateClickViewLimitV2> getDateClickViewV2Iterator() {
    return (this.dateClickViewV2 == null) ? null : this.dateClickViewV2.iterator();
  }

  public void addToDateClickViewV2(DateClickViewLimitV2 elem) {
    if (this.dateClickViewV2 == null) {
      this.dateClickViewV2 = new ArrayList<DateClickViewLimitV2>();
    }
    this.dateClickViewV2.add(elem);
  }

  public List<DateClickViewLimitV2> getDateClickViewV2() {
    return this.dateClickViewV2;
  }

  public AdInfo setDateClickViewV2(List<DateClickViewLimitV2> dateClickViewV2) {
    this.dateClickViewV2 = dateClickViewV2;
    return this;
  }

  public void unsetDateClickViewV2() {
    this.dateClickViewV2 = null;
  }

  /** Returns true if field dateClickViewV2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDateClickViewV2() {
    return this.dateClickViewV2 != null;
  }

  public void setDateClickViewV2IsSet(boolean value) {
    if (!value) {
      this.dateClickViewV2 = null;
    }
  }

  public AdDeliveryCtrl getAdDeliveryCtrl() {
    return this.adDeliveryCtrl;
  }

  public AdInfo setAdDeliveryCtrl(AdDeliveryCtrl adDeliveryCtrl) {
    this.adDeliveryCtrl = adDeliveryCtrl;
    return this;
  }

  public void unsetAdDeliveryCtrl() {
    this.adDeliveryCtrl = null;
  }

  /** Returns true if field adDeliveryCtrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAdDeliveryCtrl() {
    return this.adDeliveryCtrl != null;
  }

  public void setAdDeliveryCtrlIsSet(boolean value) {
    if (!value) {
      this.adDeliveryCtrl = null;
    }
  }

  public int getLimitClickNum() {
    return this.limitClickNum;
  }

  public AdInfo setLimitClickNum(int limitClickNum) {
    this.limitClickNum = limitClickNum;
    setLimitClickNumIsSet(true);
    return this;
  }

  public void unsetLimitClickNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID);
  }

  /** Returns true if field limitClickNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitClickNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID);
  }

  public void setLimitClickNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCLICKNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Long)value);
      }
      break;

    case AD_CONTENT:
      if (value == null) {
        unsetAdContent();
      } else {
        setAdContent((AdContent)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case TIME_RANGE:
      if (value == null) {
        unsetTimeRange();
      } else {
        setTimeRange((List<LimitTimeRange>)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case LIMIT_COND:
      if (value == null) {
        unsetLimitCond();
      } else {
        setLimitCond((Integer)value);
      }
      break;

    case LIMIT_NUM:
      if (value == null) {
        unsetLimitNum();
      } else {
        setLimitNum((Integer)value);
      }
      break;

    case RECOMMEND_TYPE:
      if (value == null) {
        unsetRecommendType();
      } else {
        setRecommendType((Integer)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case UNUSED1:
      if (value == null) {
        unsetUnused1();
      } else {
        setUnused1((List<String>)value);
      }
      break;

    case UNUSED2:
      if (value == null) {
        unsetUnused2();
      } else {
        setUnused2((List<Integer>)value);
      }
      break;

    case UNUSED3:
      if (value == null) {
        unsetUnused3();
      } else {
        setUnused3((List<Integer>)value);
      }
      break;

    case PUT_FIRM:
      if (value == null) {
        unsetPutFirm();
      } else {
        setPutFirm((Set<String>)value);
      }
      break;

    case OPERATORS:
      if (value == null) {
        unsetOperators();
      } else {
        setOperators((List<Integer>)value);
      }
      break;

    case NET_ENV:
      if (value == null) {
        unsetNetEnv();
      } else {
        setNetEnv((List<Integer>)value);
      }
      break;

    case GEOGRAPHY_TYPE:
      if (value == null) {
        unsetGeographyType();
      } else {
        setGeographyType((Integer)value);
      }
      break;

    case UNUSED4:
      if (value == null) {
        unsetUnused4();
      } else {
        setUnused4((List<String>)value);
      }
      break;

    case PUT_DEVICE:
      if (value == null) {
        unsetPutDevice();
      } else {
        setPutDevice((Set<Integer>)value);
      }
      break;

    case PUT_PRODUCT:
      if (value == null) {
        unsetPutProduct();
      } else {
        setPutProduct((Set<Integer>)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Set<String>)value);
      }
      break;

    case GEOGRAPHY:
      if (value == null) {
        unsetGeography();
      } else {
        setGeography((Set<String>)value);
      }
      break;

    case IS_ALL_APP:
      if (value == null) {
        unsetIsAllApp();
      } else {
        setIsAllApp((Integer)value);
      }
      break;

    case IS_ALL_MOBILE:
      if (value == null) {
        unsetIsAllMobile();
      } else {
        setIsAllMobile((Integer)value);
      }
      break;

    case IS_ALL_NET:
      if (value == null) {
        unsetIsAllNet();
      } else {
        setIsAllNet((Integer)value);
      }
      break;

    case IS_KEYWORDS:
      if (value == null) {
        unsetIsKeywords();
      } else {
        setIsKeywords((Integer)value);
      }
      break;

    case MATCH_KEY_WORDS:
      if (value == null) {
        unsetMatchKeyWords();
      } else {
        setMatchKeyWords((List<String>)value);
      }
      break;

    case IS_NEWS_SOURE:
      if (value == null) {
        unsetIsNewsSoure();
      } else {
        setIsNewsSoure((Integer)value);
      }
      break;

    case IS_MATCH_ALL_SOURCE:
      if (value == null) {
        unsetIsMatchAllSource();
      } else {
        setIsMatchAllSource((Integer)value);
      }
      break;

    case MATCH_NEW_SOURCE:
      if (value == null) {
        unsetMatchNewSource();
      } else {
        setMatchNewSource((Set<Integer>)value);
      }
      break;

    case ABTEST_TYPE:
      if (value == null) {
        unsetABTestType();
      } else {
        setABTestType((Integer)value);
      }
      break;

    case DATE_CLICK_VIEW:
      if (value == null) {
        unsetDateClickView();
      } else {
        setDateClickView((List<DateClickViewLimit>)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((Set<String>)value);
      }
      break;

    case IS_REFRESH:
      if (value == null) {
        unsetIsRefresh();
      } else {
        setIsRefresh((Integer)value);
      }
      break;

    case M_SEQ:
      if (value == null) {
        unsetMSeq();
      } else {
        setMSeq((Map<String,Integer>)value);
      }
      break;

    case DATA_VERSION:
      if (value == null) {
        unsetDataVersion();
      } else {
        setDataVersion((Integer)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((Set<String>)value);
      }
      break;

    case TURN_PLAY_TYPE:
      if (value == null) {
        unsetTurnPlayType();
      } else {
        setTurnPlayType((Integer)value);
      }
      break;

    case TURN_LIMIT:
      if (value == null) {
        unsetTurnLimit();
      } else {
        setTurnLimit((Integer)value);
      }
      break;

    case TURN_CLICK_LIMIT:
      if (value == null) {
        unsetTurnClickLimit();
      } else {
        setTurnClickLimit((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((Set<String>)value);
      }
      break;

    case AD_SRC_TYPE:
      if (value == null) {
        unsetAdSrcType();
      } else {
        setAdSrcType((Integer)value);
      }
      break;

    case THIRD_ID:
      if (value == null) {
        unsetThirdID();
      } else {
        setThirdID((Long)value);
      }
      break;

    case INCOME:
      if (value == null) {
        unsetIncome();
      } else {
        setIncome((Set<Integer>)value);
      }
      break;

    case KID_STATE:
      if (value == null) {
        unsetKidState();
      } else {
        setKidState((Integer)value);
      }
      break;

    case IS_CATE_MATCH:
      if (value == null) {
        unsetIsCateMatch();
      } else {
        setIsCateMatch((Boolean)value);
      }
      break;

    case NEWS_TAGS:
      if (value == null) {
        unsetNewsTags();
      } else {
        setNewsTags((Set<String>)value);
      }
      break;

    case IS_SCREEN_FLASH_AD:
      if (value == null) {
        unsetIsScreenFlashAd();
      } else {
        setIsScreenFlashAd((Boolean)value);
      }
      break;

    case FRESH_TM:
      if (value == null) {
        unsetFreshTm();
      } else {
        setFreshTm((Integer)value);
      }
      break;

    case DATE_CLICK_VIEW_V2:
      if (value == null) {
        unsetDateClickViewV2();
      } else {
        setDateClickViewV2((List<DateClickViewLimitV2>)value);
      }
      break;

    case AD_DELIVERY_CTRL:
      if (value == null) {
        unsetAdDeliveryCtrl();
      } else {
        setAdDeliveryCtrl((AdDeliveryCtrl)value);
      }
      break;

    case LIMIT_CLICK_NUM:
      if (value == null) {
        unsetLimitClickNum();
      } else {
        setLimitClickNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_ID:
      return Long.valueOf(getAdId());

    case AD_CONTENT:
      return getAdContent();

    case STATE:
      return Integer.valueOf(getState());

    case TIME_RANGE:
      return getTimeRange();

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case LIMIT_COND:
      return Integer.valueOf(getLimitCond());

    case LIMIT_NUM:
      return Integer.valueOf(getLimitNum());

    case RECOMMEND_TYPE:
      return Integer.valueOf(getRecommendType());

    case WEIGHT:
      return Integer.valueOf(getWeight());

    case UNUSED1:
      return getUnused1();

    case UNUSED2:
      return getUnused2();

    case UNUSED3:
      return getUnused3();

    case PUT_FIRM:
      return getPutFirm();

    case OPERATORS:
      return getOperators();

    case NET_ENV:
      return getNetEnv();

    case GEOGRAPHY_TYPE:
      return Integer.valueOf(getGeographyType());

    case UNUSED4:
      return getUnused4();

    case PUT_DEVICE:
      return getPutDevice();

    case PUT_PRODUCT:
      return getPutProduct();

    case CATEGORY:
      return getCategory();

    case GEOGRAPHY:
      return getGeography();

    case IS_ALL_APP:
      return Integer.valueOf(getIsAllApp());

    case IS_ALL_MOBILE:
      return Integer.valueOf(getIsAllMobile());

    case IS_ALL_NET:
      return Integer.valueOf(getIsAllNet());

    case IS_KEYWORDS:
      return Integer.valueOf(getIsKeywords());

    case MATCH_KEY_WORDS:
      return getMatchKeyWords();

    case IS_NEWS_SOURE:
      return Integer.valueOf(getIsNewsSoure());

    case IS_MATCH_ALL_SOURCE:
      return Integer.valueOf(getIsMatchAllSource());

    case MATCH_NEW_SOURCE:
      return getMatchNewSource();

    case ABTEST_TYPE:
      return Integer.valueOf(getABTestType());

    case DATE_CLICK_VIEW:
      return getDateClickView();

    case APP_VERSION:
      return getAppVersion();

    case IS_REFRESH:
      return Integer.valueOf(getIsRefresh());

    case M_SEQ:
      return getMSeq();

    case DATA_VERSION:
      return Integer.valueOf(getDataVersion());

    case MODEL:
      return getModel();

    case TURN_PLAY_TYPE:
      return Integer.valueOf(getTurnPlayType());

    case TURN_LIMIT:
      return Integer.valueOf(getTurnLimit());

    case TURN_CLICK_LIMIT:
      return Integer.valueOf(getTurnClickLimit());

    case SEX:
      return Integer.valueOf(getSex());

    case OS:
      return getOs();

    case AD_SRC_TYPE:
      return Integer.valueOf(getAdSrcType());

    case THIRD_ID:
      return Long.valueOf(getThirdID());

    case INCOME:
      return getIncome();

    case KID_STATE:
      return Integer.valueOf(getKidState());

    case IS_CATE_MATCH:
      return Boolean.valueOf(isIsCateMatch());

    case NEWS_TAGS:
      return getNewsTags();

    case IS_SCREEN_FLASH_AD:
      return Boolean.valueOf(isIsScreenFlashAd());

    case FRESH_TM:
      return Integer.valueOf(getFreshTm());

    case DATE_CLICK_VIEW_V2:
      return getDateClickViewV2();

    case AD_DELIVERY_CTRL:
      return getAdDeliveryCtrl();

    case LIMIT_CLICK_NUM:
      return Integer.valueOf(getLimitClickNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_ID:
      return isSetAdId();
    case AD_CONTENT:
      return isSetAdContent();
    case STATE:
      return isSetState();
    case TIME_RANGE:
      return isSetTimeRange();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case LIMIT_COND:
      return isSetLimitCond();
    case LIMIT_NUM:
      return isSetLimitNum();
    case RECOMMEND_TYPE:
      return isSetRecommendType();
    case WEIGHT:
      return isSetWeight();
    case UNUSED1:
      return isSetUnused1();
    case UNUSED2:
      return isSetUnused2();
    case UNUSED3:
      return isSetUnused3();
    case PUT_FIRM:
      return isSetPutFirm();
    case OPERATORS:
      return isSetOperators();
    case NET_ENV:
      return isSetNetEnv();
    case GEOGRAPHY_TYPE:
      return isSetGeographyType();
    case UNUSED4:
      return isSetUnused4();
    case PUT_DEVICE:
      return isSetPutDevice();
    case PUT_PRODUCT:
      return isSetPutProduct();
    case CATEGORY:
      return isSetCategory();
    case GEOGRAPHY:
      return isSetGeography();
    case IS_ALL_APP:
      return isSetIsAllApp();
    case IS_ALL_MOBILE:
      return isSetIsAllMobile();
    case IS_ALL_NET:
      return isSetIsAllNet();
    case IS_KEYWORDS:
      return isSetIsKeywords();
    case MATCH_KEY_WORDS:
      return isSetMatchKeyWords();
    case IS_NEWS_SOURE:
      return isSetIsNewsSoure();
    case IS_MATCH_ALL_SOURCE:
      return isSetIsMatchAllSource();
    case MATCH_NEW_SOURCE:
      return isSetMatchNewSource();
    case ABTEST_TYPE:
      return isSetABTestType();
    case DATE_CLICK_VIEW:
      return isSetDateClickView();
    case APP_VERSION:
      return isSetAppVersion();
    case IS_REFRESH:
      return isSetIsRefresh();
    case M_SEQ:
      return isSetMSeq();
    case DATA_VERSION:
      return isSetDataVersion();
    case MODEL:
      return isSetModel();
    case TURN_PLAY_TYPE:
      return isSetTurnPlayType();
    case TURN_LIMIT:
      return isSetTurnLimit();
    case TURN_CLICK_LIMIT:
      return isSetTurnClickLimit();
    case SEX:
      return isSetSex();
    case OS:
      return isSetOs();
    case AD_SRC_TYPE:
      return isSetAdSrcType();
    case THIRD_ID:
      return isSetThirdID();
    case INCOME:
      return isSetIncome();
    case KID_STATE:
      return isSetKidState();
    case IS_CATE_MATCH:
      return isSetIsCateMatch();
    case NEWS_TAGS:
      return isSetNewsTags();
    case IS_SCREEN_FLASH_AD:
      return isSetIsScreenFlashAd();
    case FRESH_TM:
      return isSetFreshTm();
    case DATE_CLICK_VIEW_V2:
      return isSetDateClickViewV2();
    case AD_DELIVERY_CTRL:
      return isSetAdDeliveryCtrl();
    case LIMIT_CLICK_NUM:
      return isSetLimitClickNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdInfo)
      return this.equals((AdInfo)that);
    return false;
  }

  public boolean equals(AdInfo that) {
    if (that == null)
      return false;

    boolean this_present_adId = true;
    boolean that_present_adId = true;
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_adContent = true && this.isSetAdContent();
    boolean that_present_adContent = true && that.isSetAdContent();
    if (this_present_adContent || that_present_adContent) {
      if (!(this_present_adContent && that_present_adContent))
        return false;
      if (!this.adContent.equals(that.adContent))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_timeRange = true && this.isSetTimeRange();
    boolean that_present_timeRange = true && that.isSetTimeRange();
    if (this_present_timeRange || that_present_timeRange) {
      if (!(this_present_timeRange && that_present_timeRange))
        return false;
      if (!this.timeRange.equals(that.timeRange))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_limitCond = true && this.isSetLimitCond();
    boolean that_present_limitCond = true && that.isSetLimitCond();
    if (this_present_limitCond || that_present_limitCond) {
      if (!(this_present_limitCond && that_present_limitCond))
        return false;
      if (this.limitCond != that.limitCond)
        return false;
    }

    boolean this_present_limitNum = true && this.isSetLimitNum();
    boolean that_present_limitNum = true && that.isSetLimitNum();
    if (this_present_limitNum || that_present_limitNum) {
      if (!(this_present_limitNum && that_present_limitNum))
        return false;
      if (this.limitNum != that.limitNum)
        return false;
    }

    boolean this_present_recommendType = true && this.isSetRecommendType();
    boolean that_present_recommendType = true && that.isSetRecommendType();
    if (this_present_recommendType || that_present_recommendType) {
      if (!(this_present_recommendType && that_present_recommendType))
        return false;
      if (this.recommendType != that.recommendType)
        return false;
    }

    boolean this_present_weight = true && this.isSetWeight();
    boolean that_present_weight = true && that.isSetWeight();
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_unused1 = true && this.isSetUnused1();
    boolean that_present_unused1 = true && that.isSetUnused1();
    if (this_present_unused1 || that_present_unused1) {
      if (!(this_present_unused1 && that_present_unused1))
        return false;
      if (!this.unused1.equals(that.unused1))
        return false;
    }

    boolean this_present_unused2 = true && this.isSetUnused2();
    boolean that_present_unused2 = true && that.isSetUnused2();
    if (this_present_unused2 || that_present_unused2) {
      if (!(this_present_unused2 && that_present_unused2))
        return false;
      if (!this.unused2.equals(that.unused2))
        return false;
    }

    boolean this_present_unused3 = true && this.isSetUnused3();
    boolean that_present_unused3 = true && that.isSetUnused3();
    if (this_present_unused3 || that_present_unused3) {
      if (!(this_present_unused3 && that_present_unused3))
        return false;
      if (!this.unused3.equals(that.unused3))
        return false;
    }

    boolean this_present_putFirm = true && this.isSetPutFirm();
    boolean that_present_putFirm = true && that.isSetPutFirm();
    if (this_present_putFirm || that_present_putFirm) {
      if (!(this_present_putFirm && that_present_putFirm))
        return false;
      if (!this.putFirm.equals(that.putFirm))
        return false;
    }

    boolean this_present_operators = true && this.isSetOperators();
    boolean that_present_operators = true && that.isSetOperators();
    if (this_present_operators || that_present_operators) {
      if (!(this_present_operators && that_present_operators))
        return false;
      if (!this.operators.equals(that.operators))
        return false;
    }

    boolean this_present_netEnv = true && this.isSetNetEnv();
    boolean that_present_netEnv = true && that.isSetNetEnv();
    if (this_present_netEnv || that_present_netEnv) {
      if (!(this_present_netEnv && that_present_netEnv))
        return false;
      if (!this.netEnv.equals(that.netEnv))
        return false;
    }

    boolean this_present_geographyType = true && this.isSetGeographyType();
    boolean that_present_geographyType = true && that.isSetGeographyType();
    if (this_present_geographyType || that_present_geographyType) {
      if (!(this_present_geographyType && that_present_geographyType))
        return false;
      if (this.geographyType != that.geographyType)
        return false;
    }

    boolean this_present_unused4 = true && this.isSetUnused4();
    boolean that_present_unused4 = true && that.isSetUnused4();
    if (this_present_unused4 || that_present_unused4) {
      if (!(this_present_unused4 && that_present_unused4))
        return false;
      if (!this.unused4.equals(that.unused4))
        return false;
    }

    boolean this_present_putDevice = true && this.isSetPutDevice();
    boolean that_present_putDevice = true && that.isSetPutDevice();
    if (this_present_putDevice || that_present_putDevice) {
      if (!(this_present_putDevice && that_present_putDevice))
        return false;
      if (!this.putDevice.equals(that.putDevice))
        return false;
    }

    boolean this_present_putProduct = true && this.isSetPutProduct();
    boolean that_present_putProduct = true && that.isSetPutProduct();
    if (this_present_putProduct || that_present_putProduct) {
      if (!(this_present_putProduct && that_present_putProduct))
        return false;
      if (!this.putProduct.equals(that.putProduct))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_geography = true && this.isSetGeography();
    boolean that_present_geography = true && that.isSetGeography();
    if (this_present_geography || that_present_geography) {
      if (!(this_present_geography && that_present_geography))
        return false;
      if (!this.geography.equals(that.geography))
        return false;
    }

    boolean this_present_isAllApp = true && this.isSetIsAllApp();
    boolean that_present_isAllApp = true && that.isSetIsAllApp();
    if (this_present_isAllApp || that_present_isAllApp) {
      if (!(this_present_isAllApp && that_present_isAllApp))
        return false;
      if (this.isAllApp != that.isAllApp)
        return false;
    }

    boolean this_present_isAllMobile = true && this.isSetIsAllMobile();
    boolean that_present_isAllMobile = true && that.isSetIsAllMobile();
    if (this_present_isAllMobile || that_present_isAllMobile) {
      if (!(this_present_isAllMobile && that_present_isAllMobile))
        return false;
      if (this.isAllMobile != that.isAllMobile)
        return false;
    }

    boolean this_present_isAllNet = true && this.isSetIsAllNet();
    boolean that_present_isAllNet = true && that.isSetIsAllNet();
    if (this_present_isAllNet || that_present_isAllNet) {
      if (!(this_present_isAllNet && that_present_isAllNet))
        return false;
      if (this.isAllNet != that.isAllNet)
        return false;
    }

    boolean this_present_isKeywords = true && this.isSetIsKeywords();
    boolean that_present_isKeywords = true && that.isSetIsKeywords();
    if (this_present_isKeywords || that_present_isKeywords) {
      if (!(this_present_isKeywords && that_present_isKeywords))
        return false;
      if (this.isKeywords != that.isKeywords)
        return false;
    }

    boolean this_present_matchKeyWords = true && this.isSetMatchKeyWords();
    boolean that_present_matchKeyWords = true && that.isSetMatchKeyWords();
    if (this_present_matchKeyWords || that_present_matchKeyWords) {
      if (!(this_present_matchKeyWords && that_present_matchKeyWords))
        return false;
      if (!this.matchKeyWords.equals(that.matchKeyWords))
        return false;
    }

    boolean this_present_isNewsSoure = true && this.isSetIsNewsSoure();
    boolean that_present_isNewsSoure = true && that.isSetIsNewsSoure();
    if (this_present_isNewsSoure || that_present_isNewsSoure) {
      if (!(this_present_isNewsSoure && that_present_isNewsSoure))
        return false;
      if (this.isNewsSoure != that.isNewsSoure)
        return false;
    }

    boolean this_present_isMatchAllSource = true && this.isSetIsMatchAllSource();
    boolean that_present_isMatchAllSource = true && that.isSetIsMatchAllSource();
    if (this_present_isMatchAllSource || that_present_isMatchAllSource) {
      if (!(this_present_isMatchAllSource && that_present_isMatchAllSource))
        return false;
      if (this.isMatchAllSource != that.isMatchAllSource)
        return false;
    }

    boolean this_present_matchNewSource = true && this.isSetMatchNewSource();
    boolean that_present_matchNewSource = true && that.isSetMatchNewSource();
    if (this_present_matchNewSource || that_present_matchNewSource) {
      if (!(this_present_matchNewSource && that_present_matchNewSource))
        return false;
      if (!this.matchNewSource.equals(that.matchNewSource))
        return false;
    }

    boolean this_present_ABTestType = true && this.isSetABTestType();
    boolean that_present_ABTestType = true && that.isSetABTestType();
    if (this_present_ABTestType || that_present_ABTestType) {
      if (!(this_present_ABTestType && that_present_ABTestType))
        return false;
      if (this.ABTestType != that.ABTestType)
        return false;
    }

    boolean this_present_dateClickView = true && this.isSetDateClickView();
    boolean that_present_dateClickView = true && that.isSetDateClickView();
    if (this_present_dateClickView || that_present_dateClickView) {
      if (!(this_present_dateClickView && that_present_dateClickView))
        return false;
      if (!this.dateClickView.equals(that.dateClickView))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_isRefresh = true && this.isSetIsRefresh();
    boolean that_present_isRefresh = true && that.isSetIsRefresh();
    if (this_present_isRefresh || that_present_isRefresh) {
      if (!(this_present_isRefresh && that_present_isRefresh))
        return false;
      if (this.isRefresh != that.isRefresh)
        return false;
    }

    boolean this_present_mSeq = true && this.isSetMSeq();
    boolean that_present_mSeq = true && that.isSetMSeq();
    if (this_present_mSeq || that_present_mSeq) {
      if (!(this_present_mSeq && that_present_mSeq))
        return false;
      if (!this.mSeq.equals(that.mSeq))
        return false;
    }

    boolean this_present_dataVersion = true && this.isSetDataVersion();
    boolean that_present_dataVersion = true && that.isSetDataVersion();
    if (this_present_dataVersion || that_present_dataVersion) {
      if (!(this_present_dataVersion && that_present_dataVersion))
        return false;
      if (this.dataVersion != that.dataVersion)
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_TurnPlayType = true && this.isSetTurnPlayType();
    boolean that_present_TurnPlayType = true && that.isSetTurnPlayType();
    if (this_present_TurnPlayType || that_present_TurnPlayType) {
      if (!(this_present_TurnPlayType && that_present_TurnPlayType))
        return false;
      if (this.TurnPlayType != that.TurnPlayType)
        return false;
    }

    boolean this_present_TurnLimit = true && this.isSetTurnLimit();
    boolean that_present_TurnLimit = true && that.isSetTurnLimit();
    if (this_present_TurnLimit || that_present_TurnLimit) {
      if (!(this_present_TurnLimit && that_present_TurnLimit))
        return false;
      if (this.TurnLimit != that.TurnLimit)
        return false;
    }

    boolean this_present_TurnClickLimit = true && this.isSetTurnClickLimit();
    boolean that_present_TurnClickLimit = true && that.isSetTurnClickLimit();
    if (this_present_TurnClickLimit || that_present_TurnClickLimit) {
      if (!(this_present_TurnClickLimit && that_present_TurnClickLimit))
        return false;
      if (this.TurnClickLimit != that.TurnClickLimit)
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_adSrcType = true && this.isSetAdSrcType();
    boolean that_present_adSrcType = true && that.isSetAdSrcType();
    if (this_present_adSrcType || that_present_adSrcType) {
      if (!(this_present_adSrcType && that_present_adSrcType))
        return false;
      if (this.adSrcType != that.adSrcType)
        return false;
    }

    boolean this_present_thirdID = true && this.isSetThirdID();
    boolean that_present_thirdID = true && that.isSetThirdID();
    if (this_present_thirdID || that_present_thirdID) {
      if (!(this_present_thirdID && that_present_thirdID))
        return false;
      if (this.thirdID != that.thirdID)
        return false;
    }

    boolean this_present_income = true && this.isSetIncome();
    boolean that_present_income = true && that.isSetIncome();
    if (this_present_income || that_present_income) {
      if (!(this_present_income && that_present_income))
        return false;
      if (!this.income.equals(that.income))
        return false;
    }

    boolean this_present_kidState = true && this.isSetKidState();
    boolean that_present_kidState = true && that.isSetKidState();
    if (this_present_kidState || that_present_kidState) {
      if (!(this_present_kidState && that_present_kidState))
        return false;
      if (this.kidState != that.kidState)
        return false;
    }

    boolean this_present_isCateMatch = true && this.isSetIsCateMatch();
    boolean that_present_isCateMatch = true && that.isSetIsCateMatch();
    if (this_present_isCateMatch || that_present_isCateMatch) {
      if (!(this_present_isCateMatch && that_present_isCateMatch))
        return false;
      if (this.isCateMatch != that.isCateMatch)
        return false;
    }

    boolean this_present_newsTags = true && this.isSetNewsTags();
    boolean that_present_newsTags = true && that.isSetNewsTags();
    if (this_present_newsTags || that_present_newsTags) {
      if (!(this_present_newsTags && that_present_newsTags))
        return false;
      if (!this.newsTags.equals(that.newsTags))
        return false;
    }

    boolean this_present_isScreenFlashAd = true && this.isSetIsScreenFlashAd();
    boolean that_present_isScreenFlashAd = true && that.isSetIsScreenFlashAd();
    if (this_present_isScreenFlashAd || that_present_isScreenFlashAd) {
      if (!(this_present_isScreenFlashAd && that_present_isScreenFlashAd))
        return false;
      if (this.isScreenFlashAd != that.isScreenFlashAd)
        return false;
    }

    boolean this_present_freshTm = true && this.isSetFreshTm();
    boolean that_present_freshTm = true && that.isSetFreshTm();
    if (this_present_freshTm || that_present_freshTm) {
      if (!(this_present_freshTm && that_present_freshTm))
        return false;
      if (this.freshTm != that.freshTm)
        return false;
    }

    boolean this_present_dateClickViewV2 = true && this.isSetDateClickViewV2();
    boolean that_present_dateClickViewV2 = true && that.isSetDateClickViewV2();
    if (this_present_dateClickViewV2 || that_present_dateClickViewV2) {
      if (!(this_present_dateClickViewV2 && that_present_dateClickViewV2))
        return false;
      if (!this.dateClickViewV2.equals(that.dateClickViewV2))
        return false;
    }

    boolean this_present_adDeliveryCtrl = true && this.isSetAdDeliveryCtrl();
    boolean that_present_adDeliveryCtrl = true && that.isSetAdDeliveryCtrl();
    if (this_present_adDeliveryCtrl || that_present_adDeliveryCtrl) {
      if (!(this_present_adDeliveryCtrl && that_present_adDeliveryCtrl))
        return false;
      if (!this.adDeliveryCtrl.equals(that.adDeliveryCtrl))
        return false;
    }

    boolean this_present_limitClickNum = true && this.isSetLimitClickNum();
    boolean that_present_limitClickNum = true && that.isSetLimitClickNum();
    if (this_present_limitClickNum || that_present_limitClickNum) {
      if (!(this_present_limitClickNum && that_present_limitClickNum))
        return false;
      if (this.limitClickNum != that.limitClickNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adId = true;
    list.add(present_adId);
    if (present_adId)
      list.add(adId);

    boolean present_adContent = true && (isSetAdContent());
    list.add(present_adContent);
    if (present_adContent)
      list.add(adContent);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_timeRange = true && (isSetTimeRange());
    list.add(present_timeRange);
    if (present_timeRange)
      list.add(timeRange);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_limitCond = true && (isSetLimitCond());
    list.add(present_limitCond);
    if (present_limitCond)
      list.add(limitCond);

    boolean present_limitNum = true && (isSetLimitNum());
    list.add(present_limitNum);
    if (present_limitNum)
      list.add(limitNum);

    boolean present_recommendType = true && (isSetRecommendType());
    list.add(present_recommendType);
    if (present_recommendType)
      list.add(recommendType);

    boolean present_weight = true && (isSetWeight());
    list.add(present_weight);
    if (present_weight)
      list.add(weight);

    boolean present_unused1 = true && (isSetUnused1());
    list.add(present_unused1);
    if (present_unused1)
      list.add(unused1);

    boolean present_unused2 = true && (isSetUnused2());
    list.add(present_unused2);
    if (present_unused2)
      list.add(unused2);

    boolean present_unused3 = true && (isSetUnused3());
    list.add(present_unused3);
    if (present_unused3)
      list.add(unused3);

    boolean present_putFirm = true && (isSetPutFirm());
    list.add(present_putFirm);
    if (present_putFirm)
      list.add(putFirm);

    boolean present_operators = true && (isSetOperators());
    list.add(present_operators);
    if (present_operators)
      list.add(operators);

    boolean present_netEnv = true && (isSetNetEnv());
    list.add(present_netEnv);
    if (present_netEnv)
      list.add(netEnv);

    boolean present_geographyType = true && (isSetGeographyType());
    list.add(present_geographyType);
    if (present_geographyType)
      list.add(geographyType);

    boolean present_unused4 = true && (isSetUnused4());
    list.add(present_unused4);
    if (present_unused4)
      list.add(unused4);

    boolean present_putDevice = true && (isSetPutDevice());
    list.add(present_putDevice);
    if (present_putDevice)
      list.add(putDevice);

    boolean present_putProduct = true && (isSetPutProduct());
    list.add(present_putProduct);
    if (present_putProduct)
      list.add(putProduct);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category);

    boolean present_geography = true && (isSetGeography());
    list.add(present_geography);
    if (present_geography)
      list.add(geography);

    boolean present_isAllApp = true && (isSetIsAllApp());
    list.add(present_isAllApp);
    if (present_isAllApp)
      list.add(isAllApp);

    boolean present_isAllMobile = true && (isSetIsAllMobile());
    list.add(present_isAllMobile);
    if (present_isAllMobile)
      list.add(isAllMobile);

    boolean present_isAllNet = true && (isSetIsAllNet());
    list.add(present_isAllNet);
    if (present_isAllNet)
      list.add(isAllNet);

    boolean present_isKeywords = true && (isSetIsKeywords());
    list.add(present_isKeywords);
    if (present_isKeywords)
      list.add(isKeywords);

    boolean present_matchKeyWords = true && (isSetMatchKeyWords());
    list.add(present_matchKeyWords);
    if (present_matchKeyWords)
      list.add(matchKeyWords);

    boolean present_isNewsSoure = true && (isSetIsNewsSoure());
    list.add(present_isNewsSoure);
    if (present_isNewsSoure)
      list.add(isNewsSoure);

    boolean present_isMatchAllSource = true && (isSetIsMatchAllSource());
    list.add(present_isMatchAllSource);
    if (present_isMatchAllSource)
      list.add(isMatchAllSource);

    boolean present_matchNewSource = true && (isSetMatchNewSource());
    list.add(present_matchNewSource);
    if (present_matchNewSource)
      list.add(matchNewSource);

    boolean present_ABTestType = true && (isSetABTestType());
    list.add(present_ABTestType);
    if (present_ABTestType)
      list.add(ABTestType);

    boolean present_dateClickView = true && (isSetDateClickView());
    list.add(present_dateClickView);
    if (present_dateClickView)
      list.add(dateClickView);

    boolean present_appVersion = true && (isSetAppVersion());
    list.add(present_appVersion);
    if (present_appVersion)
      list.add(appVersion);

    boolean present_isRefresh = true && (isSetIsRefresh());
    list.add(present_isRefresh);
    if (present_isRefresh)
      list.add(isRefresh);

    boolean present_mSeq = true && (isSetMSeq());
    list.add(present_mSeq);
    if (present_mSeq)
      list.add(mSeq);

    boolean present_dataVersion = true && (isSetDataVersion());
    list.add(present_dataVersion);
    if (present_dataVersion)
      list.add(dataVersion);

    boolean present_model = true && (isSetModel());
    list.add(present_model);
    if (present_model)
      list.add(model);

    boolean present_TurnPlayType = true && (isSetTurnPlayType());
    list.add(present_TurnPlayType);
    if (present_TurnPlayType)
      list.add(TurnPlayType);

    boolean present_TurnLimit = true && (isSetTurnLimit());
    list.add(present_TurnLimit);
    if (present_TurnLimit)
      list.add(TurnLimit);

    boolean present_TurnClickLimit = true && (isSetTurnClickLimit());
    list.add(present_TurnClickLimit);
    if (present_TurnClickLimit)
      list.add(TurnClickLimit);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_os = true && (isSetOs());
    list.add(present_os);
    if (present_os)
      list.add(os);

    boolean present_adSrcType = true && (isSetAdSrcType());
    list.add(present_adSrcType);
    if (present_adSrcType)
      list.add(adSrcType);

    boolean present_thirdID = true && (isSetThirdID());
    list.add(present_thirdID);
    if (present_thirdID)
      list.add(thirdID);

    boolean present_income = true && (isSetIncome());
    list.add(present_income);
    if (present_income)
      list.add(income);

    boolean present_kidState = true && (isSetKidState());
    list.add(present_kidState);
    if (present_kidState)
      list.add(kidState);

    boolean present_isCateMatch = true && (isSetIsCateMatch());
    list.add(present_isCateMatch);
    if (present_isCateMatch)
      list.add(isCateMatch);

    boolean present_newsTags = true && (isSetNewsTags());
    list.add(present_newsTags);
    if (present_newsTags)
      list.add(newsTags);

    boolean present_isScreenFlashAd = true && (isSetIsScreenFlashAd());
    list.add(present_isScreenFlashAd);
    if (present_isScreenFlashAd)
      list.add(isScreenFlashAd);

    boolean present_freshTm = true && (isSetFreshTm());
    list.add(present_freshTm);
    if (present_freshTm)
      list.add(freshTm);

    boolean present_dateClickViewV2 = true && (isSetDateClickViewV2());
    list.add(present_dateClickViewV2);
    if (present_dateClickViewV2)
      list.add(dateClickViewV2);

    boolean present_adDeliveryCtrl = true && (isSetAdDeliveryCtrl());
    list.add(present_adDeliveryCtrl);
    if (present_adDeliveryCtrl)
      list.add(adDeliveryCtrl);

    boolean present_limitClickNum = true && (isSetLimitClickNum());
    list.add(present_limitClickNum);
    if (present_limitClickNum)
      list.add(limitClickNum);

    return list.hashCode();
  }

  public int compareTo(AdInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdContent()).compareTo(other.isSetAdContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adContent, other.adContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(other.isSetTimeRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRange, other.timeRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitCond()).compareTo(other.isSetLimitCond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitCond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitCond, other.limitCond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitNum()).compareTo(other.isSetLimitNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitNum, other.limitNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendType()).compareTo(other.isSetRecommendType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendType, other.recommendType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnused1()).compareTo(other.isSetUnused1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused1, other.unused1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnused2()).compareTo(other.isSetUnused2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused2, other.unused2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnused3()).compareTo(other.isSetUnused3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused3, other.unused3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutFirm()).compareTo(other.isSetPutFirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutFirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putFirm, other.putFirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperators()).compareTo(other.isSetOperators());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperators()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operators, other.operators);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetEnv()).compareTo(other.isSetNetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netEnv, other.netEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeographyType()).compareTo(other.isSetGeographyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeographyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geographyType, other.geographyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnused4()).compareTo(other.isSetUnused4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused4, other.unused4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutDevice()).compareTo(other.isSetPutDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putDevice, other.putDevice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutProduct()).compareTo(other.isSetPutProduct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutProduct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putProduct, other.putProduct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeography()).compareTo(other.isSetGeography());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeography()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geography, other.geography);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllApp()).compareTo(other.isSetIsAllApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllApp, other.isAllApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllMobile()).compareTo(other.isSetIsAllMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllMobile, other.isAllMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllNet()).compareTo(other.isSetIsAllNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllNet, other.isAllNet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsKeywords()).compareTo(other.isSetIsKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isKeywords, other.isKeywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchKeyWords()).compareTo(other.isSetMatchKeyWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchKeyWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchKeyWords, other.matchKeyWords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNewsSoure()).compareTo(other.isSetIsNewsSoure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNewsSoure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNewsSoure, other.isNewsSoure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMatchAllSource()).compareTo(other.isSetIsMatchAllSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMatchAllSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMatchAllSource, other.isMatchAllSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchNewSource()).compareTo(other.isSetMatchNewSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchNewSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNewSource, other.matchNewSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetABTestType()).compareTo(other.isSetABTestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetABTestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ABTestType, other.ABTestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateClickView()).compareTo(other.isSetDateClickView());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateClickView()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateClickView, other.dateClickView);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(other.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, other.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRefresh()).compareTo(other.isSetIsRefresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRefresh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRefresh, other.isRefresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMSeq()).compareTo(other.isSetMSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSeq, other.mSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataVersion()).compareTo(other.isSetDataVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataVersion, other.dataVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnPlayType()).compareTo(other.isSetTurnPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnPlayType, other.TurnPlayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnLimit()).compareTo(other.isSetTurnLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnLimit, other.TurnLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnClickLimit()).compareTo(other.isSetTurnClickLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnClickLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TurnClickLimit, other.TurnClickLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSrcType()).compareTo(other.isSetAdSrcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSrcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSrcType, other.adSrcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdID()).compareTo(other.isSetThirdID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdID, other.thirdID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncome()).compareTo(other.isSetIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.income, other.income);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKidState()).compareTo(other.isSetKidState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKidState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kidState, other.kidState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCateMatch()).compareTo(other.isSetIsCateMatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCateMatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCateMatch, other.isCateMatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewsTags()).compareTo(other.isSetNewsTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewsTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsTags, other.newsTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsScreenFlashAd()).compareTo(other.isSetIsScreenFlashAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsScreenFlashAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isScreenFlashAd, other.isScreenFlashAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreshTm()).compareTo(other.isSetFreshTm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreshTm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freshTm, other.freshTm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateClickViewV2()).compareTo(other.isSetDateClickViewV2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateClickViewV2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateClickViewV2, other.dateClickViewV2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdDeliveryCtrl()).compareTo(other.isSetAdDeliveryCtrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdDeliveryCtrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adDeliveryCtrl, other.adDeliveryCtrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitClickNum()).compareTo(other.isSetLimitClickNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitClickNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitClickNum, other.limitClickNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdInfo(");
    boolean first = true;

    sb.append("adId:");
    sb.append(this.adId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adContent:");
    if (this.adContent == null) {
      sb.append("null");
    } else {
      sb.append(this.adContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (isSetTimeRange()) {
      if (!first) sb.append(", ");
      sb.append("timeRange:");
      if (this.timeRange == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRange);
      }
      first = false;
    }
    if (isSetStartDate()) {
      if (!first) sb.append(", ");
      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
    }
    if (isSetLimitCond()) {
      if (!first) sb.append(", ");
      sb.append("limitCond:");
      sb.append(this.limitCond);
      first = false;
    }
    if (isSetLimitNum()) {
      if (!first) sb.append(", ");
      sb.append("limitNum:");
      sb.append(this.limitNum);
      first = false;
    }
    if (isSetRecommendType()) {
      if (!first) sb.append(", ");
      sb.append("recommendType:");
      sb.append(this.recommendType);
      first = false;
    }
    if (isSetWeight()) {
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
    }
    if (isSetUnused1()) {
      if (!first) sb.append(", ");
      sb.append("unused1:");
      if (this.unused1 == null) {
        sb.append("null");
      } else {
        sb.append(this.unused1);
      }
      first = false;
    }
    if (isSetUnused2()) {
      if (!first) sb.append(", ");
      sb.append("unused2:");
      if (this.unused2 == null) {
        sb.append("null");
      } else {
        sb.append(this.unused2);
      }
      first = false;
    }
    if (isSetUnused3()) {
      if (!first) sb.append(", ");
      sb.append("unused3:");
      if (this.unused3 == null) {
        sb.append("null");
      } else {
        sb.append(this.unused3);
      }
      first = false;
    }
    if (isSetPutFirm()) {
      if (!first) sb.append(", ");
      sb.append("putFirm:");
      if (this.putFirm == null) {
        sb.append("null");
      } else {
        sb.append(this.putFirm);
      }
      first = false;
    }
    if (isSetOperators()) {
      if (!first) sb.append(", ");
      sb.append("operators:");
      if (this.operators == null) {
        sb.append("null");
      } else {
        sb.append(this.operators);
      }
      first = false;
    }
    if (isSetNetEnv()) {
      if (!first) sb.append(", ");
      sb.append("netEnv:");
      if (this.netEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.netEnv);
      }
      first = false;
    }
    if (isSetGeographyType()) {
      if (!first) sb.append(", ");
      sb.append("geographyType:");
      sb.append(this.geographyType);
      first = false;
    }
    if (isSetUnused4()) {
      if (!first) sb.append(", ");
      sb.append("unused4:");
      if (this.unused4 == null) {
        sb.append("null");
      } else {
        sb.append(this.unused4);
      }
      first = false;
    }
    if (isSetPutDevice()) {
      if (!first) sb.append(", ");
      sb.append("putDevice:");
      if (this.putDevice == null) {
        sb.append("null");
      } else {
        sb.append(this.putDevice);
      }
      first = false;
    }
    if (isSetPutProduct()) {
      if (!first) sb.append(", ");
      sb.append("putProduct:");
      if (this.putProduct == null) {
        sb.append("null");
      } else {
        sb.append(this.putProduct);
      }
      first = false;
    }
    if (isSetCategory()) {
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
    }
    if (isSetGeography()) {
      if (!first) sb.append(", ");
      sb.append("geography:");
      if (this.geography == null) {
        sb.append("null");
      } else {
        sb.append(this.geography);
      }
      first = false;
    }
    if (isSetIsAllApp()) {
      if (!first) sb.append(", ");
      sb.append("isAllApp:");
      sb.append(this.isAllApp);
      first = false;
    }
    if (isSetIsAllMobile()) {
      if (!first) sb.append(", ");
      sb.append("isAllMobile:");
      sb.append(this.isAllMobile);
      first = false;
    }
    if (isSetIsAllNet()) {
      if (!first) sb.append(", ");
      sb.append("isAllNet:");
      sb.append(this.isAllNet);
      first = false;
    }
    if (isSetIsKeywords()) {
      if (!first) sb.append(", ");
      sb.append("isKeywords:");
      sb.append(this.isKeywords);
      first = false;
    }
    if (isSetMatchKeyWords()) {
      if (!first) sb.append(", ");
      sb.append("matchKeyWords:");
      if (this.matchKeyWords == null) {
        sb.append("null");
      } else {
        sb.append(this.matchKeyWords);
      }
      first = false;
    }
    if (isSetIsNewsSoure()) {
      if (!first) sb.append(", ");
      sb.append("isNewsSoure:");
      sb.append(this.isNewsSoure);
      first = false;
    }
    if (isSetIsMatchAllSource()) {
      if (!first) sb.append(", ");
      sb.append("isMatchAllSource:");
      sb.append(this.isMatchAllSource);
      first = false;
    }
    if (isSetMatchNewSource()) {
      if (!first) sb.append(", ");
      sb.append("matchNewSource:");
      if (this.matchNewSource == null) {
        sb.append("null");
      } else {
        sb.append(this.matchNewSource);
      }
      first = false;
    }
    if (isSetABTestType()) {
      if (!first) sb.append(", ");
      sb.append("ABTestType:");
      sb.append(this.ABTestType);
      first = false;
    }
    if (isSetDateClickView()) {
      if (!first) sb.append(", ");
      sb.append("dateClickView:");
      if (this.dateClickView == null) {
        sb.append("null");
      } else {
        sb.append(this.dateClickView);
      }
      first = false;
    }
    if (isSetAppVersion()) {
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
    }
    if (isSetIsRefresh()) {
      if (!first) sb.append(", ");
      sb.append("isRefresh:");
      sb.append(this.isRefresh);
      first = false;
    }
    if (isSetMSeq()) {
      if (!first) sb.append(", ");
      sb.append("mSeq:");
      if (this.mSeq == null) {
        sb.append("null");
      } else {
        sb.append(this.mSeq);
      }
      first = false;
    }
    if (isSetDataVersion()) {
      if (!first) sb.append(", ");
      sb.append("dataVersion:");
      sb.append(this.dataVersion);
      first = false;
    }
    if (isSetModel()) {
      if (!first) sb.append(", ");
      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
    }
    if (isSetTurnPlayType()) {
      if (!first) sb.append(", ");
      sb.append("TurnPlayType:");
      sb.append(this.TurnPlayType);
      first = false;
    }
    if (isSetTurnLimit()) {
      if (!first) sb.append(", ");
      sb.append("TurnLimit:");
      sb.append(this.TurnLimit);
      first = false;
    }
    if (isSetTurnClickLimit()) {
      if (!first) sb.append(", ");
      sb.append("TurnClickLimit:");
      sb.append(this.TurnClickLimit);
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetOs()) {
      if (!first) sb.append(", ");
      sb.append("os:");
      if (this.os == null) {
        sb.append("null");
      } else {
        sb.append(this.os);
      }
      first = false;
    }
    if (isSetAdSrcType()) {
      if (!first) sb.append(", ");
      sb.append("adSrcType:");
      sb.append(this.adSrcType);
      first = false;
    }
    if (isSetThirdID()) {
      if (!first) sb.append(", ");
      sb.append("thirdID:");
      sb.append(this.thirdID);
      first = false;
    }
    if (isSetIncome()) {
      if (!first) sb.append(", ");
      sb.append("income:");
      if (this.income == null) {
        sb.append("null");
      } else {
        sb.append(this.income);
      }
      first = false;
    }
    if (isSetKidState()) {
      if (!first) sb.append(", ");
      sb.append("kidState:");
      sb.append(this.kidState);
      first = false;
    }
    if (isSetIsCateMatch()) {
      if (!first) sb.append(", ");
      sb.append("isCateMatch:");
      sb.append(this.isCateMatch);
      first = false;
    }
    if (isSetNewsTags()) {
      if (!first) sb.append(", ");
      sb.append("newsTags:");
      if (this.newsTags == null) {
        sb.append("null");
      } else {
        sb.append(this.newsTags);
      }
      first = false;
    }
    if (isSetIsScreenFlashAd()) {
      if (!first) sb.append(", ");
      sb.append("isScreenFlashAd:");
      sb.append(this.isScreenFlashAd);
      first = false;
    }
    if (isSetFreshTm()) {
      if (!first) sb.append(", ");
      sb.append("freshTm:");
      sb.append(this.freshTm);
      first = false;
    }
    if (isSetDateClickViewV2()) {
      if (!first) sb.append(", ");
      sb.append("dateClickViewV2:");
      if (this.dateClickViewV2 == null) {
        sb.append("null");
      } else {
        sb.append(this.dateClickViewV2);
      }
      first = false;
    }
    if (isSetAdDeliveryCtrl()) {
      if (!first) sb.append(", ");
      sb.append("adDeliveryCtrl:");
      if (this.adDeliveryCtrl == null) {
        sb.append("null");
      } else {
        sb.append(this.adDeliveryCtrl);
      }
      first = false;
    }
    if (isSetLimitClickNum()) {
      if (!first) sb.append(", ");
      sb.append("limitClickNum:");
      sb.append(this.limitClickNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adId' because it's a primitive and you chose the non-beans generator.
    if (adContent == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adContent' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'state' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (adContent != null) {
      adContent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdInfoStandardSchemeFactory implements SchemeFactory {
    public AdInfoStandardScheme getScheme() {
      return new AdInfoStandardScheme();
    }
  }

  private static class AdInfoStandardScheme extends StandardScheme<AdInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.adId = iprot.readI64();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AD_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adContent = new AdContent();
              struct.adContent.read(iprot);
              struct.setAdContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.timeRange = new ArrayList<LimitTimeRange>(_list136.size);
                LimitTimeRange _elem137;
                for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                {
                  _elem137 = new LimitTimeRange();
                  _elem137.read(iprot);
                  struct.timeRange.add(_elem137);
                }
                iprot.readListEnd();
              }
              struct.setTimeRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIMIT_COND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitCond = iprot.readI32();
              struct.setLimitCondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LIMIT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitNum = iprot.readI32();
              struct.setLimitNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECOMMEND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recommendType = iprot.readI32();
              struct.setRecommendTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weight = iprot.readI32();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNUSED1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list139 = iprot.readListBegin();
                struct.unused1 = new ArrayList<String>(_list139.size);
                String _elem140;
                for (int _i141 = 0; _i141 < _list139.size; ++_i141)
                {
                  _elem140 = iprot.readString();
                  struct.unused1.add(_elem140);
                }
                iprot.readListEnd();
              }
              struct.setUnused1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNUSED2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.unused2 = new ArrayList<Integer>(_list142.size);
                int _elem143;
                for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                {
                  _elem143 = iprot.readI32();
                  struct.unused2.add(_elem143);
                }
                iprot.readListEnd();
              }
              struct.setUnused2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UNUSED3
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list145 = iprot.readListBegin();
                struct.unused3 = new ArrayList<Integer>(_list145.size);
                int _elem146;
                for (int _i147 = 0; _i147 < _list145.size; ++_i147)
                {
                  _elem146 = iprot.readI32();
                  struct.unused3.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setUnused3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PUT_FIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set148 = iprot.readSetBegin();
                struct.putFirm = new HashSet<String>(2*_set148.size);
                String _elem149;
                for (int _i150 = 0; _i150 < _set148.size; ++_i150)
                {
                  _elem149 = iprot.readString();
                  struct.putFirm.add(_elem149);
                }
                iprot.readSetEnd();
              }
              struct.setPutFirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OPERATORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list151 = iprot.readListBegin();
                struct.operators = new ArrayList<Integer>(_list151.size);
                int _elem152;
                for (int _i153 = 0; _i153 < _list151.size; ++_i153)
                {
                  _elem152 = iprot.readI32();
                  struct.operators.add(_elem152);
                }
                iprot.readListEnd();
              }
              struct.setOperatorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NET_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                struct.netEnv = new ArrayList<Integer>(_list154.size);
                int _elem155;
                for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                {
                  _elem155 = iprot.readI32();
                  struct.netEnv.add(_elem155);
                }
                iprot.readListEnd();
              }
              struct.setNetEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GEOGRAPHY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.geographyType = iprot.readI32();
              struct.setGeographyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UNUSED4
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list157 = iprot.readListBegin();
                struct.unused4 = new ArrayList<String>(_list157.size);
                String _elem158;
                for (int _i159 = 0; _i159 < _list157.size; ++_i159)
                {
                  _elem158 = iprot.readString();
                  struct.unused4.add(_elem158);
                }
                iprot.readListEnd();
              }
              struct.setUnused4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PUT_DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set160 = iprot.readSetBegin();
                struct.putDevice = new HashSet<Integer>(2*_set160.size);
                int _elem161;
                for (int _i162 = 0; _i162 < _set160.size; ++_i162)
                {
                  _elem161 = iprot.readI32();
                  struct.putDevice.add(_elem161);
                }
                iprot.readSetEnd();
              }
              struct.setPutDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PUT_PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set163 = iprot.readSetBegin();
                struct.putProduct = new HashSet<Integer>(2*_set163.size);
                int _elem164;
                for (int _i165 = 0; _i165 < _set163.size; ++_i165)
                {
                  _elem164 = iprot.readI32();
                  struct.putProduct.add(_elem164);
                }
                iprot.readSetEnd();
              }
              struct.setPutProductIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set166 = iprot.readSetBegin();
                struct.category = new HashSet<String>(2*_set166.size);
                String _elem167;
                for (int _i168 = 0; _i168 < _set166.size; ++_i168)
                {
                  _elem167 = iprot.readString();
                  struct.category.add(_elem167);
                }
                iprot.readSetEnd();
              }
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // GEOGRAPHY
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set169 = iprot.readSetBegin();
                struct.geography = new HashSet<String>(2*_set169.size);
                String _elem170;
                for (int _i171 = 0; _i171 < _set169.size; ++_i171)
                {
                  _elem170 = iprot.readString();
                  struct.geography.add(_elem170);
                }
                iprot.readSetEnd();
              }
              struct.setGeographyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_ALL_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAllApp = iprot.readI32();
              struct.setIsAllAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_ALL_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAllMobile = iprot.readI32();
              struct.setIsAllMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_ALL_NET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAllNet = iprot.readI32();
              struct.setIsAllNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IS_KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isKeywords = iprot.readI32();
              struct.setIsKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MATCH_KEY_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.matchKeyWords = new ArrayList<String>(_list172.size);
                String _elem173;
                for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                {
                  _elem173 = iprot.readString();
                  struct.matchKeyWords.add(_elem173);
                }
                iprot.readListEnd();
              }
              struct.setMatchKeyWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // IS_NEWS_SOURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNewsSoure = iprot.readI32();
              struct.setIsNewsSoureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IS_MATCH_ALL_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isMatchAllSource = iprot.readI32();
              struct.setIsMatchAllSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MATCH_NEW_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set175 = iprot.readSetBegin();
                struct.matchNewSource = new HashSet<Integer>(2*_set175.size);
                int _elem176;
                for (int _i177 = 0; _i177 < _set175.size; ++_i177)
                {
                  _elem176 = iprot.readI32();
                  struct.matchNewSource.add(_elem176);
                }
                iprot.readSetEnd();
              }
              struct.setMatchNewSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // ABTEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ABTestType = iprot.readI32();
              struct.setABTestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // DATE_CLICK_VIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                struct.dateClickView = new ArrayList<DateClickViewLimit>(_list178.size);
                DateClickViewLimit _elem179;
                for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                {
                  _elem179 = new DateClickViewLimit();
                  _elem179.read(iprot);
                  struct.dateClickView.add(_elem179);
                }
                iprot.readListEnd();
              }
              struct.setDateClickViewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set181 = iprot.readSetBegin();
                struct.appVersion = new HashSet<String>(2*_set181.size);
                String _elem182;
                for (int _i183 = 0; _i183 < _set181.size; ++_i183)
                {
                  _elem182 = iprot.readString();
                  struct.appVersion.add(_elem182);
                }
                iprot.readSetEnd();
              }
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // IS_REFRESH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRefresh = iprot.readI32();
              struct.setIsRefreshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // M_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map184 = iprot.readMapBegin();
                struct.mSeq = new HashMap<String,Integer>(2*_map184.size);
                String _key185;
                int _val186;
                for (int _i187 = 0; _i187 < _map184.size; ++_i187)
                {
                  _key185 = iprot.readString();
                  _val186 = iprot.readI32();
                  struct.mSeq.put(_key185, _val186);
                }
                iprot.readMapEnd();
              }
              struct.setMSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // DATA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataVersion = iprot.readI32();
              struct.setDataVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set188 = iprot.readSetBegin();
                struct.model = new HashSet<String>(2*_set188.size);
                String _elem189;
                for (int _i190 = 0; _i190 < _set188.size; ++_i190)
                {
                  _elem189 = iprot.readString();
                  struct.model.add(_elem189);
                }
                iprot.readSetEnd();
              }
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // TURN_PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnPlayType = iprot.readI32();
              struct.setTurnPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // TURN_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnLimit = iprot.readI32();
              struct.setTurnLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // TURN_CLICK_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TurnClickLimit = iprot.readI32();
              struct.setTurnClickLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set191 = iprot.readSetBegin();
                struct.os = new HashSet<String>(2*_set191.size);
                String _elem192;
                for (int _i193 = 0; _i193 < _set191.size; ++_i193)
                {
                  _elem192 = iprot.readString();
                  struct.os.add(_elem192);
                }
                iprot.readSetEnd();
              }
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // AD_SRC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSrcType = iprot.readI32();
              struct.setAdSrcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // THIRD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.thirdID = iprot.readI64();
              struct.setThirdIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set194 = iprot.readSetBegin();
                struct.income = new HashSet<Integer>(2*_set194.size);
                int _elem195;
                for (int _i196 = 0; _i196 < _set194.size; ++_i196)
                {
                  _elem195 = iprot.readI32();
                  struct.income.add(_elem195);
                }
                iprot.readSetEnd();
              }
              struct.setIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // KID_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kidState = iprot.readI32();
              struct.setKidStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // IS_CATE_MATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCateMatch = iprot.readBool();
              struct.setIsCateMatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // NEWS_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set197 = iprot.readSetBegin();
                struct.newsTags = new HashSet<String>(2*_set197.size);
                String _elem198;
                for (int _i199 = 0; _i199 < _set197.size; ++_i199)
                {
                  _elem198 = iprot.readString();
                  struct.newsTags.add(_elem198);
                }
                iprot.readSetEnd();
              }
              struct.setNewsTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // IS_SCREEN_FLASH_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isScreenFlashAd = iprot.readBool();
              struct.setIsScreenFlashAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // FRESH_TM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freshTm = iprot.readI32();
              struct.setFreshTmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // DATE_CLICK_VIEW_V2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                struct.dateClickViewV2 = new ArrayList<DateClickViewLimitV2>(_list200.size);
                DateClickViewLimitV2 _elem201;
                for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                {
                  _elem201 = new DateClickViewLimitV2();
                  _elem201.read(iprot);
                  struct.dateClickViewV2.add(_elem201);
                }
                iprot.readListEnd();
              }
              struct.setDateClickViewV2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // AD_DELIVERY_CTRL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adDeliveryCtrl = new AdDeliveryCtrl();
              struct.adDeliveryCtrl.read(iprot);
              struct.setAdDeliveryCtrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // LIMIT_CLICK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitClickNum = iprot.readI32();
              struct.setLimitClickNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI64(struct.adId);
      oprot.writeFieldEnd();
      if (struct.adContent != null) {
        oprot.writeFieldBegin(AD_CONTENT_FIELD_DESC);
        struct.adContent.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.timeRange != null) {
        if (struct.isSetTimeRange()) {
          oprot.writeFieldBegin(TIME_RANGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeRange.size()));
            for (LimitTimeRange _iter203 : struct.timeRange)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.startDate != null) {
        if (struct.isSetStartDate()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endDate != null) {
        if (struct.isSetEndDate()) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitCond()) {
        oprot.writeFieldBegin(LIMIT_COND_FIELD_DESC);
        oprot.writeI32(struct.limitCond);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitNum()) {
        oprot.writeFieldBegin(LIMIT_NUM_FIELD_DESC);
        oprot.writeI32(struct.limitNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecommendType()) {
        oprot.writeFieldBegin(RECOMMEND_TYPE_FIELD_DESC);
        oprot.writeI32(struct.recommendType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeight()) {
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
      }
      if (struct.unused1 != null) {
        if (struct.isSetUnused1()) {
          oprot.writeFieldBegin(UNUSED1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unused1.size()));
            for (String _iter204 : struct.unused1)
            {
              oprot.writeString(_iter204);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unused2 != null) {
        if (struct.isSetUnused2()) {
          oprot.writeFieldBegin(UNUSED2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.unused2.size()));
            for (int _iter205 : struct.unused2)
            {
              oprot.writeI32(_iter205);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unused3 != null) {
        if (struct.isSetUnused3()) {
          oprot.writeFieldBegin(UNUSED3_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.unused3.size()));
            for (int _iter206 : struct.unused3)
            {
              oprot.writeI32(_iter206);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.putFirm != null) {
        if (struct.isSetPutFirm()) {
          oprot.writeFieldBegin(PUT_FIRM_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.putFirm.size()));
            for (String _iter207 : struct.putFirm)
            {
              oprot.writeString(_iter207);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.operators != null) {
        if (struct.isSetOperators()) {
          oprot.writeFieldBegin(OPERATORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.operators.size()));
            for (int _iter208 : struct.operators)
            {
              oprot.writeI32(_iter208);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.netEnv != null) {
        if (struct.isSetNetEnv()) {
          oprot.writeFieldBegin(NET_ENV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.netEnv.size()));
            for (int _iter209 : struct.netEnv)
            {
              oprot.writeI32(_iter209);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGeographyType()) {
        oprot.writeFieldBegin(GEOGRAPHY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.geographyType);
        oprot.writeFieldEnd();
      }
      if (struct.unused4 != null) {
        if (struct.isSetUnused4()) {
          oprot.writeFieldBegin(UNUSED4_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unused4.size()));
            for (String _iter210 : struct.unused4)
            {
              oprot.writeString(_iter210);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.putDevice != null) {
        if (struct.isSetPutDevice()) {
          oprot.writeFieldBegin(PUT_DEVICE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.putDevice.size()));
            for (int _iter211 : struct.putDevice)
            {
              oprot.writeI32(_iter211);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.putProduct != null) {
        if (struct.isSetPutProduct()) {
          oprot.writeFieldBegin(PUT_PRODUCT_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.putProduct.size()));
            for (int _iter212 : struct.putProduct)
            {
              oprot.writeI32(_iter212);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.category != null) {
        if (struct.isSetCategory()) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.category.size()));
            for (String _iter213 : struct.category)
            {
              oprot.writeString(_iter213);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.geography != null) {
        if (struct.isSetGeography()) {
          oprot.writeFieldBegin(GEOGRAPHY_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.geography.size()));
            for (String _iter214 : struct.geography)
            {
              oprot.writeString(_iter214);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsAllApp()) {
        oprot.writeFieldBegin(IS_ALL_APP_FIELD_DESC);
        oprot.writeI32(struct.isAllApp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAllMobile()) {
        oprot.writeFieldBegin(IS_ALL_MOBILE_FIELD_DESC);
        oprot.writeI32(struct.isAllMobile);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAllNet()) {
        oprot.writeFieldBegin(IS_ALL_NET_FIELD_DESC);
        oprot.writeI32(struct.isAllNet);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsKeywords()) {
        oprot.writeFieldBegin(IS_KEYWORDS_FIELD_DESC);
        oprot.writeI32(struct.isKeywords);
        oprot.writeFieldEnd();
      }
      if (struct.matchKeyWords != null) {
        if (struct.isSetMatchKeyWords()) {
          oprot.writeFieldBegin(MATCH_KEY_WORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.matchKeyWords.size()));
            for (String _iter215 : struct.matchKeyWords)
            {
              oprot.writeString(_iter215);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNewsSoure()) {
        oprot.writeFieldBegin(IS_NEWS_SOURE_FIELD_DESC);
        oprot.writeI32(struct.isNewsSoure);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsMatchAllSource()) {
        oprot.writeFieldBegin(IS_MATCH_ALL_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.isMatchAllSource);
        oprot.writeFieldEnd();
      }
      if (struct.matchNewSource != null) {
        if (struct.isSetMatchNewSource()) {
          oprot.writeFieldBegin(MATCH_NEW_SOURCE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.matchNewSource.size()));
            for (int _iter216 : struct.matchNewSource)
            {
              oprot.writeI32(_iter216);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetABTestType()) {
        oprot.writeFieldBegin(ABTEST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.ABTestType);
        oprot.writeFieldEnd();
      }
      if (struct.dateClickView != null) {
        if (struct.isSetDateClickView()) {
          oprot.writeFieldBegin(DATE_CLICK_VIEW_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dateClickView.size()));
            for (DateClickViewLimit _iter217 : struct.dateClickView)
            {
              _iter217.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersion != null) {
        if (struct.isSetAppVersion()) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.appVersion.size()));
            for (String _iter218 : struct.appVersion)
            {
              oprot.writeString(_iter218);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRefresh()) {
        oprot.writeFieldBegin(IS_REFRESH_FIELD_DESC);
        oprot.writeI32(struct.isRefresh);
        oprot.writeFieldEnd();
      }
      if (struct.mSeq != null) {
        if (struct.isSetMSeq()) {
          oprot.writeFieldBegin(M_SEQ_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.mSeq.size()));
            for (Map.Entry<String, Integer> _iter219 : struct.mSeq.entrySet())
            {
              oprot.writeString(_iter219.getKey());
              oprot.writeI32(_iter219.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDataVersion()) {
        oprot.writeFieldBegin(DATA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.dataVersion);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        if (struct.isSetModel()) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.model.size()));
            for (String _iter220 : struct.model)
            {
              oprot.writeString(_iter220);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTurnPlayType()) {
        oprot.writeFieldBegin(TURN_PLAY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.TurnPlayType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnLimit()) {
        oprot.writeFieldBegin(TURN_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.TurnLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnClickLimit()) {
        oprot.writeFieldBegin(TURN_CLICK_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.TurnClickLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.os != null) {
        if (struct.isSetOs()) {
          oprot.writeFieldBegin(OS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.os.size()));
            for (String _iter221 : struct.os)
            {
              oprot.writeString(_iter221);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAdSrcType()) {
        oprot.writeFieldBegin(AD_SRC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.adSrcType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThirdID()) {
        oprot.writeFieldBegin(THIRD_ID_FIELD_DESC);
        oprot.writeI64(struct.thirdID);
        oprot.writeFieldEnd();
      }
      if (struct.income != null) {
        if (struct.isSetIncome()) {
          oprot.writeFieldBegin(INCOME_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.income.size()));
            for (int _iter222 : struct.income)
            {
              oprot.writeI32(_iter222);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetKidState()) {
        oprot.writeFieldBegin(KID_STATE_FIELD_DESC);
        oprot.writeI32(struct.kidState);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsCateMatch()) {
        oprot.writeFieldBegin(IS_CATE_MATCH_FIELD_DESC);
        oprot.writeBool(struct.isCateMatch);
        oprot.writeFieldEnd();
      }
      if (struct.newsTags != null) {
        if (struct.isSetNewsTags()) {
          oprot.writeFieldBegin(NEWS_TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.newsTags.size()));
            for (String _iter223 : struct.newsTags)
            {
              oprot.writeString(_iter223);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsScreenFlashAd()) {
        oprot.writeFieldBegin(IS_SCREEN_FLASH_AD_FIELD_DESC);
        oprot.writeBool(struct.isScreenFlashAd);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFreshTm()) {
        oprot.writeFieldBegin(FRESH_TM_FIELD_DESC);
        oprot.writeI32(struct.freshTm);
        oprot.writeFieldEnd();
      }
      if (struct.dateClickViewV2 != null) {
        if (struct.isSetDateClickViewV2()) {
          oprot.writeFieldBegin(DATE_CLICK_VIEW_V2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dateClickViewV2.size()));
            for (DateClickViewLimitV2 _iter224 : struct.dateClickViewV2)
            {
              _iter224.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.adDeliveryCtrl != null) {
        if (struct.isSetAdDeliveryCtrl()) {
          oprot.writeFieldBegin(AD_DELIVERY_CTRL_FIELD_DESC);
          struct.adDeliveryCtrl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitClickNum()) {
        oprot.writeFieldBegin(LIMIT_CLICK_NUM_FIELD_DESC);
        oprot.writeI32(struct.limitClickNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdInfoTupleSchemeFactory implements SchemeFactory {
    public AdInfoTupleScheme getScheme() {
      return new AdInfoTupleScheme();
    }
  }

  private static class AdInfoTupleScheme extends TupleScheme<AdInfo> {

    public void write(org.apache.thrift.protocol.TProtocol prot, AdInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.adId);
      struct.adContent.write(oprot);
      oprot.writeI32(struct.state);
      BitSet optionals = new BitSet();
      if (struct.isSetTimeRange()) {
        optionals.set(0);
      }
      if (struct.isSetStartDate()) {
        optionals.set(1);
      }
      if (struct.isSetEndDate()) {
        optionals.set(2);
      }
      if (struct.isSetLimitCond()) {
        optionals.set(3);
      }
      if (struct.isSetLimitNum()) {
        optionals.set(4);
      }
      if (struct.isSetRecommendType()) {
        optionals.set(5);
      }
      if (struct.isSetWeight()) {
        optionals.set(6);
      }
      if (struct.isSetUnused1()) {
        optionals.set(7);
      }
      if (struct.isSetUnused2()) {
        optionals.set(8);
      }
      if (struct.isSetUnused3()) {
        optionals.set(9);
      }
      if (struct.isSetPutFirm()) {
        optionals.set(10);
      }
      if (struct.isSetOperators()) {
        optionals.set(11);
      }
      if (struct.isSetNetEnv()) {
        optionals.set(12);
      }
      if (struct.isSetGeographyType()) {
        optionals.set(13);
      }
      if (struct.isSetUnused4()) {
        optionals.set(14);
      }
      if (struct.isSetPutDevice()) {
        optionals.set(15);
      }
      if (struct.isSetPutProduct()) {
        optionals.set(16);
      }
      if (struct.isSetCategory()) {
        optionals.set(17);
      }
      if (struct.isSetGeography()) {
        optionals.set(18);
      }
      if (struct.isSetIsAllApp()) {
        optionals.set(19);
      }
      if (struct.isSetIsAllMobile()) {
        optionals.set(20);
      }
      if (struct.isSetIsAllNet()) {
        optionals.set(21);
      }
      if (struct.isSetIsKeywords()) {
        optionals.set(22);
      }
      if (struct.isSetMatchKeyWords()) {
        optionals.set(23);
      }
      if (struct.isSetIsNewsSoure()) {
        optionals.set(24);
      }
      if (struct.isSetIsMatchAllSource()) {
        optionals.set(25);
      }
      if (struct.isSetMatchNewSource()) {
        optionals.set(26);
      }
      if (struct.isSetABTestType()) {
        optionals.set(27);
      }
      if (struct.isSetDateClickView()) {
        optionals.set(28);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(29);
      }
      if (struct.isSetIsRefresh()) {
        optionals.set(30);
      }
      if (struct.isSetMSeq()) {
        optionals.set(31);
      }
      if (struct.isSetDataVersion()) {
        optionals.set(32);
      }
      if (struct.isSetModel()) {
        optionals.set(33);
      }
      if (struct.isSetTurnPlayType()) {
        optionals.set(34);
      }
      if (struct.isSetTurnLimit()) {
        optionals.set(35);
      }
      if (struct.isSetTurnClickLimit()) {
        optionals.set(36);
      }
      if (struct.isSetSex()) {
        optionals.set(37);
      }
      if (struct.isSetOs()) {
        optionals.set(38);
      }
      if (struct.isSetAdSrcType()) {
        optionals.set(39);
      }
      if (struct.isSetThirdID()) {
        optionals.set(40);
      }
      if (struct.isSetIncome()) {
        optionals.set(41);
      }
      if (struct.isSetKidState()) {
        optionals.set(42);
      }
      if (struct.isSetIsCateMatch()) {
        optionals.set(43);
      }
      if (struct.isSetNewsTags()) {
        optionals.set(44);
      }
      if (struct.isSetIsScreenFlashAd()) {
        optionals.set(45);
      }
      if (struct.isSetFreshTm()) {
        optionals.set(46);
      }
      if (struct.isSetDateClickViewV2()) {
        optionals.set(47);
      }
      if (struct.isSetAdDeliveryCtrl()) {
        optionals.set(48);
      }
      if (struct.isSetLimitClickNum()) {
        optionals.set(49);
      }
      oprot.writeBitSet(optionals, 50);
      if (struct.isSetTimeRange()) {
        {
          oprot.writeI32(struct.timeRange.size());
          for (LimitTimeRange _iter225 : struct.timeRange)
          {
            _iter225.write(oprot);
          }
        }
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetLimitCond()) {
        oprot.writeI32(struct.limitCond);
      }
      if (struct.isSetLimitNum()) {
        oprot.writeI32(struct.limitNum);
      }
      if (struct.isSetRecommendType()) {
        oprot.writeI32(struct.recommendType);
      }
      if (struct.isSetWeight()) {
        oprot.writeI32(struct.weight);
      }
      if (struct.isSetUnused1()) {
        {
          oprot.writeI32(struct.unused1.size());
          for (String _iter226 : struct.unused1)
          {
            oprot.writeString(_iter226);
          }
        }
      }
      if (struct.isSetUnused2()) {
        {
          oprot.writeI32(struct.unused2.size());
          for (int _iter227 : struct.unused2)
          {
            oprot.writeI32(_iter227);
          }
        }
      }
      if (struct.isSetUnused3()) {
        {
          oprot.writeI32(struct.unused3.size());
          for (int _iter228 : struct.unused3)
          {
            oprot.writeI32(_iter228);
          }
        }
      }
      if (struct.isSetPutFirm()) {
        {
          oprot.writeI32(struct.putFirm.size());
          for (String _iter229 : struct.putFirm)
          {
            oprot.writeString(_iter229);
          }
        }
      }
      if (struct.isSetOperators()) {
        {
          oprot.writeI32(struct.operators.size());
          for (int _iter230 : struct.operators)
          {
            oprot.writeI32(_iter230);
          }
        }
      }
      if (struct.isSetNetEnv()) {
        {
          oprot.writeI32(struct.netEnv.size());
          for (int _iter231 : struct.netEnv)
          {
            oprot.writeI32(_iter231);
          }
        }
      }
      if (struct.isSetGeographyType()) {
        oprot.writeI32(struct.geographyType);
      }
      if (struct.isSetUnused4()) {
        {
          oprot.writeI32(struct.unused4.size());
          for (String _iter232 : struct.unused4)
          {
            oprot.writeString(_iter232);
          }
        }
      }
      if (struct.isSetPutDevice()) {
        {
          oprot.writeI32(struct.putDevice.size());
          for (int _iter233 : struct.putDevice)
          {
            oprot.writeI32(_iter233);
          }
        }
      }
      if (struct.isSetPutProduct()) {
        {
          oprot.writeI32(struct.putProduct.size());
          for (int _iter234 : struct.putProduct)
          {
            oprot.writeI32(_iter234);
          }
        }
      }
      if (struct.isSetCategory()) {
        {
          oprot.writeI32(struct.category.size());
          for (String _iter235 : struct.category)
          {
            oprot.writeString(_iter235);
          }
        }
      }
      if (struct.isSetGeography()) {
        {
          oprot.writeI32(struct.geography.size());
          for (String _iter236 : struct.geography)
          {
            oprot.writeString(_iter236);
          }
        }
      }
      if (struct.isSetIsAllApp()) {
        oprot.writeI32(struct.isAllApp);
      }
      if (struct.isSetIsAllMobile()) {
        oprot.writeI32(struct.isAllMobile);
      }
      if (struct.isSetIsAllNet()) {
        oprot.writeI32(struct.isAllNet);
      }
      if (struct.isSetIsKeywords()) {
        oprot.writeI32(struct.isKeywords);
      }
      if (struct.isSetMatchKeyWords()) {
        {
          oprot.writeI32(struct.matchKeyWords.size());
          for (String _iter237 : struct.matchKeyWords)
          {
            oprot.writeString(_iter237);
          }
        }
      }
      if (struct.isSetIsNewsSoure()) {
        oprot.writeI32(struct.isNewsSoure);
      }
      if (struct.isSetIsMatchAllSource()) {
        oprot.writeI32(struct.isMatchAllSource);
      }
      if (struct.isSetMatchNewSource()) {
        {
          oprot.writeI32(struct.matchNewSource.size());
          for (int _iter238 : struct.matchNewSource)
          {
            oprot.writeI32(_iter238);
          }
        }
      }
      if (struct.isSetABTestType()) {
        oprot.writeI32(struct.ABTestType);
      }
      if (struct.isSetDateClickView()) {
        {
          oprot.writeI32(struct.dateClickView.size());
          for (DateClickViewLimit _iter239 : struct.dateClickView)
          {
            _iter239.write(oprot);
          }
        }
      }
      if (struct.isSetAppVersion()) {
        {
          oprot.writeI32(struct.appVersion.size());
          for (String _iter240 : struct.appVersion)
          {
            oprot.writeString(_iter240);
          }
        }
      }
      if (struct.isSetIsRefresh()) {
        oprot.writeI32(struct.isRefresh);
      }
      if (struct.isSetMSeq()) {
        {
          oprot.writeI32(struct.mSeq.size());
          for (Map.Entry<String, Integer> _iter241 : struct.mSeq.entrySet())
          {
            oprot.writeString(_iter241.getKey());
            oprot.writeI32(_iter241.getValue());
          }
        }
      }
      if (struct.isSetDataVersion()) {
        oprot.writeI32(struct.dataVersion);
      }
      if (struct.isSetModel()) {
        {
          oprot.writeI32(struct.model.size());
          for (String _iter242 : struct.model)
          {
            oprot.writeString(_iter242);
          }
        }
      }
      if (struct.isSetTurnPlayType()) {
        oprot.writeI32(struct.TurnPlayType);
      }
      if (struct.isSetTurnLimit()) {
        oprot.writeI32(struct.TurnLimit);
      }
      if (struct.isSetTurnClickLimit()) {
        oprot.writeI32(struct.TurnClickLimit);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetOs()) {
        {
          oprot.writeI32(struct.os.size());
          for (String _iter243 : struct.os)
          {
            oprot.writeString(_iter243);
          }
        }
      }
      if (struct.isSetAdSrcType()) {
        oprot.writeI32(struct.adSrcType);
      }
      if (struct.isSetThirdID()) {
        oprot.writeI64(struct.thirdID);
      }
      if (struct.isSetIncome()) {
        {
          oprot.writeI32(struct.income.size());
          for (int _iter244 : struct.income)
          {
            oprot.writeI32(_iter244);
          }
        }
      }
      if (struct.isSetKidState()) {
        oprot.writeI32(struct.kidState);
      }
      if (struct.isSetIsCateMatch()) {
        oprot.writeBool(struct.isCateMatch);
      }
      if (struct.isSetNewsTags()) {
        {
          oprot.writeI32(struct.newsTags.size());
          for (String _iter245 : struct.newsTags)
          {
            oprot.writeString(_iter245);
          }
        }
      }
      if (struct.isSetIsScreenFlashAd()) {
        oprot.writeBool(struct.isScreenFlashAd);
      }
      if (struct.isSetFreshTm()) {
        oprot.writeI32(struct.freshTm);
      }
      if (struct.isSetDateClickViewV2()) {
        {
          oprot.writeI32(struct.dateClickViewV2.size());
          for (DateClickViewLimitV2 _iter246 : struct.dateClickViewV2)
          {
            _iter246.write(oprot);
          }
        }
      }
      if (struct.isSetAdDeliveryCtrl()) {
        struct.adDeliveryCtrl.write(oprot);
      }
      if (struct.isSetLimitClickNum()) {
        oprot.writeI32(struct.limitClickNum);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, AdInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adId = iprot.readI64();
      struct.setAdIdIsSet(true);
      struct.adContent = new AdContent();
      struct.adContent.read(iprot);
      struct.setAdContentIsSet(true);
      struct.state = iprot.readI32();
      struct.setStateIsSet(true);
      BitSet incoming = iprot.readBitSet(50);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeRange = new ArrayList<LimitTimeRange>(_list247.size);
          LimitTimeRange _elem248;
          for (int _i249 = 0; _i249 < _list247.size; ++_i249)
          {
            _elem248 = new LimitTimeRange();
            _elem248.read(iprot);
            struct.timeRange.add(_elem248);
          }
        }
        struct.setTimeRangeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limitCond = iprot.readI32();
        struct.setLimitCondIsSet(true);
      }
      if (incoming.get(4)) {
        struct.limitNum = iprot.readI32();
        struct.setLimitNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recommendType = iprot.readI32();
        struct.setRecommendTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.weight = iprot.readI32();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list250 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.unused1 = new ArrayList<String>(_list250.size);
          String _elem251;
          for (int _i252 = 0; _i252 < _list250.size; ++_i252)
          {
            _elem251 = iprot.readString();
            struct.unused1.add(_elem251);
          }
        }
        struct.setUnused1IsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.unused2 = new ArrayList<Integer>(_list253.size);
          int _elem254;
          for (int _i255 = 0; _i255 < _list253.size; ++_i255)
          {
            _elem254 = iprot.readI32();
            struct.unused2.add(_elem254);
          }
        }
        struct.setUnused2IsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list256 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.unused3 = new ArrayList<Integer>(_list256.size);
          int _elem257;
          for (int _i258 = 0; _i258 < _list256.size; ++_i258)
          {
            _elem257 = iprot.readI32();
            struct.unused3.add(_elem257);
          }
        }
        struct.setUnused3IsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set259 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.putFirm = new HashSet<String>(2*_set259.size);
          String _elem260;
          for (int _i261 = 0; _i261 < _set259.size; ++_i261)
          {
            _elem260 = iprot.readString();
            struct.putFirm.add(_elem260);
          }
        }
        struct.setPutFirmIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list262 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.operators = new ArrayList<Integer>(_list262.size);
          int _elem263;
          for (int _i264 = 0; _i264 < _list262.size; ++_i264)
          {
            _elem263 = iprot.readI32();
            struct.operators.add(_elem263);
          }
        }
        struct.setOperatorsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.netEnv = new ArrayList<Integer>(_list265.size);
          int _elem266;
          for (int _i267 = 0; _i267 < _list265.size; ++_i267)
          {
            _elem266 = iprot.readI32();
            struct.netEnv.add(_elem266);
          }
        }
        struct.setNetEnvIsSet(true);
      }
      if (incoming.get(13)) {
        struct.geographyType = iprot.readI32();
        struct.setGeographyTypeIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list268 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.unused4 = new ArrayList<String>(_list268.size);
          String _elem269;
          for (int _i270 = 0; _i270 < _list268.size; ++_i270)
          {
            _elem269 = iprot.readString();
            struct.unused4.add(_elem269);
          }
        }
        struct.setUnused4IsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TSet _set271 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.putDevice = new HashSet<Integer>(2*_set271.size);
          int _elem272;
          for (int _i273 = 0; _i273 < _set271.size; ++_i273)
          {
            _elem272 = iprot.readI32();
            struct.putDevice.add(_elem272);
          }
        }
        struct.setPutDeviceIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TSet _set274 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.putProduct = new HashSet<Integer>(2*_set274.size);
          int _elem275;
          for (int _i276 = 0; _i276 < _set274.size; ++_i276)
          {
            _elem275 = iprot.readI32();
            struct.putProduct.add(_elem275);
          }
        }
        struct.setPutProductIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TSet _set277 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.category = new HashSet<String>(2*_set277.size);
          String _elem278;
          for (int _i279 = 0; _i279 < _set277.size; ++_i279)
          {
            _elem278 = iprot.readString();
            struct.category.add(_elem278);
          }
        }
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TSet _set280 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.geography = new HashSet<String>(2*_set280.size);
          String _elem281;
          for (int _i282 = 0; _i282 < _set280.size; ++_i282)
          {
            _elem281 = iprot.readString();
            struct.geography.add(_elem281);
          }
        }
        struct.setGeographyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isAllApp = iprot.readI32();
        struct.setIsAllAppIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isAllMobile = iprot.readI32();
        struct.setIsAllMobileIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isAllNet = iprot.readI32();
        struct.setIsAllNetIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isKeywords = iprot.readI32();
        struct.setIsKeywordsIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list283 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.matchKeyWords = new ArrayList<String>(_list283.size);
          String _elem284;
          for (int _i285 = 0; _i285 < _list283.size; ++_i285)
          {
            _elem284 = iprot.readString();
            struct.matchKeyWords.add(_elem284);
          }
        }
        struct.setMatchKeyWordsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isNewsSoure = iprot.readI32();
        struct.setIsNewsSoureIsSet(true);
      }
      if (incoming.get(25)) {
        struct.isMatchAllSource = iprot.readI32();
        struct.setIsMatchAllSourceIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TSet _set286 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.matchNewSource = new HashSet<Integer>(2*_set286.size);
          int _elem287;
          for (int _i288 = 0; _i288 < _set286.size; ++_i288)
          {
            _elem287 = iprot.readI32();
            struct.matchNewSource.add(_elem287);
          }
        }
        struct.setMatchNewSourceIsSet(true);
      }
      if (incoming.get(27)) {
        struct.ABTestType = iprot.readI32();
        struct.setABTestTypeIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list289 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dateClickView = new ArrayList<DateClickViewLimit>(_list289.size);
          DateClickViewLimit _elem290;
          for (int _i291 = 0; _i291 < _list289.size; ++_i291)
          {
            _elem290 = new DateClickViewLimit();
            _elem290.read(iprot);
            struct.dateClickView.add(_elem290);
          }
        }
        struct.setDateClickViewIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TSet _set292 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appVersion = new HashSet<String>(2*_set292.size);
          String _elem293;
          for (int _i294 = 0; _i294 < _set292.size; ++_i294)
          {
            _elem293 = iprot.readString();
            struct.appVersion.add(_elem293);
          }
        }
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(30)) {
        struct.isRefresh = iprot.readI32();
        struct.setIsRefreshIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TMap _map295 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mSeq = new HashMap<String,Integer>(2*_map295.size);
          String _key296;
          int _val297;
          for (int _i298 = 0; _i298 < _map295.size; ++_i298)
          {
            _key296 = iprot.readString();
            _val297 = iprot.readI32();
            struct.mSeq.put(_key296, _val297);
          }
        }
        struct.setMSeqIsSet(true);
      }
      if (incoming.get(32)) {
        struct.dataVersion = iprot.readI32();
        struct.setDataVersionIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TSet _set299 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.model = new HashSet<String>(2*_set299.size);
          String _elem300;
          for (int _i301 = 0; _i301 < _set299.size; ++_i301)
          {
            _elem300 = iprot.readString();
            struct.model.add(_elem300);
          }
        }
        struct.setModelIsSet(true);
      }
      if (incoming.get(34)) {
        struct.TurnPlayType = iprot.readI32();
        struct.setTurnPlayTypeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.TurnLimit = iprot.readI32();
        struct.setTurnLimitIsSet(true);
      }
      if (incoming.get(36)) {
        struct.TurnClickLimit = iprot.readI32();
        struct.setTurnClickLimitIsSet(true);
      }
      if (incoming.get(37)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(38)) {
        {
          org.apache.thrift.protocol.TSet _set302 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.os = new HashSet<String>(2*_set302.size);
          String _elem303;
          for (int _i304 = 0; _i304 < _set302.size; ++_i304)
          {
            _elem303 = iprot.readString();
            struct.os.add(_elem303);
          }
        }
        struct.setOsIsSet(true);
      }
      if (incoming.get(39)) {
        struct.adSrcType = iprot.readI32();
        struct.setAdSrcTypeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.thirdID = iprot.readI64();
        struct.setThirdIDIsSet(true);
      }
      if (incoming.get(41)) {
        {
          org.apache.thrift.protocol.TSet _set305 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.income = new HashSet<Integer>(2*_set305.size);
          int _elem306;
          for (int _i307 = 0; _i307 < _set305.size; ++_i307)
          {
            _elem306 = iprot.readI32();
            struct.income.add(_elem306);
          }
        }
        struct.setIncomeIsSet(true);
      }
      if (incoming.get(42)) {
        struct.kidState = iprot.readI32();
        struct.setKidStateIsSet(true);
      }
      if (incoming.get(43)) {
        struct.isCateMatch = iprot.readBool();
        struct.setIsCateMatchIsSet(true);
      }
      if (incoming.get(44)) {
        {
          org.apache.thrift.protocol.TSet _set308 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.newsTags = new HashSet<String>(2*_set308.size);
          String _elem309;
          for (int _i310 = 0; _i310 < _set308.size; ++_i310)
          {
            _elem309 = iprot.readString();
            struct.newsTags.add(_elem309);
          }
        }
        struct.setNewsTagsIsSet(true);
      }
      if (incoming.get(45)) {
        struct.isScreenFlashAd = iprot.readBool();
        struct.setIsScreenFlashAdIsSet(true);
      }
      if (incoming.get(46)) {
        struct.freshTm = iprot.readI32();
        struct.setFreshTmIsSet(true);
      }
      if (incoming.get(47)) {
        {
          org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dateClickViewV2 = new ArrayList<DateClickViewLimitV2>(_list311.size);
          DateClickViewLimitV2 _elem312;
          for (int _i313 = 0; _i313 < _list311.size; ++_i313)
          {
            _elem312 = new DateClickViewLimitV2();
            _elem312.read(iprot);
            struct.dateClickViewV2.add(_elem312);
          }
        }
        struct.setDateClickViewV2IsSet(true);
      }
      if (incoming.get(48)) {
        struct.adDeliveryCtrl = new AdDeliveryCtrl();
        struct.adDeliveryCtrl.read(iprot);
        struct.setAdDeliveryCtrlIsSet(true);
      }
      if (incoming.get(49)) {
        struct.limitClickNum = iprot.readI32();
        struct.setLimitClickNumIsSet(true);
      }
    }
  }

}

